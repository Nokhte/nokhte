// Mocks generated by Mockito 5.4.2 from annotations
// in nokhte/test/app/core/modules/solo_doc/fixtures/solo_doc_mock_gen.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nokhte/app/core/error/failure.dart' as _i6;
import 'package:nokhte/app/core/interfaces/logic.dart' as _i7;
import 'package:nokhte/app/core/modules/solo_doc/domain/domain.dart' as _i3;

import 'solo_doc_mock_gen.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSoloDocContract_1 extends _i1.SmartFake
    implements _i3.SoloDocContract {
  _FakeSoloDocContract_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MSoloDocRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMSoloDocRemoteSource extends _i1.Mock
    implements _i4.MSoloDocRemoteSource {
  MockMSoloDocRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<dynamic>> createSoloDoc({required String? docType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSoloDoc,
          [],
          {#docType: docType},
        ),
        returnValue: _i5.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i5.Future<List<dynamic>>);

  @override
  _i5.Future<List<dynamic>> getSoloDocContent(
          {required bool? getCollaboratorsDoc}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSoloDocContent,
          [],
          {#getCollaboratorsDoc: getCollaboratorsDoc},
        ),
        returnValue: _i5.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i5.Future<List<dynamic>>);

  @override
  _i5.Future<List<dynamic>> sealSoloDoc() => (super.noSuchMethod(
        Invocation.method(
          #sealSoloDoc,
          [],
        ),
        returnValue: _i5.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i5.Future<List<dynamic>>);

  @override
  _i5.Future<List<dynamic>> shareSoloDoc() => (super.noSuchMethod(
        Invocation.method(
          #shareSoloDoc,
          [],
        ),
        returnValue: _i5.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i5.Future<List<dynamic>>);

  @override
  _i5.Future<List<dynamic>> submitDocContent({required String? newContent}) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitDocContent,
          [],
          {#newContent: newContent},
        ),
        returnValue: _i5.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i5.Future<List<dynamic>>);
}

/// A class which mocks [MSoloDocContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockMSoloDocContract extends _i1.Mock implements _i4.MSoloDocContract {
  MockMSoloDocContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<
      _i2.Either<_i6.Failure, _i3.SoloDocContentEntity>> getSoloDocContent(
          {required bool? getCollaboratorsDoc}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSoloDocContent,
          [],
          {#getCollaboratorsDoc: getCollaboratorsDoc},
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i3.SoloDocContentEntity>>.value(
                _FakeEither_0<_i6.Failure, _i3.SoloDocContentEntity>(
          this,
          Invocation.method(
            #getSoloDocContent,
            [],
            {#getCollaboratorsDoc: getCollaboratorsDoc},
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.SoloDocContentEntity>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.SoloDocSubmissionStatusEntity>>
      submitDocContent({required String? newContent}) => (super.noSuchMethod(
            Invocation.method(
              #submitDocContent,
              [],
              {#newContent: newContent},
            ),
            returnValue: _i5.Future<
                    _i2.Either<_i6.Failure,
                        _i3.SoloDocSubmissionStatusEntity>>.value(
                _FakeEither_0<_i6.Failure, _i3.SoloDocSubmissionStatusEntity>(
              this,
              Invocation.method(
                #submitDocContent,
                [],
                {#newContent: newContent},
              ),
            )),
          ) as _i5.Future<
              _i2.Either<_i6.Failure, _i3.SoloDocSubmissionStatusEntity>>);

  @override
  _i5.Future<
      _i2.Either<_i6.Failure, _i3.SoloDocCreationStatusEntity>> createSoloDoc(
          {required String? docType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSoloDoc,
          [],
          {#docType: docType},
        ),
        returnValue: _i5.Future<
                _i2.Either<_i6.Failure, _i3.SoloDocCreationStatusEntity>>.value(
            _FakeEither_0<_i6.Failure, _i3.SoloDocCreationStatusEntity>(
          this,
          Invocation.method(
            #createSoloDoc,
            [],
            {#docType: docType},
          ),
        )),
      ) as _i5
          .Future<_i2.Either<_i6.Failure, _i3.SoloDocCreationStatusEntity>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.SoloDocSealingStatusEntity>>
      sealSoloDoc() => (super.noSuchMethod(
            Invocation.method(
              #sealSoloDoc,
              [],
            ),
            returnValue: _i5.Future<
                    _i2
                    .Either<_i6.Failure, _i3.SoloDocSealingStatusEntity>>.value(
                _FakeEither_0<_i6.Failure, _i3.SoloDocSealingStatusEntity>(
              this,
              Invocation.method(
                #sealSoloDoc,
                [],
              ),
            )),
          ) as _i5
              .Future<_i2.Either<_i6.Failure, _i3.SoloDocSealingStatusEntity>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.SoloDocSharingStatusEntity>>
      shareSoloDoc() => (super.noSuchMethod(
            Invocation.method(
              #shareSoloDoc,
              [],
            ),
            returnValue: _i5.Future<
                    _i2
                    .Either<_i6.Failure, _i3.SoloDocSharingStatusEntity>>.value(
                _FakeEither_0<_i6.Failure, _i3.SoloDocSharingStatusEntity>(
              this,
              Invocation.method(
                #shareSoloDoc,
                [],
              ),
            )),
          ) as _i5
              .Future<_i2.Either<_i6.Failure, _i3.SoloDocSharingStatusEntity>>);
}

/// A class which mocks [MCreateSoloDoc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCreateSoloDoc extends _i1.Mock implements _i4.MCreateSoloDoc {
  MockMCreateSoloDoc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SoloDocContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeSoloDocContract_1(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i3.SoloDocContract);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.SoloDocCreationStatusEntity>> call(
          _i3.CreateSoloDocParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<
                _i2.Either<_i6.Failure, _i3.SoloDocCreationStatusEntity>>.value(
            _FakeEither_0<_i6.Failure, _i3.SoloDocCreationStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5
          .Future<_i2.Either<_i6.Failure, _i3.SoloDocCreationStatusEntity>>);
}

/// A class which mocks [MGetSoloDoc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetSoloDoc extends _i1.Mock implements _i4.MGetSoloDoc {
  MockMGetSoloDoc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SoloDocContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeSoloDocContract_1(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i3.SoloDocContract);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.SoloDocContentEntity>> call(
          _i3.GetSoloDocParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i3.SoloDocContentEntity>>.value(
                _FakeEither_0<_i6.Failure, _i3.SoloDocContentEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.SoloDocContentEntity>>);
}

/// A class which mocks [MSealSoloDoc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMSealSoloDoc extends _i1.Mock implements _i4.MSealSoloDoc {
  MockMSealSoloDoc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SoloDocContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeSoloDocContract_1(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i3.SoloDocContract);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.SoloDocSealingStatusEntity>> call(
          _i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<
                _i2.Either<_i6.Failure, _i3.SoloDocSealingStatusEntity>>.value(
            _FakeEither_0<_i6.Failure, _i3.SoloDocSealingStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.SoloDocSealingStatusEntity>>);
}

/// A class which mocks [MShareSoloDoc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMShareSoloDoc extends _i1.Mock implements _i4.MShareSoloDoc {
  MockMShareSoloDoc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SoloDocContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeSoloDocContract_1(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i3.SoloDocContract);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.SoloDocSharingStatusEntity>> call(
          _i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<
                _i2.Either<_i6.Failure, _i3.SoloDocSharingStatusEntity>>.value(
            _FakeEither_0<_i6.Failure, _i3.SoloDocSharingStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.SoloDocSharingStatusEntity>>);
}

/// A class which mocks [MSubmitSoloDoc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMSubmitSoloDoc extends _i1.Mock implements _i4.MSubmitSoloDoc {
  MockMSubmitSoloDoc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SoloDocContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeSoloDocContract_1(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i3.SoloDocContract);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.SoloDocSubmissionStatusEntity>> call(
          _i3.SubmitSoloDocParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<
                _i2
                .Either<_i6.Failure, _i3.SoloDocSubmissionStatusEntity>>.value(
            _FakeEither_0<_i6.Failure, _i3.SoloDocSubmissionStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5
          .Future<_i2.Either<_i6.Failure, _i3.SoloDocSubmissionStatusEntity>>);
}
