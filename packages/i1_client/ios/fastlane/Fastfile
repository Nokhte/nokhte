def getVersionStringForChangelog()
  file=YAML.load_file('../../version.yml')
  version="[#{file['major']}.#{file['minor']}.#{file['patch']}]"
  UI.message version
  return version
end


update_fastlane

default_platform(:ios)

platform :ios do
  desc "Major Version Bump"
  lane :bump_major do
    flutter_version_manager(
      arguments: "-major",
      yml: "../version.yml",
      pubspec: "../pubspec.yaml")
  end
  
  desc "Minor Version Bump"
  lane :bump_minor do
    flutter_version_manager(
      arguments: "-minor",
      yml: "../version.yml",
      pubspec: "../pubspec.yaml")
  end
  
  desc "Patch Version Bump"
  lane :bump_patch do
    flutter_version_manager(
      arguments: "-patch",
      yml: "../version.yml",
      pubspec: "../pubspec.yaml")
  end

  lane :read_version do
    version = getVersionStringForChangelog()
    UI.message("#{version}")
    changelogOutput = read_changelog(
    changelog_path: '../changelog.md',
    excluded_markdown_elements: ['-', '###'],
    section_identifier: version
    )
  UI.message("#{changelogOutput}")
  end

  lane :apply_new_version do
    flutter_version_manager(
      arguments: "-apply",
      yml: "../version.yml",
      pubspec: "../pubspec.yaml")
      
  end

  desc "rebuild iOS Archive (PREREQ No. 1)"
  lane :rebuild_ios_archive do
    Dir.chdir("../..") do
      sh "flutter packages get"
      sh "flutter clean"
      sh "flutter build ios"
    end
  end


  # Do Distribution Manually to cut CI/CD computation time
  desc "Generic Beta Build"
  lane :generic_ios_beta_build do
      setup_ci
      match(type: 'appstore', readonly: true)

    build_app(
  export_method: "app-store",
  configuration: "Release",
  archive_path: "../build/ios/archive/Runner.xcarchive"
)
api_key = app_store_connect_api_key(
  key_id: ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"],
  issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
  key_content: ENV["APP_STORE_CONNECT_API_KEY_KEY"],
  is_key_content_base64: ENV["APP_STORE_CONNECT_API_KEY_IS_KEY_CONTENT_BASE64"]
)
version = getVersionStringForChangelog()
changelogOutput = read_changelog(
changelog_path: '../changelog.md',
excluded_markdown_elements: ['-', '###'],
section_identifier: version
)
upload_to_testflight(
  expire_previous_builds: true,
  skip_waiting_for_build_processing: true,
  changelog: changelogOutput
)
  end
end