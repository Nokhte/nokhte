drop policy "SELECT: They can read their row" on "public"."active_nokhte_sessions";

drop policy "UPDATE: Can update a valid session" on "public"."active_nokhte_sessions";

revoke delete on table "public"."active_nokhte_sessions" from "anon";

revoke insert on table "public"."active_nokhte_sessions" from "anon";

revoke references on table "public"."active_nokhte_sessions" from "anon";

revoke select on table "public"."active_nokhte_sessions" from "anon";

revoke trigger on table "public"."active_nokhte_sessions" from "anon";

revoke truncate on table "public"."active_nokhte_sessions" from "anon";

revoke update on table "public"."active_nokhte_sessions" from "anon";

revoke delete on table "public"."active_nokhte_sessions" from "authenticated";

revoke insert on table "public"."active_nokhte_sessions" from "authenticated";

revoke references on table "public"."active_nokhte_sessions" from "authenticated";

revoke select on table "public"."active_nokhte_sessions" from "authenticated";

revoke trigger on table "public"."active_nokhte_sessions" from "authenticated";

revoke truncate on table "public"."active_nokhte_sessions" from "authenticated";

revoke update on table "public"."active_nokhte_sessions" from "authenticated";

revoke delete on table "public"."active_nokhte_sessions" from "service_role";

revoke insert on table "public"."active_nokhte_sessions" from "service_role";

revoke references on table "public"."active_nokhte_sessions" from "service_role";

revoke select on table "public"."active_nokhte_sessions" from "service_role";

revoke trigger on table "public"."active_nokhte_sessions" from "service_role";

revoke truncate on table "public"."active_nokhte_sessions" from "service_role";

revoke update on table "public"."active_nokhte_sessions" from "service_role";

alter table "public"."active_nokhte_sessions" drop constraint "active_irl_nokhte_sessions_session_uid_key";

alter table "public"."active_nokhte_sessions" drop constraint "active_nokhte_sessions_collaborator_uids_key";

alter table "public"."active_nokhte_sessions" drop constraint "active_nokhte_sessions_leader_uid_fkey";

alter table "public"."active_nokhte_sessions" drop constraint "active_nokhte_sessions_speaker_spotlight_fkey";

alter table "public"."active_nokhte_sessions" drop constraint "nokhte_sessions_pkey";

drop index if exists "public"."active_nokhte_sessions_collaborator_uids_key";

drop index if exists "public"."nokhte_sessions_pkey";

drop index if exists "public"."active_irl_nokhte_sessions_session_uid_key";

drop table "public"."active_nokhte_sessions";

create table "public"."rt_active_nokhte_sessions" (
    "current_phases" real[] not null default '{0}'::real[],
    "is_online" boolean[] not null default '{t}'::boolean[],
    "session_uid" uuid not null,
    "has_begun" boolean not null default false,
    "speaker_spotlight" uuid
);


alter table "public"."rt_active_nokhte_sessions" enable row level security;

create table "public"."st_active_nokhte_sessions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "collaborator_uids" uuid[] not null,
    "content" text[] not null default '{}'::text[],
    "have_gyroscopes" boolean[] not null default '{t}'::boolean[],
    "session_uid" uuid not null default gen_random_uuid(),
    "leader_uid" uuid not null,
    "has_premium_access" boolean[] not null
);


alter table "public"."st_active_nokhte_sessions" enable row level security;

CREATE UNIQUE INDEX rt_active_nokhte_sessions_pkey ON public.rt_active_nokhte_sessions USING btree (session_uid);

CREATE UNIQUE INDEX st_active_nokhte_sessions_duplicate_collaborator_uids_key ON public.st_active_nokhte_sessions USING btree (collaborator_uids);

CREATE UNIQUE INDEX st_active_nokhte_sessions_duplicate_pkey ON public.st_active_nokhte_sessions USING btree (id);

CREATE UNIQUE INDEX st_active_nokhte_sessions_duplicate_session_uid_key ON public.st_active_nokhte_sessions USING btree (session_uid);

CREATE UNIQUE INDEX active_irl_nokhte_sessions_session_uid_key ON public.rt_active_nokhte_sessions USING btree (session_uid);

alter table "public"."rt_active_nokhte_sessions" add constraint "rt_active_nokhte_sessions_pkey" PRIMARY KEY using index "rt_active_nokhte_sessions_pkey";

alter table "public"."st_active_nokhte_sessions" add constraint "st_active_nokhte_sessions_duplicate_pkey" PRIMARY KEY using index "st_active_nokhte_sessions_duplicate_pkey";

alter table "public"."rt_active_nokhte_sessions" add constraint "active_irl_nokhte_sessions_session_uid_key" UNIQUE using index "active_irl_nokhte_sessions_session_uid_key";

alter table "public"."rt_active_nokhte_sessions" add constraint "rt_active_nokhte_sessions_session_uid_fkey" FOREIGN KEY (session_uid) REFERENCES st_active_nokhte_sessions(session_uid) not valid;

alter table "public"."rt_active_nokhte_sessions" validate constraint "rt_active_nokhte_sessions_session_uid_fkey";

alter table "public"."rt_active_nokhte_sessions" add constraint "rt_active_nokhte_sessions_speaker_spotlight_fkey" FOREIGN KEY (speaker_spotlight) REFERENCES auth.users(id) not valid;

alter table "public"."rt_active_nokhte_sessions" validate constraint "rt_active_nokhte_sessions_speaker_spotlight_fkey";

alter table "public"."st_active_nokhte_sessions" add constraint "st_active_nokhte_sessions_duplicate_collaborator_uids_key" UNIQUE using index "st_active_nokhte_sessions_duplicate_collaborator_uids_key";

alter table "public"."st_active_nokhte_sessions" add constraint "st_active_nokhte_sessions_duplicate_session_uid_key" UNIQUE using index "st_active_nokhte_sessions_duplicate_session_uid_key";

alter table "public"."st_active_nokhte_sessions" add constraint "st_active_nokhte_sessions_leader_uid_fkey" FOREIGN KEY (leader_uid) REFERENCES auth.users(id) not valid;

alter table "public"."st_active_nokhte_sessions" validate constraint "st_active_nokhte_sessions_leader_uid_fkey";

grant delete on table "public"."rt_active_nokhte_sessions" to "anon";

grant insert on table "public"."rt_active_nokhte_sessions" to "anon";

grant references on table "public"."rt_active_nokhte_sessions" to "anon";

grant select on table "public"."rt_active_nokhte_sessions" to "anon";

grant trigger on table "public"."rt_active_nokhte_sessions" to "anon";

grant truncate on table "public"."rt_active_nokhte_sessions" to "anon";

grant update on table "public"."rt_active_nokhte_sessions" to "anon";

grant delete on table "public"."rt_active_nokhte_sessions" to "authenticated";

grant insert on table "public"."rt_active_nokhte_sessions" to "authenticated";

grant references on table "public"."rt_active_nokhte_sessions" to "authenticated";

grant select on table "public"."rt_active_nokhte_sessions" to "authenticated";

grant trigger on table "public"."rt_active_nokhte_sessions" to "authenticated";

grant truncate on table "public"."rt_active_nokhte_sessions" to "authenticated";

grant update on table "public"."rt_active_nokhte_sessions" to "authenticated";

grant delete on table "public"."rt_active_nokhte_sessions" to "service_role";

grant insert on table "public"."rt_active_nokhte_sessions" to "service_role";

grant references on table "public"."rt_active_nokhte_sessions" to "service_role";

grant select on table "public"."rt_active_nokhte_sessions" to "service_role";

grant trigger on table "public"."rt_active_nokhte_sessions" to "service_role";

grant truncate on table "public"."rt_active_nokhte_sessions" to "service_role";

grant update on table "public"."rt_active_nokhte_sessions" to "service_role";

grant delete on table "public"."st_active_nokhte_sessions" to "anon";

grant insert on table "public"."st_active_nokhte_sessions" to "anon";

grant references on table "public"."st_active_nokhte_sessions" to "anon";

grant select on table "public"."st_active_nokhte_sessions" to "anon";

grant trigger on table "public"."st_active_nokhte_sessions" to "anon";

grant truncate on table "public"."st_active_nokhte_sessions" to "anon";

grant update on table "public"."st_active_nokhte_sessions" to "anon";

grant delete on table "public"."st_active_nokhte_sessions" to "authenticated";

grant insert on table "public"."st_active_nokhte_sessions" to "authenticated";

grant references on table "public"."st_active_nokhte_sessions" to "authenticated";

grant select on table "public"."st_active_nokhte_sessions" to "authenticated";

grant trigger on table "public"."st_active_nokhte_sessions" to "authenticated";

grant truncate on table "public"."st_active_nokhte_sessions" to "authenticated";

grant update on table "public"."st_active_nokhte_sessions" to "authenticated";

grant delete on table "public"."st_active_nokhte_sessions" to "service_role";

grant insert on table "public"."st_active_nokhte_sessions" to "service_role";

grant references on table "public"."st_active_nokhte_sessions" to "service_role";

grant select on table "public"."st_active_nokhte_sessions" to "service_role";

grant trigger on table "public"."st_active_nokhte_sessions" to "service_role";

grant truncate on table "public"."st_active_nokhte_sessions" to "service_role";

grant update on table "public"."st_active_nokhte_sessions" to "service_role";

create policy "SELECT: They can read their own row"
on "public"."rt_active_nokhte_sessions"
as permissive
for select
to authenticated
using ((EXISTS ( SELECT st_active_nokhte_sessions.collaborator_uids
   FROM st_active_nokhte_sessions
  WHERE (auth.uid() = ANY (st_active_nokhte_sessions.collaborator_uids)))));


create policy "UPDATE: They can update their row if is a valid session"
on "public"."rt_active_nokhte_sessions"
as permissive
for update
to authenticated
using ((EXISTS ( SELECT st_active_nokhte_sessions.collaborator_uids
   FROM st_active_nokhte_sessions
  WHERE ((auth.uid() = ANY (st_active_nokhte_sessions.collaborator_uids)) AND ((array_length(st_active_nokhte_sessions.collaborator_uids, 1) < 4) OR (true = ALL (st_active_nokhte_sessions.has_premium_access)))))))
with check ((EXISTS ( SELECT st_active_nokhte_sessions.collaborator_uids
   FROM st_active_nokhte_sessions
  WHERE ((auth.uid() = ANY (st_active_nokhte_sessions.collaborator_uids)) AND ((array_length(st_active_nokhte_sessions.collaborator_uids, 1) < 4) OR (true = ALL (st_active_nokhte_sessions.has_premium_access)))))));


create policy "SELECT: They can read their row"
on "public"."st_active_nokhte_sessions"
as permissive
for select
to authenticated
using ((auth.uid() = ANY (collaborator_uids)));


create policy "UPDATE: Can update valid rows"
on "public"."st_active_nokhte_sessions"
as permissive
for update
to authenticated
using (((auth.uid() = ANY (collaborator_uids)) AND ((array_length(collaborator_uids, 1) < 4) OR (true = ALL (has_premium_access))) AND is_not_updating_has_premium_access(id, has_premium_access)))
with check (((auth.uid() = ANY (collaborator_uids)) AND ((array_length(collaborator_uids, 1) < 4) OR (true = ALL (has_premium_access))) AND is_not_updating_has_premium_access(id, has_premium_access)));

alter
  publication supabase_realtime add table public.rt_active_nokhte_sessions;

drop function if exists "public"."update_nokhte_session_phase"(incoming_uids uuid[], index_to_edit integer, new_value real);

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.update_nokhte_session_phase(incoming_session_uid uuid, index_to_edit integer, new_value real)
 RETURNS void
 LANGUAGE plpgsql
AS $function$BEGIN
    update public.rt_active_nokhte_sessions SET current_phases[index_to_edit+1] = new_value WHERE session_uid = incoming_session_uid;
END;$function$
;

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.is_not_updating_has_premium_access(_id bigint, _has_premium_access boolean[])
 RETURNS boolean
 LANGUAGE sql
 SECURITY DEFINER
AS $function$
WITH original_row AS (
    SELECT has_premium_access
    FROM public.st_active_nokhte_sessions
    WHERE id = _id
)
SELECT (SELECT has_premium_access FROM original_row) = _has_premium_access;
$function$
;