set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.is_valid_individual_session_metadata_jsonb(incoming_session_metadata_jsonb jsonb)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
BEGIN 
  RETURN (
  jsonb_matches_schema (
    '
    {
     "type": "object",
      "properties": {
        "metadata": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "thePerspective": {
                "type": "string"
              },
              "numberOfFiles": {
                "type": "number"
              }
            }
          }
        }
      }
    }',
    incoming_session_metadata_jsonb
    ));
    END;
$function$
;


create table "public"."individual_sessions" (
    "id" bigint generated by default as identity not null,
    "owner_uid" uuid not null,
    "collaborator_one_uid" uuid not null,
    "collaborator_two_uid" uuid not null,
    "session_held_at" timestamp with time zone default now(),
    "session_metadata" jsonb not null
);


alter table "public"."individual_sessions" enable row level security;

CREATE UNIQUE INDEX individual_sessions_tracking_pkey ON public.individual_sessions USING btree (id);

alter table "public"."individual_sessions" add constraint "individual_sessions_tracking_pkey" PRIMARY KEY using index "individual_sessions_tracking_pkey";

alter table "public"."individual_sessions" add constraint "individual_sessions_collaborator_one_uid_fkey" FOREIGN KEY (collaborator_one_uid) REFERENCES auth.users(id) not valid;

alter table "public"."individual_sessions" validate constraint "individual_sessions_collaborator_one_uid_fkey";

alter table "public"."individual_sessions" add constraint "individual_sessions_collaborator_two_uid_fkey" FOREIGN KEY (collaborator_two_uid) REFERENCES auth.users(id) not valid;

alter table "public"."individual_sessions" validate constraint "individual_sessions_collaborator_two_uid_fkey";

alter table "public"."individual_sessions" add constraint "individual_sessions_owner_uid_fkey" FOREIGN KEY (owner_uid) REFERENCES auth.users(id) not valid;

alter table "public"."individual_sessions" validate constraint "individual_sessions_owner_uid_fkey";

alter table "public"."individual_sessions" add constraint "individual_sessions_session_metadata" CHECK (is_valid_individual_session_metadata_jsonb(session_metadata)) not valid;

alter table "public"."individual_sessions" validate constraint "individual_sessions_session_metadata";



create policy "Can only read their own sessions"
on "public"."individual_sessions"
as permissive
for select
to authenticated
using ((auth.uid() = owner_uid));


create policy "Enable insert for authenticated users only"
on "public"."individual_sessions"
as permissive
for insert
to authenticated
with check (true);


create policy "can only update their own sessions"
on "public"."individual_sessions"
as permissive
for update
to authenticated
using ((auth.uid() = owner_uid));

insert into storage.buckets (id, name)
    values  ('perspectives_audio', 'perspectives_audio');

