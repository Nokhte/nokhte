create type "public"."invitation_type" as enum ('NOKHTE_SESSION', 'COLLABORATION_SESSION');

alter table "public"."p2p_collaborator_pool" add column "invitation_type" invitation_type not null default 'NOKHTE_SESSION'::invitation_type;


create table "public"."active_nokhte_sessions" (
    "id" bigint generated by default as identity not null,
    "meeting_uid" uuid not null,
    "collaborator_one_uid" uuid not null,
    "collaborator_two_uid" uuid not null
);


alter table "public"."active_nokhte_sessions" enable row level security;

create table "public"."finished_nokhte_sessions" (
    "id" bigint generated by default as identity not null,
    "collaborator_one_uid" uuid not null,
    "collaborator_two_uid" uuid not null
);


alter table "public"."finished_nokhte_sessions" enable row level security;

CREATE UNIQUE INDEX finished_nokhte_sessions_pkey ON public.finished_nokhte_sessions USING btree (id);

CREATE UNIQUE INDEX nokhte_sessions_pkey ON public.active_nokhte_sessions USING btree (id);

alter table "public"."active_nokhte_sessions" add constraint "nokhte_sessions_pkey" PRIMARY KEY using index "nokhte_sessions_pkey";

alter table "public"."finished_nokhte_sessions" add constraint "finished_nokhte_sessions_pkey" PRIMARY KEY using index "finished_nokhte_sessions_pkey";

alter table "public"."active_nokhte_sessions" add constraint "active_nokhte_sessions_collaborator_one_uid_fkey" FOREIGN KEY (collaborator_one_uid) REFERENCES auth.users(id) not valid;

alter table "public"."active_nokhte_sessions" validate constraint "active_nokhte_sessions_collaborator_one_uid_fkey";

alter table "public"."active_nokhte_sessions" add constraint "active_nokhte_sessions_collaborator_two_uid_fkey" FOREIGN KEY (collaborator_two_uid) REFERENCES auth.users(id) not valid;

alter table "public"."active_nokhte_sessions" validate constraint "active_nokhte_sessions_collaborator_two_uid_fkey";

alter table "public"."active_nokhte_sessions" add constraint "active_nokhte_sessions_meeting_uid_fkey" FOREIGN KEY (meeting_uid) REFERENCES auth.users(id) not valid;

alter table "public"."active_nokhte_sessions" validate constraint "active_nokhte_sessions_meeting_uid_fkey";

alter table "public"."finished_nokhte_sessions" add constraint "finished_nokhte_sessions_collaborator_one_uid_fkey" FOREIGN KEY (collaborator_one_uid) REFERENCES auth.users(id) not valid;

alter table "public"."finished_nokhte_sessions" validate constraint "finished_nokhte_sessions_collaborator_one_uid_fkey";

alter table "public"."finished_nokhte_sessions" add constraint "finished_nokhte_sessions_collaborator_two_uid_fkey" FOREIGN KEY (collaborator_two_uid) REFERENCES auth.users(id) not valid;

alter table "public"."finished_nokhte_sessions" validate constraint "finished_nokhte_sessions_collaborator_two_uid_fkey";


create policy "DELETE: they can delete their row"
on "public"."active_nokhte_sessions"
as permissive
for delete
to authenticated
using (((auth.uid() = collaborator_one_uid) OR (auth.uid() = collaborator_two_uid)));


create policy "SELECT: They can read their row"
on "public"."active_nokhte_sessions"
as permissive
for select
to authenticated
using (((auth.uid() = collaborator_one_uid) OR (auth.uid() = collaborator_two_uid)));


create policy "UPDATE: They can only update their row"
on "public"."active_nokhte_sessions"
as permissive
for update
to authenticated
using (((auth.uid() = collaborator_one_uid) OR (auth.uid() = collaborator_two_uid)))
with check (((auth.uid() = collaborator_one_uid) OR (auth.uid() = collaborator_two_uid)));


create policy "Enable insert for authenticated users"
on "public"."finished_nokhte_sessions"
as permissive
for insert
to authenticated
with check (true);


create policy "SELECT: Users can read their past Nokhte Sessions"
on "public"."finished_nokhte_sessions"
as permissive
for select
to authenticated
using (((auth.uid() = collaborator_one_uid) OR (auth.uid() = collaborator_two_uid)));

alter
  publication supabase_realtime add table public.active_nokhte_sessions;


CREATE UNIQUE INDEX p2p_collaborator_pool_wayfarer_uid_key ON public.p2p_collaborator_pool USING btree (wayfarer_uid);

alter table "public"."p2p_collaborator_pool" add constraint "p2p_collaborator_pool_wayfarer_uid_key" UNIQUE using index "p2p_collaborator_pool_wayfarer_uid_key";

drop function if exists "internal_functions"."adj_or_noun_dispenser"(is_a_noun boolean, word_id integer);

drop function if exists "internal_functions"."collaborator_phrase_assigner"();

drop function if exists "internal_functions"."enforce_unique_wayfarers"();


drop trigger if exists "enforce_unique_wayfarers" on "public"."p2p_collaborator_pool";