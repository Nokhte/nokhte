drop policy "DELETE: they can delete their row" on "public"."active_nokhte_sessions";

create table "public"."active_nokhte_session_metadata" (
    "id" bigint generated by default as identity not null,
    "collaborator_uids" uuid[] not null,
    "is_a_valid_session" boolean default true
);


alter table "public"."active_nokhte_session_metadata" enable row level security;

alter table "public"."active_nokhte_sessions" drop column "is_a_valid_session";

CREATE UNIQUE INDEX active_nokhte_session_metadata_collaborator_uids_key ON public.active_nokhte_session_metadata USING btree (collaborator_uids);

CREATE UNIQUE INDEX active_nokhte_session_metadata_pkey ON public.active_nokhte_session_metadata USING btree (id);

alter table "public"."active_nokhte_session_metadata" add constraint "active_nokhte_session_metadata_pkey" PRIMARY KEY using index "active_nokhte_session_metadata_pkey";

alter table "public"."active_nokhte_session_metadata" add constraint "active_nokhte_session_metadata_collaborator_uids_key" UNIQUE using index "active_nokhte_session_metadata_collaborator_uids_key";

grant delete on table "public"."active_nokhte_session_metadata" to "anon";

grant insert on table "public"."active_nokhte_session_metadata" to "anon";

grant references on table "public"."active_nokhte_session_metadata" to "anon";

grant select on table "public"."active_nokhte_session_metadata" to "anon";

grant trigger on table "public"."active_nokhte_session_metadata" to "anon";

grant truncate on table "public"."active_nokhte_session_metadata" to "anon";

grant update on table "public"."active_nokhte_session_metadata" to "anon";

grant delete on table "public"."active_nokhte_session_metadata" to "authenticated";

grant insert on table "public"."active_nokhte_session_metadata" to "authenticated";

grant references on table "public"."active_nokhte_session_metadata" to "authenticated";

grant select on table "public"."active_nokhte_session_metadata" to "authenticated";

grant trigger on table "public"."active_nokhte_session_metadata" to "authenticated";

grant truncate on table "public"."active_nokhte_session_metadata" to "authenticated";

grant update on table "public"."active_nokhte_session_metadata" to "authenticated";

grant delete on table "public"."active_nokhte_session_metadata" to "service_role";

grant insert on table "public"."active_nokhte_session_metadata" to "service_role";

grant references on table "public"."active_nokhte_session_metadata" to "service_role";

grant select on table "public"."active_nokhte_session_metadata" to "service_role";

grant trigger on table "public"."active_nokhte_session_metadata" to "service_role";

grant truncate on table "public"."active_nokhte_session_metadata" to "service_role";

grant update on table "public"."active_nokhte_session_metadata" to "service_role";

create policy "SELECT: They can read their row"
on "public"."active_nokhte_session_metadata"
as permissive
for select
to authenticated
using ((auth.uid() = ANY (collaborator_uids)));


create policy "UPDATE: Can update a valid session"
on "public"."active_nokhte_sessions"
as permissive
for update
to authenticated
using ((EXISTS ( SELECT 1
   FROM active_nokhte_session_metadata active_nokhte_session_metadata_1
  WHERE ((active_nokhte_session_metadata_1.collaborator_uids = active_nokhte_session_metadata_1.collaborator_uids) AND (active_nokhte_session_metadata_1.is_a_valid_session = true)))))
with check (true);

alter
  publication supabase_realtime add table public.active_nokhte_session_metadata;

  alter table "public"."active_nokhte_session_metadata" add column "leader_uid" uuid not null;

alter table "public"."active_nokhte_session_metadata" alter column "is_a_valid_session" set not null;

CREATE UNIQUE INDEX active_nokhte_session_metadata_leader_uid_key ON public.active_nokhte_session_metadata USING btree (leader_uid);

alter table "public"."active_nokhte_session_metadata" add constraint "active_nokhte_session_metadata_leader_uid_key" UNIQUE using index "active_nokhte_session_metadata_leader_uid_key";

drop policy "SELECT: They can read their row" on "public"."active_nokhte_session_metadata";

drop policy "UPDATE: Can update a valid session" on "public"."active_nokhte_sessions";

revoke delete on table "public"."active_nokhte_session_metadata" from "anon";

revoke insert on table "public"."active_nokhte_session_metadata" from "anon";

revoke references on table "public"."active_nokhte_session_metadata" from "anon";

revoke select on table "public"."active_nokhte_session_metadata" from "anon";

revoke trigger on table "public"."active_nokhte_session_metadata" from "anon";

revoke truncate on table "public"."active_nokhte_session_metadata" from "anon";

revoke update on table "public"."active_nokhte_session_metadata" from "anon";

revoke delete on table "public"."active_nokhte_session_metadata" from "authenticated";

revoke insert on table "public"."active_nokhte_session_metadata" from "authenticated";

revoke references on table "public"."active_nokhte_session_metadata" from "authenticated";

revoke select on table "public"."active_nokhte_session_metadata" from "authenticated";

revoke trigger on table "public"."active_nokhte_session_metadata" from "authenticated";

revoke truncate on table "public"."active_nokhte_session_metadata" from "authenticated";

revoke update on table "public"."active_nokhte_session_metadata" from "authenticated";

revoke delete on table "public"."active_nokhte_session_metadata" from "service_role";

revoke insert on table "public"."active_nokhte_session_metadata" from "service_role";

revoke references on table "public"."active_nokhte_session_metadata" from "service_role";

revoke select on table "public"."active_nokhte_session_metadata" from "service_role";

revoke trigger on table "public"."active_nokhte_session_metadata" from "service_role";

revoke truncate on table "public"."active_nokhte_session_metadata" from "service_role";

revoke update on table "public"."active_nokhte_session_metadata" from "service_role";

alter table "public"."active_nokhte_session_metadata" drop constraint "active_nokhte_session_metadata_collaborator_uids_key";

alter table "public"."active_nokhte_session_metadata" drop constraint "active_nokhte_session_metadata_leader_uid_key";

alter table "public"."active_nokhte_session_metadata" drop constraint "active_nokhte_session_metadata_pkey";

drop index if exists "public"."active_nokhte_session_metadata_collaborator_uids_key";

drop index if exists "public"."active_nokhte_session_metadata_leader_uid_key";

drop index if exists "public"."active_nokhte_session_metadata_pkey";

drop table "public"."active_nokhte_session_metadata";

alter table "public"."active_nokhte_sessions" add column "is_a_valid_session" boolean not null default true;

create policy "UPDATE: Can update a valid session"
on "public"."active_nokhte_sessions"
as permissive
for update
to authenticated
using ((auth.uid() = ANY (collaborator_uids)))
with check (true);


revoke
update
  (is_a_valid_session) on table public.active_nokhte_sessions
from
  authenticated;
