drop policy "Enable insert for authenticated users only" on "public"."finished_collaborative_p2p_purpose_documents";

drop policy "Users can only read their past commited" on "public"."finished_collaborative_p2p_purpose_documents";

drop policy "Collaborators have proper read permissions" on "public"."solo_p2p_purpose_documents";

drop policy "Enable insert for authenticated users only" on "public"."solo_p2p_purpose_documents";

drop policy "Only Owners Can Update Row Information" on "public"."solo_p2p_purpose_documents";

drop policy "Users Can Read Their Own Documents" on "public"."solo_p2p_purpose_documents";

drop policy "Can Only Read Documents That They Are Co-Authors Of" on "public"."working_collaborative_p2p_purpose_documents";

drop policy "They Can Only Update Documents That They Are Co-Authors Of" on "public"."working_collaborative_p2p_purpose_documents";

alter table "public"."finished_collaborative_p2p_purpose_documents" drop constraint "finished_collaborative_p2p_purpose_documents_collaborator_one_u";

alter table "public"."finished_collaborative_p2p_purpose_documents" drop constraint "finished_collaborative_p2p_purpose_documents_collaborator_two_u";

alter table "public"."solo_p2p_purpose_documents" drop constraint "solo_p2p_purpose_documents_collaborator_uid_fkey";

alter table "public"."solo_p2p_purpose_documents" drop constraint "solo_p2p_purpose_documents_owner_uid_fkey";

alter table "public"."working_collaborative_p2p_purpose_documents" drop constraint "p2p_purpose_documents_id_key";

alter table "public"."working_collaborative_p2p_purpose_documents" drop constraint "working_collaborative_p2p_purpose_documents_collaborator_one_ui";

alter table "public"."working_collaborative_p2p_purpose_documents" drop constraint "working_collaborative_p2p_purpose_documents_collaborator_two_ui";

alter table "public"."finished_collaborative_p2p_purpose_documents" drop constraint "finished_collaborative_p2p_purpose_documents_pkey";

alter table "public"."solo_p2p_purpose_documents" drop constraint "solo_p2p_purpose_documents_pkey";

alter table "public"."working_collaborative_p2p_purpose_documents" drop constraint "p2p_purpose_documents_pkey";

drop index if exists "public"."finished_collaborative_p2p_purpose_documents_pkey";

drop index if exists "public"."p2p_purpose_documents_id_key";

drop index if exists "public"."p2p_purpose_documents_pkey";

drop index if exists "public"."solo_p2p_purpose_documents_pkey";

drop table "public"."finished_collaborative_p2p_purpose_documents";

drop table "public"."solo_p2p_purpose_documents";

drop table "public"."working_collaborative_p2p_purpose_documents";

create table "public"."finished_collaborative_documents" (
    "id" bigint generated by default as identity not null,
    "collaborator_one_uid" uuid not null,
    "collaborator_two_uid" uuid,
    "content" text,
    "created_at" timestamp with time zone not null default now(),
    "doc_type" text not null
);


alter table "public"."finished_collaborative_documents" enable row level security;

create table "public"."solo_sharable_documents" (
    "owner_uid" uuid not null,
    "collaborator_uid" uuid not null,
    "content" text not null default ''::text,
    "is_visible_to_collaborator" boolean not null default false,
    "session_is_completed" boolean not null default false,
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "doc_type" text
);


alter table "public"."solo_sharable_documents" enable row level security;

create table "public"."working_collaborative_documents" (
    "collaborator_one_uid" uuid not null,
    "collaborator_two_uid" uuid not null,
    "collaborator_one_delta" bigint not null default '-1'::integer,
    "collaborator_two_delta" bigint not null default '-1'::integer,
    "collaborator_one_is_active" boolean not null default false,
    "collaborator_two_is_active" boolean not null default false,
    "id" bigint generated by default as identity not null,
    "is_committed" boolean not null default false,
    "content" text not null default ''''''::text,
    "doc_type" text not null
);


alter table "public"."working_collaborative_documents" enable row level security;

CREATE UNIQUE INDEX finished_collaborative_p2p_purpose_documents_pkey ON public.finished_collaborative_documents USING btree (id);

CREATE UNIQUE INDEX p2p_purpose_documents_id_key ON public.working_collaborative_documents USING btree (id);

CREATE UNIQUE INDEX p2p_purpose_documents_pkey ON public.working_collaborative_documents USING btree (id);

CREATE UNIQUE INDEX solo_p2p_purpose_documents_pkey ON public.solo_sharable_documents USING btree (id);

alter table "public"."finished_collaborative_documents" add constraint "finished_collaborative_p2p_purpose_documents_pkey" PRIMARY KEY using index "finished_collaborative_p2p_purpose_documents_pkey";

alter table "public"."solo_sharable_documents" add constraint "solo_p2p_purpose_documents_pkey" PRIMARY KEY using index "solo_p2p_purpose_documents_pkey";

alter table "public"."working_collaborative_documents" add constraint "p2p_purpose_documents_pkey" PRIMARY KEY using index "p2p_purpose_documents_pkey";

alter table "public"."finished_collaborative_documents" add constraint "finished_collaborative_documents_collaborator_one_uid_fkey" FOREIGN KEY (collaborator_one_uid) REFERENCES auth.users(id) not valid;

alter table "public"."finished_collaborative_documents" validate constraint "finished_collaborative_documents_collaborator_one_uid_fkey";

alter table "public"."finished_collaborative_documents" add constraint "finished_collaborative_documents_collaborator_two_uid_fkey" FOREIGN KEY (collaborator_two_uid) REFERENCES auth.users(id) not valid;

alter table "public"."finished_collaborative_documents" validate constraint "finished_collaborative_documents_collaborator_two_uid_fkey";

alter table "public"."finished_collaborative_documents" add constraint "finished_collaborative_documents_doc_type_check" CHECK ((doc_type = ANY (ARRAY['purpose'::text, 'collective'::text, 'solo'::text]))) not valid;

alter table "public"."finished_collaborative_documents" validate constraint "finished_collaborative_documents_doc_type_check";

alter table "public"."solo_sharable_documents" add constraint "solo_sharable_documents_collaborator_uid_fkey" FOREIGN KEY (collaborator_uid) REFERENCES auth.users(id) not valid;

alter table "public"."solo_sharable_documents" validate constraint "solo_sharable_documents_collaborator_uid_fkey";

alter table "public"."solo_sharable_documents" add constraint "solo_sharable_documents_doc_type_check" CHECK ((doc_type = ANY (ARRAY['purpose'::text, 'collective'::text, 'solo'::text]))) not valid;

alter table "public"."solo_sharable_documents" validate constraint "solo_sharable_documents_doc_type_check";

alter table "public"."solo_sharable_documents" add constraint "solo_sharable_documents_owner_uid_fkey" FOREIGN KEY (owner_uid) REFERENCES auth.users(id) not valid;

alter table "public"."solo_sharable_documents" validate constraint "solo_sharable_documents_owner_uid_fkey";

alter table "public"."working_collaborative_documents" add constraint "p2p_purpose_documents_id_key" UNIQUE using index "p2p_purpose_documents_id_key";

alter table "public"."working_collaborative_documents" add constraint "working_collaborative_documents_collaborator_one_uid_fkey" FOREIGN KEY (collaborator_one_uid) REFERENCES auth.users(id) not valid;

alter table "public"."working_collaborative_documents" validate constraint "working_collaborative_documents_collaborator_one_uid_fkey";

alter table "public"."working_collaborative_documents" add constraint "working_collaborative_documents_collaborator_two_uid_fkey" FOREIGN KEY (collaborator_two_uid) REFERENCES auth.users(id) not valid;

alter table "public"."working_collaborative_documents" validate constraint "working_collaborative_documents_collaborator_two_uid_fkey";

alter table "public"."working_collaborative_documents" add constraint "working_collaborative_p2p_purpose_documents_doc_type_check" CHECK ((doc_type = ANY (ARRAY['purpose'::text, 'collective'::text, 'solo'::text]))) not valid;

alter table "public"."working_collaborative_documents" validate constraint "working_collaborative_p2p_purpose_documents_doc_type_check";

create policy "Enable insert for authenticated users only"
on "public"."finished_collaborative_documents"
as permissive
for insert
to authenticated
with check (true);


create policy "Users can only read their past commited"
on "public"."finished_collaborative_documents"
as permissive
for select
to authenticated
using (((auth.uid() = collaborator_one_uid) OR (auth.uid() = collaborator_two_uid)));


create policy "Collaborators have proper read permissions"
on "public"."solo_sharable_documents"
as permissive
for select
to authenticated
using (((auth.uid() = collaborator_uid) AND (is_visible_to_collaborator = true) AND (session_is_completed = false)));


create policy "Enable insert for authenticated users only"
on "public"."solo_sharable_documents"
as permissive
for insert
to authenticated
with check (true);


create policy "Only Owners Can Update Row Information"
on "public"."solo_sharable_documents"
as permissive
for update
to authenticated
using ((auth.uid() = owner_uid))
with check (true);


create policy "Users Can Read Their Own Documents"
on "public"."solo_sharable_documents"
as permissive
for select
to authenticated
using ((auth.uid() = owner_uid));


create policy "Can Only Read Documents That They Are Co-Authors Of"
on "public"."working_collaborative_documents"
as permissive
for select
to authenticated
using (((auth.uid() = collaborator_one_uid) OR (auth.uid() = collaborator_two_uid)));


create policy "They Can Only Update Documents That They Are Co-Authors Of"
on "public"."working_collaborative_documents"
as permissive
for update
to authenticated
using (((auth.uid() = collaborator_one_uid) OR (auth.uid() = collaborator_two_uid)));