set check_function_bodies = off;

CREATE OR REPLACE FUNCTION internal_functions.enforce_unique_collaborations()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
  IF new.collaborator_one = new.collaborator_two THEN
    raise exception 'You cannot have a collabortion with yourself';
  END IF;
  RETURN NEW;
END;$function$
;


drop trigger if exists "cant_have_same_sender_and_receiver_id_p2p_requests" on "public"."p2p_requests";

drop trigger if exists "cant_impersonate_requests" on "public"."p2p_requests";

drop trigger if exists "enforce_unique_p2p_requests" on "public"."p2p_requests";

drop trigger if exists "only_receiver_can_update_request" on "public"."p2p_requests";

drop trigger if exists "cant_have_same_sender_and_receiver_id_p2p_scheduling" on "public"."p2p_scheduling";

drop trigger if exists "cant_impersonate_schedule_creation" on "public"."p2p_scheduling";

drop trigger if exists "needs_to_have_accepted_request" on "public"."p2p_scheduling";

drop trigger if exists "new_scheduling_request_validator" on "public"."p2p_scheduling";

drop trigger if exists "p2p_scheduling_update_validation" on "public"."p2p_scheduling";

-- drop policy "CREATE: Only Authenticated Users Can Insert" on "public"."p2p_requests";

-- drop policy "READ: Can Only Read Requests They've Authored" on "public"."p2p_requests";

-- drop policy "READ: Can Only Read Requests They've Received" on "public"."p2p_requests";

-- drop policy "UPDATE: Receiver can only update the row" on "public"."p2p_requests";

drop policy "CREATE: Only Authenticated Users Can Insert" on "public"."p2p_scheduling";

drop policy "READ: Can Only Read What They Have Received" on "public"."p2p_scheduling";

drop policy "READ: Can Only Read What They have Authored" on "public"."p2p_scheduling";

drop policy "UPDATE: Only Authenticated Users Can Update" on "public"."p2p_scheduling";

alter table "public"."p2p_requests" drop constraint "p2p_requests_receiver_id_fkey";

alter table "public"."p2p_requests" drop constraint "p2p_requests_sender_id_fkey";

alter table "public"."p2p_scheduling" drop constraint "p2p_scheduling_initial_time_ranges_check";

alter table "public"."p2p_scheduling" drop constraint "p2p_scheduling_receiver_id_fkey";

alter table "public"."p2p_scheduling" drop constraint "p2p_scheduling_sender_id_fkey";

alter table "public"."p2p_requests" drop constraint "p2p_requests_pkey";

alter table "public"."p2p_scheduling" drop constraint "p2p_scheduling_pkey";

drop index if exists "public"."p2p_requests_pkey";

drop index if exists "public"."p2p_scheduling_pkey";

drop table "public"."p2p_requests";

drop table "public"."p2p_scheduling";

create table "public"."existing_collaborations" (
    "id" bigint generated by default as identity not null,
    "collaborator_one" uuid not null,
    "collaborator_two" uuid not null
);


alter table "public"."existing_collaborations" enable row level security;

create table "public"."p2p_collaborator_pool" (
    "id" bigint generated by default as identity not null,
    "wayfarer_uid" uuid not null,
    "wayfarer_adjective_id" bigint not null,
    "wayfarer_noun_id" bigint not null,
    "query_adjective_id" bigint not null,
    "query_noun_id" bigint not null,
    "entered_at" timestamp without time zone not null default now(),
    "matched_uid" uuid,
    "matched_adjective_id" bigint,
    "matched_noun_id" bigint,
    "expires_at" timestamp without time zone not null default (now() + '00:01:00'::interval)
);


alter table "public"."p2p_collaborator_pool" enable row level security;

CREATE UNIQUE INDEX existing_collaborations_pkey ON public.existing_collaborations USING btree (id);

CREATE UNIQUE INDEX p2p_collaborator_pool_pkey ON public.p2p_collaborator_pool USING btree (id);

alter table "public"."existing_collaborations" add constraint "existing_collaborations_pkey" PRIMARY KEY using index "existing_collaborations_pkey";

alter table "public"."p2p_collaborator_pool" add constraint "p2p_collaborator_pool_pkey" PRIMARY KEY using index "p2p_collaborator_pool_pkey";

CREATE TRIGGER enforce_unique_collaborations BEFORE INSERT ON public.existing_collaborations FOR EACH ROW EXECUTE FUNCTION internal_functions.enforce_unique_collaborations();