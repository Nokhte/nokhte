create table "public"."working_collaborative_scheduling" (
    "id" bigint generated by default as identity not null,
    "collaborator_one_uid" uuid not null,
    "collaborator_two_uid" uuid not null,
    "last_edited_by" uuid,
    "collaborator_one_chosen_day" date,
    "collaborator_two_chosen_day" date,
    "day_is_agreed_upon" boolean not null default false,
    "collaborator_one_chosen_time" timestamp with time zone,
    "collaborator_two_chosen_time" timestamp with time zone,
    "time_is_agreed_upon" boolean not null default false
);


alter table "public"."working_collaborative_scheduling" enable row level security;

CREATE UNIQUE INDEX working_collaborative_scheduling_pkey ON public.working_collaborative_scheduling USING btree (id);

alter table "public"."working_collaborative_scheduling" add constraint "working_collaborative_scheduling_pkey" PRIMARY KEY using index "working_collaborative_scheduling_pkey";

alter table "public"."working_collaborative_scheduling" add constraint "working_collaborative_scheduling_collaborator_one_uid_fkey" FOREIGN KEY (collaborator_one_uid) REFERENCES auth.users(id) not valid;

alter table "public"."working_collaborative_scheduling" validate constraint "working_collaborative_scheduling_collaborator_one_uid_fkey";

alter table "public"."working_collaborative_scheduling" add constraint "working_collaborative_scheduling_collaborator_two_uid_fkey" FOREIGN KEY (collaborator_two_uid) REFERENCES auth.users(id) not valid;

alter table "public"."working_collaborative_scheduling" validate constraint "working_collaborative_scheduling_collaborator_two_uid_fkey";

alter table "public"."working_collaborative_scheduling" add constraint "working_collaborative_scheduling_last_edited_by_fkey" FOREIGN KEY (last_edited_by) REFERENCES auth.users(id) not valid;

alter table "public"."working_collaborative_scheduling" validate constraint "working_collaborative_scheduling_last_edited_by_fkey";

alter
  publication supabase_realtime add table public.working_collaborative_scheduling;

create policy "Can Only Read Documents That They Are Co-Authors Of"
on "public"."working_collaborative_scheduling"
as permissive
for select
to authenticated
using (((auth.uid() = collaborator_one_uid) OR (auth.uid() = collaborator_two_uid)));


create policy "Enable insert for authenticated users only"
on "public"."working_collaborative_scheduling"
as permissive
for insert
to authenticated
with check (true);


create policy "They Can Only Update Documents That They Are Co-Authors Of"
on "public"."working_collaborative_scheduling"
as permissive
for update
to public
using (((auth.uid() = collaborator_one_uid) OR (auth.uid() = collaborator_two_uid)));

alter table "public"."working_collaborative_scheduling" add column "session_being_scheduled" text not null;

alter table "public"."working_collaborative_scheduling" add constraint "working_collaborative_scheduling_session_being_scheduled_check" CHECK ((session_being_scheduled = ANY (ARRAY['collective'::text, 'solo'::text]))) not valid;

alter table "public"."working_collaborative_scheduling" validate constraint "working_collaborative_scheduling_session_being_scheduled_check";