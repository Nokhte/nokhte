// Mocks generated by Mockito 5.4.4 from annotations
// in nokhte/test/app/core/modules/connectivity/mocks/connectivity_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i2;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nokhte/app/core/interfaces/logic.dart' as _i6;
import 'package:nokhte/app/core/modules/connectivity/logic/get_on_connectivity_changed.dart'
    as _i7;
import 'package:nokhte/app/core/modules/connectivity/sources/connectivity_remote_source.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConnectivity_0 extends _i1.SmartFake implements _i2.Connectivity {
  _FakeConnectivity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectivityRemoteSourceImpl_1 extends _i1.SmartFake
    implements _i3.ConnectivityRemoteSourceImpl {
  _FakeConnectivityRemoteSourceImpl_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i2.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i5.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i4.Stream<_i5.ConnectivityResult>.empty(),
      ) as _i4.Stream<_i5.ConnectivityResult>);

  @override
  _i4.Future<_i5.ConnectivityResult> checkConnectivity() => (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i4.Future<_i5.ConnectivityResult>.value(
            _i5.ConnectivityResult.bluetooth),
      ) as _i4.Future<_i5.ConnectivityResult>);
}

/// A class which mocks [ConnectivityRemoteSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityRemoteSourceImpl extends _i1.Mock
    implements _i3.ConnectivityRemoteSourceImpl {
  MockConnectivityRemoteSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Connectivity get connectivity => (super.noSuchMethod(
        Invocation.getter(#connectivity),
        returnValue: _FakeConnectivity_0(
          this,
          Invocation.getter(#connectivity),
        ),
      ) as _i2.Connectivity);

  @override
  _i4.Stream<_i5.ConnectivityResult> getOnConnectivityChanged(
          _i6.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOnConnectivityChanged,
          [params],
        ),
        returnValue: _i4.Stream<_i5.ConnectivityResult>.empty(),
      ) as _i4.Stream<_i5.ConnectivityResult>);
}

/// A class which mocks [GetOnConnectivityChanged].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetOnConnectivityChanged extends _i1.Mock
    implements _i7.GetOnConnectivityChanged {
  MockGetOnConnectivityChanged() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ConnectivityRemoteSourceImpl get remoteSource => (super.noSuchMethod(
        Invocation.getter(#remoteSource),
        returnValue: _FakeConnectivityRemoteSourceImpl_1(
          this,
          Invocation.getter(#remoteSource),
        ),
      ) as _i3.ConnectivityRemoteSourceImpl);

  @override
  _i4.Stream<_i5.ConnectivityResult> call(_i6.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Stream<_i5.ConnectivityResult>.empty(),
      ) as _i4.Stream<_i5.ConnectivityResult>);
}
