// Mocks generated by Mockito 5.4.2 from annotations
// in nokhte/test/app/core/modules/gyroscopic/fixtures/gyroscopic_mock_gen.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nokhte/app/core/error/failure.dart' as _i6;
import 'package:nokhte/app/core/interfaces/logic.dart' as _i7;
import 'package:nokhte/app/core/modules/gyroscopic/domain/domain.dart' as _i3;

import 'gyroscopic_mock_gen.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReferenceAngleSetterStatusEntity_1 extends _i1.SmartFake
    implements _i3.ReferenceAngleSetterStatusEntity {
  _FakeReferenceAngleSetterStatusEntity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MGyroscopicContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGyroscopicContract extends _i1.Mock
    implements _i4.MGyroscopicContract {
  MockMGyroscopicContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<
      _i2.Either<_i6.Failure, _i3.DirectionAngleEntity>> getDirectionAngle(
          _i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDirectionAngle,
          [params],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i3.DirectionAngleEntity>>.value(
                _FakeEither_0<_i6.Failure, _i3.DirectionAngleEntity>(
          this,
          Invocation.method(
            #getDirectionAngle,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.DirectionAngleEntity>>);

  @override
  _i3.ReferenceAngleSetterStatusEntity setReferenceAngle(
          int? newReferenceAngle) =>
      (super.noSuchMethod(
        Invocation.method(
          #setReferenceAngle,
          [newReferenceAngle],
        ),
        returnValue: _FakeReferenceAngleSetterStatusEntity_1(
          this,
          Invocation.method(
            #setReferenceAngle,
            [newReferenceAngle],
          ),
        ),
      ) as _i3.ReferenceAngleSetterStatusEntity);

  @override
  _i3.ReferenceAngleSetterStatusEntity resetRefAngleForMaxCapacity(
          _i3.ResetRefAngleForMaxCapacityParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetRefAngleForMaxCapacity,
          [params],
        ),
        returnValue: _FakeReferenceAngleSetterStatusEntity_1(
          this,
          Invocation.method(
            #resetRefAngleForMaxCapacity,
            [params],
          ),
        ),
      ) as _i3.ReferenceAngleSetterStatusEntity);
}

/// A class which mocks [MGyroscopicRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGyroscopicRemoteSource extends _i1.Mock
    implements _i4.MGyroscopicRemoteSource {
  MockMGyroscopicRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<int> getDirectionAngle() => (super.noSuchMethod(
        Invocation.method(
          #getDirectionAngle,
          [],
        ),
        returnValue: _i5.Stream<int>.empty(),
      ) as _i5.Stream<int>);

  @override
  void setReferenceAngle(int? newReferenceAngle) => super.noSuchMethod(
        Invocation.method(
          #setReferenceAngle,
          [newReferenceAngle],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetRefAngleForMaxCapacity({
    required int? maxAngle,
    required int? currentValue,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #resetRefAngleForMaxCapacity,
          [],
          {
            #maxAngle: maxAngle,
            #currentValue: currentValue,
          },
        ),
        returnValueForMissingStub: null,
      );
}
