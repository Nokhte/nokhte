// Mocks generated by Mockito 5.4.1 from annotations
// in primala/test/app/core/guards/auth_guard_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_modular/flutter_modular.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:modular_core/modular_core.dart' as _i4;

import 'auth_guard_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeModularRoute_0 extends _i1.SmartFake implements _i2.ModularRoute {
  _FakeModularRoute_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MModule].
///
/// See the documentation for Mockito's code generation for more information.
class MockMModule extends _i1.Mock implements _i3.MModule {
  MockMModule() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Module> get imports => (super.noSuchMethod(
        Invocation.getter(#imports),
        returnValue: <_i2.Module>[],
      ) as List<_i2.Module>);
  @override
  List<_i2.Bind<Object>> get binds => (super.noSuchMethod(
        Invocation.getter(#binds),
        returnValue: <_i2.Bind<Object>>[],
      ) as List<_i2.Bind<Object>>);
  @override
  List<_i2.ModularRoute> get routes => (super.noSuchMethod(
        Invocation.getter(#routes),
        returnValue: <_i2.ModularRoute>[],
      ) as List<_i2.ModularRoute>);
  @override
  List<_i4.RouteContext> get modules => (super.noSuchMethod(
        Invocation.getter(#modules),
        returnValue: <_i4.RouteContext>[],
      ) as List<_i4.RouteContext>);
  @override
  Set<String> get tags => (super.noSuchMethod(
        Invocation.getter(#tags),
        returnValue: <String>{},
      ) as Set<String>);
  @override
  List<_i4.BindEntry<Object>> get instanciatedSingletons => (super.noSuchMethod(
        Invocation.getter(#instanciatedSingletons),
        returnValue: <_i4.BindEntry<Object>>[],
      ) as List<_i4.BindEntry<Object>>);
  @override
  _i2.ModularRoute copy(
    _i2.ModularRoute? parent,
    _i2.ModularRoute? route,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #copy,
          [
            parent,
            route,
          ],
        ),
        returnValue: _FakeModularRoute_0(
          this,
          Invocation.method(
            #copy,
            [
              parent,
              route,
            ],
          ),
        ),
      ) as _i2.ModularRoute);
  @override
  List<_i4.ModularKey> orderRouteKeys(Iterable<_i4.ModularKey>? keys) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderRouteKeys,
          [keys],
        ),
        returnValue: <_i4.ModularKey>[],
      ) as List<_i4.ModularKey>);
  @override
  Map<_i4.ModularKey, _i2.ModularRoute> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: <_i4.ModularKey, _i2.ModularRoute>{},
      ) as Map<_i4.ModularKey, _i2.ModularRoute>);
  @override
  Map<_i4.ModularKey, _i2.ModularRoute> assembleRoute(
          _i2.ModularRoute? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #assembleRoute,
          [route],
        ),
        returnValue: <_i4.ModularKey, _i2.ModularRoute>{},
      ) as Map<_i4.ModularKey, _i2.ModularRoute>);
  @override
  Map<_i4.ModularKey, _i2.ModularRoute> addModule(_i2.ModularRoute? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #addModule,
          [route],
        ),
        returnValue: <_i4.ModularKey, _i2.ModularRoute>{},
      ) as Map<_i4.ModularKey, _i2.ModularRoute>);
  @override
  Map<_i4.ModularKey, _i2.ModularRoute> addChildren(_i2.ModularRoute? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #addChildren,
          [route],
        ),
        returnValue: <_i4.ModularKey, _i2.ModularRoute>{},
      ) as Map<_i4.ModularKey, _i2.ModularRoute>);
  @override
  List<_i4.BindContract<Object>> getProcessBinds() => (super.noSuchMethod(
        Invocation.method(
          #getProcessBinds,
          [],
        ),
        returnValue: <_i4.BindContract<Object>>[],
      ) as List<_i4.BindContract<Object>>);
  @override
  void changeBinds(List<_i4.BindContract<Object>>? newBinds) =>
      super.noSuchMethod(
        Invocation.method(
          #changeBinds,
          [newBinds],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.BindEntry<T>? getBind<T extends Object>(
          _i4.Injector<dynamic>? injector) =>
      (super.noSuchMethod(Invocation.method(
        #getBind,
        [injector],
      )) as _i4.BindEntry<T>?);
  @override
  bool remove<T>() => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  bool removeScopedBind() => (super.noSuchMethod(
        Invocation.method(
          #removeScopedBind,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> isReady() => (super.noSuchMethod(
        Invocation.method(
          #isReady,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void instantiateSingletonBinds(
    List<_i4.BindEntry<Object>>? singletons,
    _i4.Injector<dynamic>? injector,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #instantiateSingletonBinds,
          [
            singletons,
            injector,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
