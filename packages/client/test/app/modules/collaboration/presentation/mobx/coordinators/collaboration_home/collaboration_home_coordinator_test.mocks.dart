// Mocks generated by Mockito 5.4.4 from annotations
// in nokhte/test/app/modules/collaboration/presentation/mobx/coordinators/collaboration_home/collaboration_home_coordinator_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i12;
import 'package:mobx/mobx.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:nokhte/app/core/error/failure.dart' as _i11;
import 'package:nokhte/app/core/mobx/mobx.dart' as _i9;
import 'package:nokhte/app/core/modules/user_information/domain/domain.dart'
    as _i5;
import 'package:nokhte/app/core/modules/user_information/mobx/mobx.dart' as _i4;
import 'package:nokhte/app/core/widgets/widgets.dart' as _i2;
import 'package:nokhte/app/modules/collaboration/domain/domain.dart' as _i6;
import 'package:nokhte/app/modules/collaboration/presentation/mobx/coordinators/collaboration_home/collaboration_home_screen_widgets_coordinator.dart'
    as _i8;
import 'package:nokhte/app/modules/collaboration/presentation/mobx/coordinators/logic/collaboration_logic_coordinator.dart'
    as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBeachWavesStore_0 extends _i1.SmartFake
    implements _i2.BeachWavesStore {
  _FakeBeachWavesStore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGradientTreeNodeStore_1 extends _i1.SmartFake
    implements _i2.GradientTreeNodeStore {
  _FakeGradientTreeNodeStore_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSmartTextStore_2 extends _i1.SmartFake
    implements _i2.SmartTextStore {
  _FakeSmartTextStore_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWifiDisconnectOverlayStore_3 extends _i1.SmartFake
    implements _i2.WifiDisconnectOverlayStore {
  _FakeWifiDisconnectOverlayStore_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGestureCrossStore_4 extends _i1.SmartFake
    implements _i2.GestureCrossStore {
  _FakeGestureCrossStore_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_5 extends _i1.SmartFake
    implements _i3.ReactiveContext {
  _FakeReactiveContext_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetUserInfoStore_6 extends _i1.SmartFake
    implements _i4.GetUserInfoStore {
  _FakeGetUserInfoStore_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateHasGoneThroughInvitationFlow_7 extends _i1.SmartFake
    implements _i5.UpdateHasGoneThroughInvitationFlow {
  _FakeUpdateHasGoneThroughInvitationFlow_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateHasSentAnInvitation_8 extends _i1.SmartFake
    implements _i5.UpdateHasSentAnInvitation {
  _FakeUpdateHasSentAnInvitation_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateWantsToRepeatInvitationFlow_9 extends _i1.SmartFake
    implements _i5.UpdateWantsToRepeatInvitationFlow {
  _FakeUpdateWantsToRepeatInvitationFlow_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCancelCollaboratorSearchStream_10 extends _i1.SmartFake
    implements _i6.CancelCollaboratorSearchStream {
  _FakeCancelCollaboratorSearchStream_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEnterCollaboratorPool_11 extends _i1.SmartFake
    implements _i6.EnterCollaboratorPool {
  _FakeEnterCollaboratorPool_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExitCollaboratorPool_12 extends _i1.SmartFake
    implements _i6.ExitCollaboratorPool {
  _FakeExitCollaboratorPool_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetCollaboratorSearchStatus_13 extends _i1.SmartFake
    implements _i6.GetCollaboratorSearchStatus {
  _FakeGetCollaboratorSearchStatus_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObservableStream_14<T> extends _i1.SmartFake
    implements _i3.ObservableStream<T> {
  _FakeObservableStream_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_15<T> extends _i1.SmartFake
    implements _i7.StreamSubscription<T> {
  _FakeStreamSubscription_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CollaborationHomeScreenWidgetsCoordinator].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollaborationHomeScreenWidgetsCoordinator extends _i1.Mock
    implements _i8.CollaborationHomeScreenWidgetsCoordinator {
  @override
  _i2.BeachWavesStore get beachWaves => (super.noSuchMethod(
        Invocation.getter(#beachWaves),
        returnValue: _FakeBeachWavesStore_0(
          this,
          Invocation.getter(#beachWaves),
        ),
        returnValueForMissingStub: _FakeBeachWavesStore_0(
          this,
          Invocation.getter(#beachWaves),
        ),
      ) as _i2.BeachWavesStore);

  @override
  _i2.GradientTreeNodeStore get gradientTreeNode => (super.noSuchMethod(
        Invocation.getter(#gradientTreeNode),
        returnValue: _FakeGradientTreeNodeStore_1(
          this,
          Invocation.getter(#gradientTreeNode),
        ),
        returnValueForMissingStub: _FakeGradientTreeNodeStore_1(
          this,
          Invocation.getter(#gradientTreeNode),
        ),
      ) as _i2.GradientTreeNodeStore);

  @override
  _i2.SmartTextStore get smartText => (super.noSuchMethod(
        Invocation.getter(#smartText),
        returnValue: _FakeSmartTextStore_2(
          this,
          Invocation.getter(#smartText),
        ),
        returnValueForMissingStub: _FakeSmartTextStore_2(
          this,
          Invocation.getter(#smartText),
        ),
      ) as _i2.SmartTextStore);

  @override
  _i2.WifiDisconnectOverlayStore get wifiDisconnectOverlay =>
      (super.noSuchMethod(
        Invocation.getter(#wifiDisconnectOverlay),
        returnValue: _FakeWifiDisconnectOverlayStore_3(
          this,
          Invocation.getter(#wifiDisconnectOverlay),
        ),
        returnValueForMissingStub: _FakeWifiDisconnectOverlayStore_3(
          this,
          Invocation.getter(#wifiDisconnectOverlay),
        ),
      ) as _i2.WifiDisconnectOverlayStore);

  @override
  _i2.GestureCrossStore get gestureCross => (super.noSuchMethod(
        Invocation.getter(#gestureCross),
        returnValue: _FakeGestureCrossStore_4(
          this,
          Invocation.getter(#gestureCross),
        ),
        returnValueForMissingStub: _FakeGestureCrossStore_4(
          this,
          Invocation.getter(#gestureCross),
        ),
      ) as _i2.GestureCrossStore);

  @override
  bool get invitationIsSent => (super.noSuchMethod(
        Invocation.getter(#invitationIsSent),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set invitationIsSent(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #invitationIsSent,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isDisconnected => (super.noSuchMethod(
        Invocation.getter(#isDisconnected),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isDisconnected(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isDisconnected,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get shouldEnterCollaboratorPool => (super.noSuchMethod(
        Invocation.getter(#shouldEnterCollaboratorPool),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set shouldEnterCollaboratorPool(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #shouldEnterCollaboratorPool,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i3.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_5(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_5(
          this,
          Invocation.getter(#context),
        ),
      ) as _i3.ReactiveContext);

  @override
  dynamic initReactors(
    Function? onGradientTreeNodeTap,
    Function? onFlowCompleted,
    Function? enterCollaboratorPool,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #initReactors,
          [
            onGradientTreeNodeTap,
            onFlowCompleted,
            enterCollaboratorPool,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic smartTextReactor(Function? onFlowCompleted) => super.noSuchMethod(
        Invocation.method(
          #smartTextReactor,
          [onFlowCompleted],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic gradientTreeNodeTapReactor(Function? onGradientTreeNodeTap) =>
      super.noSuchMethod(
        Invocation.method(
          #gradientTreeNodeTapReactor,
          [onGradientTreeNodeTap],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic gradientTreeNodeOpacityReactor(Function? enterCollaboratorPool) =>
      super.noSuchMethod(
        Invocation.method(
          #gradientTreeNodeOpacityReactor,
          [enterCollaboratorPool],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UserInformationCoordinator].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInformationCoordinator extends _i1.Mock
    implements _i4.UserInformationCoordinator {
  @override
  _i4.GetUserInfoStore get getUserInfoStore => (super.noSuchMethod(
        Invocation.getter(#getUserInfoStore),
        returnValue: _FakeGetUserInfoStore_6(
          this,
          Invocation.getter(#getUserInfoStore),
        ),
        returnValueForMissingStub: _FakeGetUserInfoStore_6(
          this,
          Invocation.getter(#getUserInfoStore),
        ),
      ) as _i4.GetUserInfoStore);

  @override
  _i5.UpdateHasGoneThroughInvitationFlow
      get updateHasGoneThroughInvitationFlowLogic => (super.noSuchMethod(
            Invocation.getter(#updateHasGoneThroughInvitationFlowLogic),
            returnValue: _FakeUpdateHasGoneThroughInvitationFlow_7(
              this,
              Invocation.getter(#updateHasGoneThroughInvitationFlowLogic),
            ),
            returnValueForMissingStub:
                _FakeUpdateHasGoneThroughInvitationFlow_7(
              this,
              Invocation.getter(#updateHasGoneThroughInvitationFlowLogic),
            ),
          ) as _i5.UpdateHasGoneThroughInvitationFlow);

  @override
  _i5.UpdateHasSentAnInvitation get updateHasSentAnInvitationLogic =>
      (super.noSuchMethod(
        Invocation.getter(#updateHasSentAnInvitationLogic),
        returnValue: _FakeUpdateHasSentAnInvitation_8(
          this,
          Invocation.getter(#updateHasSentAnInvitationLogic),
        ),
        returnValueForMissingStub: _FakeUpdateHasSentAnInvitation_8(
          this,
          Invocation.getter(#updateHasSentAnInvitationLogic),
        ),
      ) as _i5.UpdateHasSentAnInvitation);

  @override
  _i5.UpdateWantsToRepeatInvitationFlow
      get updateWantsToRepeatInvitationFlowLogic => (super.noSuchMethod(
            Invocation.getter(#updateWantsToRepeatInvitationFlowLogic),
            returnValue: _FakeUpdateWantsToRepeatInvitationFlow_9(
              this,
              Invocation.getter(#updateWantsToRepeatInvitationFlowLogic),
            ),
            returnValueForMissingStub: _FakeUpdateWantsToRepeatInvitationFlow_9(
              this,
              Invocation.getter(#updateWantsToRepeatInvitationFlowLogic),
            ),
          ) as _i5.UpdateWantsToRepeatInvitationFlow);

  @override
  bool get invitationFlowCompletionStatusIsUpdated => (super.noSuchMethod(
        Invocation.getter(#invitationFlowCompletionStatusIsUpdated),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set invitationFlowCompletionStatusIsUpdated(bool? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #invitationFlowCompletionStatusIsUpdated,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get invitationSendStatusIsUpdated => (super.noSuchMethod(
        Invocation.getter(#invitationSendStatusIsUpdated),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set invitationSendStatusIsUpdated(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #invitationSendStatusIsUpdated,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get invitationRepeatStatusIsUpdated => (super.noSuchMethod(
        Invocation.getter(#invitationRepeatStatusIsUpdated),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set invitationRepeatStatusIsUpdated(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #invitationRepeatStatusIsUpdated,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i9.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i9.StoreState.initial,
        returnValueForMissingStub: _i9.StoreState.initial,
      ) as _i9.StoreState);

  @override
  set state(_i9.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_5(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_5(
          this,
          Invocation.getter(#context),
        ),
      ) as _i3.ReactiveContext);

  @override
  _i7.Future<dynamic> updateHasGoneThroughInvitationFlow(bool? newStatus) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHasGoneThroughInvitationFlow,
          [newStatus],
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<dynamic> updateHasSentAnInvitation(bool? newStatus) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHasSentAnInvitation,
          [newStatus],
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<dynamic> updateWantsToRepeatInvitationFlow(bool? newStatus) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateWantsToRepeatInvitationFlow,
          [newStatus],
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  String mapFailureToMessage(_i11.Failure? failure) => (super.noSuchMethod(
        Invocation.method(
          #mapFailureToMessage,
          [failure],
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
      ) as String);

  @override
  dynamic errorUpdater(_i11.Failure? failure) => super.noSuchMethod(
        Invocation.method(
          #errorUpdater,
          [failure],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stateOrErrorUpdater(_i12.Either<_i11.Failure, dynamic>? result) =>
      super.noSuchMethod(
        Invocation.method(
          #stateOrErrorUpdater,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> call(dynamic params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [CollaborationLogicCoordinator].
///
/// See the documentation for Mockito's code generation for more information.
class MockCollaborationLogicCoordinator extends _i1.Mock
    implements _i13.CollaborationLogicCoordinator {
  @override
  _i6.CancelCollaboratorSearchStream get cancelCollaboratorSearchStreamLogic =>
      (super.noSuchMethod(
        Invocation.getter(#cancelCollaboratorSearchStreamLogic),
        returnValue: _FakeCancelCollaboratorSearchStream_10(
          this,
          Invocation.getter(#cancelCollaboratorSearchStreamLogic),
        ),
        returnValueForMissingStub: _FakeCancelCollaboratorSearchStream_10(
          this,
          Invocation.getter(#cancelCollaboratorSearchStreamLogic),
        ),
      ) as _i6.CancelCollaboratorSearchStream);

  @override
  _i6.EnterCollaboratorPool get enterCollaboratorPoolLogic =>
      (super.noSuchMethod(
        Invocation.getter(#enterCollaboratorPoolLogic),
        returnValue: _FakeEnterCollaboratorPool_11(
          this,
          Invocation.getter(#enterCollaboratorPoolLogic),
        ),
        returnValueForMissingStub: _FakeEnterCollaboratorPool_11(
          this,
          Invocation.getter(#enterCollaboratorPoolLogic),
        ),
      ) as _i6.EnterCollaboratorPool);

  @override
  _i6.ExitCollaboratorPool get exitCollaboratorPoolLogic => (super.noSuchMethod(
        Invocation.getter(#exitCollaboratorPoolLogic),
        returnValue: _FakeExitCollaboratorPool_12(
          this,
          Invocation.getter(#exitCollaboratorPoolLogic),
        ),
        returnValueForMissingStub: _FakeExitCollaboratorPool_12(
          this,
          Invocation.getter(#exitCollaboratorPoolLogic),
        ),
      ) as _i6.ExitCollaboratorPool);

  @override
  _i6.GetCollaboratorSearchStatus get getCollaboratorSearchStatusLogic =>
      (super.noSuchMethod(
        Invocation.getter(#getCollaboratorSearchStatusLogic),
        returnValue: _FakeGetCollaboratorSearchStatus_13(
          this,
          Invocation.getter(#getCollaboratorSearchStatusLogic),
        ),
        returnValueForMissingStub: _FakeGetCollaboratorSearchStatus_13(
          this,
          Invocation.getter(#getCollaboratorSearchStatusLogic),
        ),
      ) as _i6.GetCollaboratorSearchStatus);

  @override
  bool get searchStatusIsListening => (super.noSuchMethod(
        Invocation.getter(#searchStatusIsListening),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set searchStatusIsListening(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #searchStatusIsListening,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasEntered => (super.noSuchMethod(
        Invocation.getter(#hasEntered),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasEntered(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasEntered,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ObservableStream<bool> get searchStatus => (super.noSuchMethod(
        Invocation.getter(#searchStatus),
        returnValue: _FakeObservableStream_14<bool>(
          this,
          Invocation.getter(#searchStatus),
        ),
        returnValueForMissingStub: _FakeObservableStream_14<bool>(
          this,
          Invocation.getter(#searchStatus),
        ),
      ) as _i3.ObservableStream<bool>);

  @override
  set searchStatus(_i3.ObservableStream<bool>? value) => super.noSuchMethod(
        Invocation.setter(
          #searchStatus,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasFoundCollaborator => (super.noSuchMethod(
        Invocation.getter(#hasFoundCollaborator),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasFoundCollaborator(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasFoundCollaborator,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.StreamSubscription<dynamic> get searchSubscription => (super.noSuchMethod(
        Invocation.getter(#searchSubscription),
        returnValue: _FakeStreamSubscription_15<dynamic>(
          this,
          Invocation.getter(#searchSubscription),
        ),
        returnValueForMissingStub: _FakeStreamSubscription_15<dynamic>(
          this,
          Invocation.getter(#searchSubscription),
        ),
      ) as _i7.StreamSubscription<dynamic>);

  @override
  set searchSubscription(
          _i7.StreamSubscription<dynamic>? _searchSubscription) =>
      super.noSuchMethod(
        Invocation.setter(
          #searchSubscription,
          _searchSubscription,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i9.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i9.StoreState.initial,
        returnValueForMissingStub: _i9.StoreState.initial,
      ) as _i9.StoreState);

  @override
  set state(_i9.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_5(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_5(
          this,
          Invocation.getter(#context),
        ),
      ) as _i3.ReactiveContext);

  @override
  _i7.Future<dynamic> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<dynamic> listen() => (super.noSuchMethod(
        Invocation.method(
          #listen,
          [],
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<dynamic> enter(String? collaboratorUID) => (super.noSuchMethod(
        Invocation.method(
          #enter,
          [collaboratorUID],
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<dynamic> exit() => (super.noSuchMethod(
        Invocation.method(
          #exit,
          [],
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  String mapFailureToMessage(_i11.Failure? failure) => (super.noSuchMethod(
        Invocation.method(
          #mapFailureToMessage,
          [failure],
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
      ) as String);

  @override
  dynamic errorUpdater(_i11.Failure? failure) => super.noSuchMethod(
        Invocation.method(
          #errorUpdater,
          [failure],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stateOrErrorUpdater(_i12.Either<_i11.Failure, dynamic>? result) =>
      super.noSuchMethod(
        Invocation.method(
          #stateOrErrorUpdater,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> call(dynamic params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
