// Mocks generated by Mockito 5.4.2 from annotations
// in nokhte/test/app/modules/p2p_collaborator_pool/fixtures/p2p_collaborator_pool_stack_mock_gen.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:dartz/dartz.dart' as _i6;
import 'package:mobx/mobx.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nokhte/app/core/error/failure.dart' as _i11;
import 'package:nokhte/app/core/interfaces/logic.dart' as _i12;
import 'package:nokhte/app/modules/p2p_collaborator_pool/data/data.dart'
    as _i13;
import 'package:nokhte/app/modules/p2p_collaborator_pool/domain/domain.dart'
    as _i5;
import 'package:nokhte_backend/edge_functions/edge_functions.dart' as _i4;
import 'package:nokhte_backend/tables/existing_collaborations.dart' as _i3;
import 'package:nokhte_backend/tables/phrase_components.dart' as _i10;
import 'package:supabase_flutter/supabase_flutter.dart' as _i2;

import 'p2p_collaborator_pool_stack_mock_gen.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSupabaseClient_0 extends _i1.SmartFake
    implements _i2.SupabaseClient {
  _FakeSupabaseClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExistingCollaborationsStream_1 extends _i1.SmartFake
    implements _i3.ExistingCollaborationsStream {
  _FakeExistingCollaborationsStream_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInitiateCollaboratorSearch_2 extends _i1.SmartFake
    implements _i4.InitiateCollaboratorSearch {
  _FakeInitiateCollaboratorSearch_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEndCollaboratorSearch_3 extends _i1.SmartFake
    implements _i4.EndCollaboratorSearch {
  _FakeEndCollaboratorSearch_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFunctionResponse_4 extends _i1.SmartFake
    implements _i2.FunctionResponse {
  _FakeFunctionResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeP2PCollaboratorPoolContract_5 extends _i1.SmartFake
    implements _i5.P2PCollaboratorPoolContract {
  _FakeP2PCollaboratorPoolContract_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_6<L, R> extends _i1.SmartFake implements _i6.Either<L, R> {
  _FakeEither_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCancelCollaboratorStream_7 extends _i1.SmartFake
    implements _i5.CancelCollaboratorStream {
  _FakeCancelCollaboratorStream_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_8 extends _i1.SmartFake
    implements _i7.ReactiveContext {
  _FakeReactiveContext_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEnterCollaboratorPool_9 extends _i1.SmartFake
    implements _i5.EnterCollaboratorPool {
  _FakeEnterCollaboratorPool_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExitCollaboratorPool_10 extends _i1.SmartFake
    implements _i5.ExitCollaboratorPool {
  _FakeExitCollaboratorPool_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetCollaboratorSearchStatus_11 extends _i1.SmartFake
    implements _i5.GetCollaboratorSearchStatus {
  _FakeGetCollaboratorSearchStatus_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValidateQuery_12 extends _i1.SmartFake implements _i5.ValidateQuery {
  _FakeValidateQuery_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MP2PCollaboratorPoolRemoteSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockMP2PCollaboratorPoolRemoteSourceImpl extends _i1.Mock
    implements _i8.MP2PCollaboratorPoolRemoteSourceImpl {
  MockMP2PCollaboratorPoolRemoteSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SupabaseClient get supabase => (super.noSuchMethod(
        Invocation.getter(#supabase),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#supabase),
        ),
      ) as _i2.SupabaseClient);

  @override
  String get currentUserUID => (super.noSuchMethod(
        Invocation.getter(#currentUserUID),
        returnValue: '',
      ) as String);

  @override
  _i3.ExistingCollaborationsStream get existingCollaborationsStream =>
      (super.noSuchMethod(
        Invocation.getter(#existingCollaborationsStream),
        returnValue: _FakeExistingCollaborationsStream_1(
          this,
          Invocation.getter(#existingCollaborationsStream),
        ),
      ) as _i3.ExistingCollaborationsStream);

  @override
  _i4.InitiateCollaboratorSearch get initiateCollaboratorSearch =>
      (super.noSuchMethod(
        Invocation.getter(#initiateCollaboratorSearch),
        returnValue: _FakeInitiateCollaboratorSearch_2(
          this,
          Invocation.getter(#initiateCollaboratorSearch),
        ),
      ) as _i4.InitiateCollaboratorSearch);

  @override
  _i4.EndCollaboratorSearch get endCollaboratorSearch => (super.noSuchMethod(
        Invocation.getter(#endCollaboratorSearch),
        returnValue: _FakeEndCollaboratorSearch_3(
          this,
          Invocation.getter(#endCollaboratorSearch),
        ),
      ) as _i4.EndCollaboratorSearch);

  @override
  _i9.Future<List<dynamic>> validateQuery({required String? query}) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateQuery,
          [],
          {#query: query},
        ),
        returnValue: _i9.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i9.Future<List<dynamic>>);

  @override
  _i9.Future<_i2.FunctionResponse> enterThePool(
          {required _i10.CollaboratorPhraseIDs? phraseIDs}) =>
      (super.noSuchMethod(
        Invocation.method(
          #enterThePool,
          [],
          {#phraseIDs: phraseIDs},
        ),
        returnValue:
            _i9.Future<_i2.FunctionResponse>.value(_FakeFunctionResponse_4(
          this,
          Invocation.method(
            #enterThePool,
            [],
            {#phraseIDs: phraseIDs},
          ),
        )),
      ) as _i9.Future<_i2.FunctionResponse>);

  @override
  _i9.Future<_i2.FunctionResponse> exitThePool() => (super.noSuchMethod(
        Invocation.method(
          #exitThePool,
          [],
        ),
        returnValue:
            _i9.Future<_i2.FunctionResponse>.value(_FakeFunctionResponse_4(
          this,
          Invocation.method(
            #exitThePool,
            [],
          ),
        )),
      ) as _i9.Future<_i2.FunctionResponse>);

  @override
  _i9.Stream<bool> getCollaboratorSearchStatus() => (super.noSuchMethod(
        Invocation.method(
          #getCollaboratorSearchStatus,
          [],
        ),
        returnValue: _i9.Stream<bool>.empty(),
      ) as _i9.Stream<bool>);

  @override
  bool cancelStream() => (super.noSuchMethod(
        Invocation.method(
          #cancelStream,
          [],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [MEnterCollaboratorPool].
///
/// See the documentation for Mockito's code generation for more information.
class MockMEnterCollaboratorPool extends _i1.Mock
    implements _i8.MEnterCollaboratorPool {
  MockMEnterCollaboratorPool() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.P2PCollaboratorPoolContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeP2PCollaboratorPoolContract_5(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i5.P2PCollaboratorPoolContract);

  @override
  _i9.Future<
      _i6.Either<_i11.Failure, _i5.CollaboratorPoolEntryStatusEntity>> call(
          _i10.CollaboratorPhraseIDs? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i9.Future<
                _i6.Either<_i11.Failure,
                    _i5.CollaboratorPoolEntryStatusEntity>>.value(
            _FakeEither_6<_i11.Failure, _i5.CollaboratorPoolEntryStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i9.Future<
          _i6.Either<_i11.Failure, _i5.CollaboratorPoolEntryStatusEntity>>);
}

/// A class which mocks [MExitCollaboratorPool].
///
/// See the documentation for Mockito's code generation for more information.
class MockMExitCollaboratorPool extends _i1.Mock
    implements _i8.MExitCollaboratorPool {
  MockMExitCollaboratorPool() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.P2PCollaboratorPoolContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeP2PCollaboratorPoolContract_5(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i5.P2PCollaboratorPoolContract);

  @override
  _i9.Future<
      _i6.Either<_i11.Failure, _i5.CollaboratorPoolExitStatusEntity>> call(
          _i12.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i9.Future<
                _i6.Either<_i11.Failure,
                    _i5.CollaboratorPoolExitStatusEntity>>.value(
            _FakeEither_6<_i11.Failure, _i5.CollaboratorPoolExitStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i9.Future<
          _i6.Either<_i11.Failure, _i5.CollaboratorPoolExitStatusEntity>>);
}

/// A class which mocks [MValidateQuery].
///
/// See the documentation for Mockito's code generation for more information.
class MockMValidateQuery extends _i1.Mock implements _i8.MValidateQuery {
  MockMValidateQuery() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.P2PCollaboratorPoolContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeP2PCollaboratorPoolContract_5(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i5.P2PCollaboratorPoolContract);

  @override
  _i9.Future<
      _i6.Either<_i11.Failure, _i5.CollaboratorPhraseValidationEntity>> call(
          _i5.ValidateQueryParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i9.Future<
                _i6.Either<_i11.Failure,
                    _i5.CollaboratorPhraseValidationEntity>>.value(
            _FakeEither_6<_i11.Failure, _i5.CollaboratorPhraseValidationEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i9.Future<
          _i6.Either<_i11.Failure, _i5.CollaboratorPhraseValidationEntity>>);
}

/// A class which mocks [MP2PCollaboratorPoolContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockMP2PCollaboratorPoolContract extends _i1.Mock
    implements _i8.MP2PCollaboratorPoolContract {
  MockMP2PCollaboratorPoolContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i6.Either<_i11.Failure, _i5.CollaboratorPhraseValidationEntity>>
      validateQuery(String? query) => (super.noSuchMethod(
            Invocation.method(
              #validateQuery,
              [query],
            ),
            returnValue: _i9.Future<
                    _i6.Either<_i11.Failure,
                        _i5.CollaboratorPhraseValidationEntity>>.value(
                _FakeEither_6<_i11.Failure,
                    _i5.CollaboratorPhraseValidationEntity>(
              this,
              Invocation.method(
                #validateQuery,
                [query],
              ),
            )),
          ) as _i9.Future<
              _i6
              .Either<_i11.Failure, _i5.CollaboratorPhraseValidationEntity>>);

  @override
  _i9.Future<_i6.Either<_i11.Failure, _i5.CollaboratorPoolEntryStatusEntity>>
      enterTheCollaboratorPool(
              {required _i10.CollaboratorPhraseIDs? phraseIDs}) =>
          (super.noSuchMethod(
            Invocation.method(
              #enterTheCollaboratorPool,
              [],
              {#phraseIDs: phraseIDs},
            ),
            returnValue: _i9.Future<
                _i6.Either<_i11.Failure,
                    _i5.CollaboratorPoolEntryStatusEntity>>.value(_FakeEither_6<
                _i11.Failure, _i5.CollaboratorPoolEntryStatusEntity>(
              this,
              Invocation.method(
                #enterTheCollaboratorPool,
                [],
                {#phraseIDs: phraseIDs},
              ),
            )),
          ) as _i9.Future<
              _i6.Either<_i11.Failure, _i5.CollaboratorPoolEntryStatusEntity>>);

  @override
  _i9.Future<_i6.Either<_i11.Failure, _i5.CollaboratorPoolExitStatusEntity>>
      exitCollaboratorPool() => (super.noSuchMethod(
            Invocation.method(
              #exitCollaboratorPool,
              [],
            ),
            returnValue: _i9.Future<
                _i6.Either<_i11.Failure,
                    _i5.CollaboratorPoolExitStatusEntity>>.value(_FakeEither_6<
                _i11.Failure, _i5.CollaboratorPoolExitStatusEntity>(
              this,
              Invocation.method(
                #exitCollaboratorPool,
                [],
              ),
            )),
          ) as _i9.Future<
              _i6.Either<_i11.Failure, _i5.CollaboratorPoolExitStatusEntity>>);

  @override
  _i9.Future<_i6.Either<_i11.Failure, _i5.CollaboratorSearchStatusEntity>>
      getCollaboratorSearchStatus() => (super.noSuchMethod(
            Invocation.method(
              #getCollaboratorSearchStatus,
              [],
            ),
            returnValue: _i9.Future<
                    _i6.Either<_i11.Failure,
                        _i5.CollaboratorSearchStatusEntity>>.value(
                _FakeEither_6<_i11.Failure, _i5.CollaboratorSearchStatusEntity>(
              this,
              Invocation.method(
                #getCollaboratorSearchStatus,
                [],
              ),
            )),
          ) as _i9.Future<
              _i6.Either<_i11.Failure, _i5.CollaboratorSearchStatusEntity>>);

  @override
  _i9.Future<_i6.Either<_i11.Failure, _i5.CollaboratorStreamStatusEntity>>
      cancelCollaboratorStream() => (super.noSuchMethod(
            Invocation.method(
              #cancelCollaboratorStream,
              [],
            ),
            returnValue: _i9.Future<
                    _i6.Either<_i11.Failure,
                        _i5.CollaboratorStreamStatusEntity>>.value(
                _FakeEither_6<_i11.Failure, _i5.CollaboratorStreamStatusEntity>(
              this,
              Invocation.method(
                #cancelCollaboratorStream,
                [],
              ),
            )),
          ) as _i9.Future<
              _i6.Either<_i11.Failure, _i5.CollaboratorStreamStatusEntity>>);
}

/// A class which mocks [MCancelCollaboratorStreamGetterStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCancelCollaboratorStreamGetterStore extends _i1.Mock
    implements _i8.MCancelCollaboratorStreamGetterStore {
  MockMCancelCollaboratorStreamGetterStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.CancelCollaboratorStream get cancelStreamLogic => (super.noSuchMethod(
        Invocation.getter(#cancelStreamLogic),
        returnValue: _FakeCancelCollaboratorStream_7(
          this,
          Invocation.getter(#cancelStreamLogic),
        ),
      ) as _i5.CancelCollaboratorStream);

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);

  @override
  _i7.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_8(
          this,
          Invocation.getter(#context),
        ),
      ) as _i7.ReactiveContext);

  @override
  _i9.Future<_i6.Either<_i11.Failure, _i5.CollaboratorStreamStatusEntity>>
      call() => (super.noSuchMethod(
            Invocation.method(
              #call,
              [],
            ),
            returnValue: _i9.Future<
                    _i6.Either<_i11.Failure,
                        _i5.CollaboratorStreamStatusEntity>>.value(
                _FakeEither_6<_i11.Failure, _i5.CollaboratorStreamStatusEntity>(
              this,
              Invocation.method(
                #call,
                [],
              ),
            )),
          ) as _i9.Future<
              _i6.Either<_i11.Failure, _i5.CollaboratorStreamStatusEntity>>);
}

/// A class which mocks [MEnterCollaboratorPoolGetterStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMEnterCollaboratorPoolGetterStore extends _i1.Mock
    implements _i8.MEnterCollaboratorPoolGetterStore {
  MockMEnterCollaboratorPoolGetterStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.EnterCollaboratorPool get enterPoolLogic => (super.noSuchMethod(
        Invocation.getter(#enterPoolLogic),
        returnValue: _FakeEnterCollaboratorPool_9(
          this,
          Invocation.getter(#enterPoolLogic),
        ),
      ) as _i5.EnterCollaboratorPool);

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);

  @override
  _i7.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_8(
          this,
          Invocation.getter(#context),
        ),
      ) as _i7.ReactiveContext);

  @override
  _i9.Future<
      _i6.Either<_i11.Failure, _i5.CollaboratorPoolEntryStatusEntity>> call(
          {required _i10.CollaboratorPhraseIDs? phraseIDs}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#phraseIDs: phraseIDs},
        ),
        returnValue: _i9.Future<
                _i6.Either<_i11.Failure,
                    _i5.CollaboratorPoolEntryStatusEntity>>.value(
            _FakeEither_6<_i11.Failure, _i5.CollaboratorPoolEntryStatusEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#phraseIDs: phraseIDs},
          ),
        )),
      ) as _i9.Future<
          _i6.Either<_i11.Failure, _i5.CollaboratorPoolEntryStatusEntity>>);
}

/// A class which mocks [MExitCollaboratorPoolGetterStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMExitCollaboratorPoolGetterStore extends _i1.Mock
    implements _i8.MExitCollaboratorPoolGetterStore {
  MockMExitCollaboratorPoolGetterStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ExitCollaboratorPool get exitPoolLogic => (super.noSuchMethod(
        Invocation.getter(#exitPoolLogic),
        returnValue: _FakeExitCollaboratorPool_10(
          this,
          Invocation.getter(#exitPoolLogic),
        ),
      ) as _i5.ExitCollaboratorPool);

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);

  @override
  _i7.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_8(
          this,
          Invocation.getter(#context),
        ),
      ) as _i7.ReactiveContext);

  @override
  _i9.Future<_i6.Either<_i11.Failure, _i5.CollaboratorPoolExitStatusEntity>>
      call() => (super.noSuchMethod(
            Invocation.method(
              #call,
              [],
            ),
            returnValue: _i9.Future<
                _i6.Either<_i11.Failure,
                    _i5.CollaboratorPoolExitStatusEntity>>.value(_FakeEither_6<
                _i11.Failure, _i5.CollaboratorPoolExitStatusEntity>(
              this,
              Invocation.method(
                #call,
                [],
              ),
            )),
          ) as _i9.Future<
              _i6.Either<_i11.Failure, _i5.CollaboratorPoolExitStatusEntity>>);
}

/// A class which mocks [MGetCollaboratorSearchStatusGetterStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetCollaboratorSearchStatusGetterStore extends _i1.Mock
    implements _i8.MGetCollaboratorSearchStatusGetterStore {
  MockMGetCollaboratorSearchStatusGetterStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.GetCollaboratorSearchStatus get collaboratorSearchStatusLogic =>
      (super.noSuchMethod(
        Invocation.getter(#collaboratorSearchStatusLogic),
        returnValue: _FakeGetCollaboratorSearchStatus_11(
          this,
          Invocation.getter(#collaboratorSearchStatusLogic),
        ),
      ) as _i5.GetCollaboratorSearchStatus);

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);

  @override
  _i7.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_8(
          this,
          Invocation.getter(#context),
        ),
      ) as _i7.ReactiveContext);

  @override
  _i9.Future<_i6.Either<_i11.Failure, _i5.CollaboratorSearchStatusEntity>>
      call() => (super.noSuchMethod(
            Invocation.method(
              #call,
              [],
            ),
            returnValue: _i9.Future<
                    _i6.Either<_i11.Failure,
                        _i5.CollaboratorSearchStatusEntity>>.value(
                _FakeEither_6<_i11.Failure, _i5.CollaboratorSearchStatusEntity>(
              this,
              Invocation.method(
                #call,
                [],
              ),
            )),
          ) as _i9.Future<
              _i6.Either<_i11.Failure, _i5.CollaboratorSearchStatusEntity>>);
}

/// A class which mocks [MValidateQueryGetterStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMValidateQueryGetterStore extends _i1.Mock
    implements _i8.MValidateQueryGetterStore {
  MockMValidateQueryGetterStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ValidateQuery get validateQueryLogic => (super.noSuchMethod(
        Invocation.getter(#validateQueryLogic),
        returnValue: _FakeValidateQuery_12(
          this,
          Invocation.getter(#validateQueryLogic),
        ),
      ) as _i5.ValidateQuery);

  @override
  set validateQueryLogic(_i5.ValidateQuery? _validateQueryLogic) =>
      super.noSuchMethod(
        Invocation.setter(
          #validateQueryLogic,
          _validateQueryLogic,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);

  @override
  _i7.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_8(
          this,
          Invocation.getter(#context),
        ),
      ) as _i7.ReactiveContext);

  @override
  _i9.Future<
      _i6.Either<_i11.Failure, _i5.CollaboratorPhraseValidationEntity>> call(
          _i5.ValidateQueryParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i9.Future<
                _i6.Either<_i11.Failure,
                    _i5.CollaboratorPhraseValidationEntity>>.value(
            _FakeEither_6<_i11.Failure, _i5.CollaboratorPhraseValidationEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i9.Future<
          _i6.Either<_i11.Failure, _i5.CollaboratorPhraseValidationEntity>>);
}

/// A class which mocks [P2PCollaboratorPoolRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockP2PCollaboratorPoolRemoteSource extends _i1.Mock
    implements _i13.P2PCollaboratorPoolRemoteSource {
  @override
  _i9.Future<List<dynamic>> validateQuery({required String? query}) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateQuery,
          [],
          {#query: query},
        ),
        returnValue: _i9.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub: _i9.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i9.Future<List<dynamic>>);

  @override
  _i9.Future<_i2.FunctionResponse> enterThePool(
          {required _i10.CollaboratorPhraseIDs? phraseIDs}) =>
      (super.noSuchMethod(
        Invocation.method(
          #enterThePool,
          [],
          {#phraseIDs: phraseIDs},
        ),
        returnValue:
            _i9.Future<_i2.FunctionResponse>.value(_FakeFunctionResponse_4(
          this,
          Invocation.method(
            #enterThePool,
            [],
            {#phraseIDs: phraseIDs},
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i2.FunctionResponse>.value(_FakeFunctionResponse_4(
          this,
          Invocation.method(
            #enterThePool,
            [],
            {#phraseIDs: phraseIDs},
          ),
        )),
      ) as _i9.Future<_i2.FunctionResponse>);

  @override
  _i9.Future<_i2.FunctionResponse> exitThePool() => (super.noSuchMethod(
        Invocation.method(
          #exitThePool,
          [],
        ),
        returnValue:
            _i9.Future<_i2.FunctionResponse>.value(_FakeFunctionResponse_4(
          this,
          Invocation.method(
            #exitThePool,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i2.FunctionResponse>.value(_FakeFunctionResponse_4(
          this,
          Invocation.method(
            #exitThePool,
            [],
          ),
        )),
      ) as _i9.Future<_i2.FunctionResponse>);

  @override
  _i9.Stream<bool> getCollaboratorSearchStatus() => (super.noSuchMethod(
        Invocation.method(
          #getCollaboratorSearchStatus,
          [],
        ),
        returnValue: _i9.Stream<bool>.empty(),
        returnValueForMissingStub: _i9.Stream<bool>.empty(),
      ) as _i9.Stream<bool>);

  @override
  bool cancelStream() => (super.noSuchMethod(
        Invocation.method(
          #cancelStream,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
