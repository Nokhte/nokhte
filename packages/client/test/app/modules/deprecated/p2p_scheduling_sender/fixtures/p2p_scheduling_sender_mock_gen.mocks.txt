// Mocks generated by Mockito 5.4.0 from annotations
// in primala/test/app/modules/p2p_scheduling_sender/fixtures/p2p_scheduling_sender_mock_gen.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes, must_be_immutable
import 'dart:async' as _i12;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mobx/mobx.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:primala/app/core/error/failure.dart' as _i13;
import 'package:primala/app/core/mobx/base_future_store.dart' as _i9;
import 'package:primala/app/core/mobx/store_state.dart' as _i17;
import 'package:primala/app/modules/p2p_scheduling_sender/domain/contracts/p2p_scheduling_sender_contract.dart'
    as _i4;
import 'package:primala/app/modules/p2p_scheduling_sender/domain/entities/confirm_p2p_scheduling_time_status_entity.dart'
    as _i16;
import 'package:primala/app/modules/p2p_scheduling_sender/domain/entities/p2p_scheduling_request_status_entity.dart'
    as _i14;
import 'package:primala/app/modules/p2p_scheduling_sender/domain/entities/send_scheduling_request_param_entity.dart'
    as _i15;
import 'package:primala/app/modules/p2p_scheduling_sender/domain/logic/confirm_scheduling_time.dart'
    as _i7;
import 'package:primala/app/modules/p2p_scheduling_sender/domain/logic/send_scheduling_request.dart'
    as _i5;
import 'package:primala/app/modules/p2p_scheduling_sender/presentation/mobx/getters/confirm_scheduling_time_getter_store.dart'
    as _i10;
import 'package:primala/app/modules/p2p_scheduling_sender/presentation/mobx/getters/send_scheduling_request_getter_store.dart'
    as _i8;
import 'package:supabase_flutter/supabase_flutter.dart' as _i2;

import 'p2p_scheduling_sender_mock_gen.txt' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSupabaseClient_0 extends _i1.SmartFake
    implements _i2.SupabaseClient {
  _FakeSupabaseClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeP2PSchedulingSenderContract_2 extends _i1.SmartFake
    implements _i4.P2PSchedulingSenderContract {
  _FakeP2PSchedulingSenderContract_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSendSchedulingRequest_3 extends _i1.SmartFake
    implements _i5.SendSchedulingRequest {
  _FakeSendSchedulingRequest_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_4 extends _i1.SmartFake
    implements _i6.ReactiveContext {
  _FakeReactiveContext_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfirmSchedulingTime_5 extends _i1.SmartFake
    implements _i7.ConfirmSchedulingTime {
  _FakeConfirmSchedulingTime_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSendSchedulingRequestGetterStore_6 extends _i1.SmartFake
    implements _i8.SendSchedulingRequestGetterStore {
  _FakeSendSchedulingRequestGetterStore_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseFutureStore_7<T> extends _i1.SmartFake
    implements _i9.BaseFutureStore<T> {
  _FakeBaseFutureStore_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfirmSchedulingTimeGetterStore_8 extends _i1.SmartFake
    implements _i10.ConfirmSchedulingTimeGetterStore {
  _FakeConfirmSchedulingTimeGetterStore_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MP2PSchedulingSenderRemoteSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockMP2PSchedulingSenderRemoteSourceImpl extends _i1.Mock
    implements _i11.MP2PSchedulingSenderRemoteSourceImpl {
  MockMP2PSchedulingSenderRemoteSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SupabaseClient get supabase => (super.noSuchMethod(
        Invocation.getter(#supabase),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#supabase),
        ),
      ) as _i2.SupabaseClient);
  @override
  _i12.Future<List<dynamic>> sendSchedulingRequest(
    String? receiverUID,
    Map<String, dynamic>? initialTimeRanges,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendSchedulingRequest,
          [
            receiverUID,
            initialTimeRanges,
          ],
        ),
        returnValue: _i12.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i12.Future<List<dynamic>>);
  @override
  _i12.Future<List<dynamic>> confirmSchedulingTime(String? receiverUID) =>
      (super.noSuchMethod(
        Invocation.method(
          #confirmSchedulingTime,
          [receiverUID],
        ),
        returnValue: _i12.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i12.Future<List<dynamic>>);
}

/// A class which mocks [MP2PSchedulingSenderRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMP2PSchedulingSenderRemoteSource extends _i1.Mock
    implements _i11.MP2PSchedulingSenderRemoteSource {
  MockMP2PSchedulingSenderRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<List<dynamic>> sendSchedulingRequest(
    String? receiverUID,
    Map<String, dynamic>? initialTimeRanges,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendSchedulingRequest,
          [
            receiverUID,
            initialTimeRanges,
          ],
        ),
        returnValue: _i12.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i12.Future<List<dynamic>>);
  @override
  _i12.Future<List<dynamic>> confirmSchedulingTime(String? receiverUID) =>
      (super.noSuchMethod(
        Invocation.method(
          #confirmSchedulingTime,
          [receiverUID],
        ),
        returnValue: _i12.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i12.Future<List<dynamic>>);
}

/// A class which mocks [MP2PSchedulingSenderContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockMP2PSchedulingSenderContract extends _i1.Mock
    implements _i11.MP2PSchedulingSenderContract {
  MockMP2PSchedulingSenderContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i3.Either<_i13.Failure, _i14.P2PSchedulingRequestStatusEntity>>
      sendSchedulingRequest(
              {required _i15.SendSchedulingRequestParamEntity?
                  schedulingInfoEntity}) =>
          (super.noSuchMethod(
            Invocation.method(
              #sendSchedulingRequest,
              [],
              {#schedulingInfoEntity: schedulingInfoEntity},
            ),
            returnValue: _i12.Future<
                _i3.Either<_i13.Failure,
                    _i14.P2PSchedulingRequestStatusEntity>>.value(_FakeEither_1<
                _i13.Failure, _i14.P2PSchedulingRequestStatusEntity>(
              this,
              Invocation.method(
                #sendSchedulingRequest,
                [],
                {#schedulingInfoEntity: schedulingInfoEntity},
              ),
            )),
          ) as _i12.Future<
              _i3.Either<_i13.Failure, _i14.P2PSchedulingRequestStatusEntity>>);
  @override
  _i12.Future<
          _i3.Either<_i13.Failure, _i16.ConfirmP2PSchedulingTimeStatusEntity>>
      confirmSchedulingTime({required String? receiverUID}) =>
          (super.noSuchMethod(
            Invocation.method(
              #confirmSchedulingTime,
              [],
              {#receiverUID: receiverUID},
            ),
            returnValue: _i12.Future<
                    _i3.Either<_i13.Failure,
                        _i16.ConfirmP2PSchedulingTimeStatusEntity>>.value(
                _FakeEither_1<_i13.Failure,
                    _i16.ConfirmP2PSchedulingTimeStatusEntity>(
              this,
              Invocation.method(
                #confirmSchedulingTime,
                [],
                {#receiverUID: receiverUID},
              ),
            )),
          ) as _i12.Future<
              _i3.Either<_i13.Failure,
                  _i16.ConfirmP2PSchedulingTimeStatusEntity>>);
}

/// A class which mocks [MSendSchedulingRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockMSendSchedulingRequest extends _i1.Mock
    implements _i11.MSendSchedulingRequest {
  MockMSendSchedulingRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.P2PSchedulingSenderContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeP2PSchedulingSenderContract_2(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i4.P2PSchedulingSenderContract);
  @override
  _i12.Future<
      _i3.Either<_i13.Failure, _i14.P2PSchedulingRequestStatusEntity>> call(
          _i15.SendSchedulingRequestParamEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i12.Future<
                _i3.Either<_i13.Failure,
                    _i14.P2PSchedulingRequestStatusEntity>>.value(
            _FakeEither_1<_i13.Failure, _i14.P2PSchedulingRequestStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i12.Future<
          _i3.Either<_i13.Failure, _i14.P2PSchedulingRequestStatusEntity>>);
}

/// A class which mocks [MConfirmSchedulingTime].
///
/// See the documentation for Mockito's code generation for more information.
class MockMConfirmSchedulingTime extends _i1.Mock
    implements _i11.MConfirmSchedulingTime {
  MockMConfirmSchedulingTime() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.P2PSchedulingSenderContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeP2PSchedulingSenderContract_2(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i4.P2PSchedulingSenderContract);
  @override
  _i12.Future<
      _i3.Either<_i13.Failure, _i16.ConfirmP2PSchedulingTimeStatusEntity>> call(
          _i7.ConfirmSchedulingTimeParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i12.Future<
            _i3.Either<_i13.Failure,
                _i16.ConfirmP2PSchedulingTimeStatusEntity>>.value(_FakeEither_1<
            _i13.Failure, _i16.ConfirmP2PSchedulingTimeStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i12.Future<
          _i3.Either<_i13.Failure, _i16.ConfirmP2PSchedulingTimeStatusEntity>>);
}

/// A class which mocks [MSendSchedulingRequestGetterStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMSendSchedulingRequestGetterStore extends _i1.Mock
    implements _i11.MSendSchedulingRequestGetterStore {
  MockMSendSchedulingRequestGetterStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.SendSchedulingRequest get sendSchedulingRequestLogic =>
      (super.noSuchMethod(
        Invocation.getter(#sendSchedulingRequestLogic),
        returnValue: _FakeSendSchedulingRequest_3(
          this,
          Invocation.getter(#sendSchedulingRequestLogic),
        ),
      ) as _i5.SendSchedulingRequest);
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
  @override
  _i6.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_4(
          this,
          Invocation.getter(#context),
        ),
      ) as _i6.ReactiveContext);
  @override
  _i12.Future<
      _i3.Either<_i13.Failure, _i14.P2PSchedulingRequestStatusEntity>> call(
          _i15.SendSchedulingRequestParamEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i12.Future<
                _i3.Either<_i13.Failure,
                    _i14.P2PSchedulingRequestStatusEntity>>.value(
            _FakeEither_1<_i13.Failure, _i14.P2PSchedulingRequestStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i12.Future<
          _i3.Either<_i13.Failure, _i14.P2PSchedulingRequestStatusEntity>>);
}

/// A class which mocks [MConfirmSchedulingTimeGetterStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMConfirmSchedulingTimeGetterStore extends _i1.Mock
    implements _i11.MConfirmSchedulingTimeGetterStore {
  MockMConfirmSchedulingTimeGetterStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.ConfirmSchedulingTime get confirmSchedulingTimeLogic =>
      (super.noSuchMethod(
        Invocation.getter(#confirmSchedulingTimeLogic),
        returnValue: _FakeConfirmSchedulingTime_5(
          this,
          Invocation.getter(#confirmSchedulingTimeLogic),
        ),
      ) as _i7.ConfirmSchedulingTime);
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
  @override
  _i6.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_4(
          this,
          Invocation.getter(#context),
        ),
      ) as _i6.ReactiveContext);
  @override
  _i12.Future<
      _i3.Either<_i13.Failure, _i16.ConfirmP2PSchedulingTimeStatusEntity>> call(
          _i7.ConfirmSchedulingTimeParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i12.Future<
            _i3.Either<_i13.Failure,
                _i16.ConfirmP2PSchedulingTimeStatusEntity>>.value(_FakeEither_1<
            _i13.Failure, _i16.ConfirmP2PSchedulingTimeStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i12.Future<
          _i3.Either<_i13.Failure, _i16.ConfirmP2PSchedulingTimeStatusEntity>>);
}

/// A class which mocks [MSendSchedulingRequestStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMSendSchedulingRequestStore extends _i1.Mock
    implements _i11.MSendSchedulingRequestStore {
  MockMSendSchedulingRequestStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.SendSchedulingRequestGetterStore get sendSchedulingRequestGetterStore =>
      (super.noSuchMethod(
        Invocation.getter(#sendSchedulingRequestGetterStore),
        returnValue: _FakeSendSchedulingRequestGetterStore_6(
          this,
          Invocation.getter(#sendSchedulingRequestGetterStore),
        ),
      ) as _i8.SendSchedulingRequestGetterStore);
  @override
  _i9.BaseFutureStore<_i14.P2PSchedulingRequestStatusEntity> get futureStore =>
      (super.noSuchMethod(
        Invocation.getter(#futureStore),
        returnValue:
            _FakeBaseFutureStore_7<_i14.P2PSchedulingRequestStatusEntity>(
          this,
          Invocation.getter(#futureStore),
        ),
      ) as _i9.BaseFutureStore<_i14.P2PSchedulingRequestStatusEntity>);
  @override
  set futureStore(
          _i9.BaseFutureStore<_i14.P2PSchedulingRequestStatusEntity>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #futureStore,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isSent => (super.noSuchMethod(
        Invocation.getter(#isSent),
        returnValue: false,
      ) as bool);
  @override
  set isSent(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isSent,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i17.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i17.StoreState.initial,
      ) as _i17.StoreState);
  @override
  set state(_i17.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: '',
      ) as String);
  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
  @override
  _i6.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_4(
          this,
          Invocation.getter(#context),
        ),
      ) as _i6.ReactiveContext);
  @override
  void stateOrErrorUpdater(
          _i3.Either<_i13.Failure, _i14.P2PSchedulingRequestStatusEntity>?
              result) =>
      super.noSuchMethod(
        Invocation.method(
          #stateOrErrorUpdater,
          [result],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Future<void> call(_i15.SendSchedulingRequestParamEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  String mapFailureToMessage(_i13.Failure? failure) => (super.noSuchMethod(
        Invocation.method(
          #mapFailureToMessage,
          [failure],
        ),
        returnValue: '',
      ) as String);
}

/// A class which mocks [MConfirmSchedulingTimeStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMConfirmSchedulingTimeStore extends _i1.Mock
    implements _i11.MConfirmSchedulingTimeStore {
  MockMConfirmSchedulingTimeStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.ConfirmSchedulingTimeGetterStore get confirmSchedulingTimeGetterStore =>
      (super.noSuchMethod(
        Invocation.getter(#confirmSchedulingTimeGetterStore),
        returnValue: _FakeConfirmSchedulingTimeGetterStore_8(
          this,
          Invocation.getter(#confirmSchedulingTimeGetterStore),
        ),
      ) as _i10.ConfirmSchedulingTimeGetterStore);
  @override
  set confirmSchedulingTimeGetterStore(
          _i10.ConfirmSchedulingTimeGetterStore?
              _confirmSchedulingTimeGetterStore) =>
      super.noSuchMethod(
        Invocation.setter(
          #confirmSchedulingTimeGetterStore,
          _confirmSchedulingTimeGetterStore,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.BaseFutureStore<_i16.ConfirmP2PSchedulingTimeStatusEntity>
      get futureStore => (super.noSuchMethod(
            Invocation.getter(#futureStore),
            returnValue: _FakeBaseFutureStore_7<
                _i16.ConfirmP2PSchedulingTimeStatusEntity>(
              this,
              Invocation.getter(#futureStore),
            ),
          ) as _i9.BaseFutureStore<_i16.ConfirmP2PSchedulingTimeStatusEntity>);
  @override
  set futureStore(
          _i9.BaseFutureStore<_i16.ConfirmP2PSchedulingTimeStatusEntity>?
              value) =>
      super.noSuchMethod(
        Invocation.setter(
          #futureStore,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isSent => (super.noSuchMethod(
        Invocation.getter(#isSent),
        returnValue: false,
      ) as bool);
  @override
  set isSent(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isSent,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
  @override
  _i17.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i17.StoreState.initial,
      ) as _i17.StoreState);
  @override
  set state(_i17.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: '',
      ) as String);
  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_4(
          this,
          Invocation.getter(#context),
        ),
      ) as _i6.ReactiveContext);
  @override
  void stateOrErrorUpdater(
          _i3.Either<_i13.Failure, _i16.ConfirmP2PSchedulingTimeStatusEntity>?
              result) =>
      super.noSuchMethod(
        Invocation.method(
          #stateOrErrorUpdater,
          [result],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Future<void> call(_i7.ConfirmSchedulingTimeParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  String mapFailureToMessage(_i13.Failure? failure) => (super.noSuchMethod(
        Invocation.method(
          #mapFailureToMessage,
          [failure],
        ),
        returnValue: '',
      ) as String);
}
