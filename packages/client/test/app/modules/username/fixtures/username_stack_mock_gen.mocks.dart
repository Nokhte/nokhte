// Mocks generated by Mockito 5.4.0 from annotations
// in primala/test/app/modules/username/fixtures/username_stack_mock_gen.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes, must_be_immutable
import 'dart:async' as _i10;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mobx/mobx.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:primala/app/core/error/failure.dart' as _i11;
import 'package:primala/app/core/interfaces/logic.dart' as _i14;
import 'package:primala/app/core/mobx/store_state.dart' as _i15;
import 'package:primala/app/modules/username/domain/contracts/username_contract.dart'
    as _i4;
import 'package:primala/app/modules/username/domain/entities/default_username_entity.dart'
    as _i13;
import 'package:primala/app/modules/username/domain/entities/username_status_entity.dart'
    as _i12;
import 'package:primala/app/modules/username/domain/logic/check_if_username_is_created.dart'
    as _i5;
import 'package:primala/app/modules/username/domain/logic/create_username.dart'
    as _i7;
import 'package:primala/app/modules/username/domain/logic/get_default_username.dart'
    as _i8;
import 'package:supabase_flutter/supabase_flutter.dart' as _i2;

import 'username_stack_mock_gen.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSupabaseClient_0 extends _i1.SmartFake
    implements _i2.SupabaseClient {
  _FakeSupabaseClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUsernameContract_2 extends _i1.SmartFake
    implements _i4.UsernameContract {
  _FakeUsernameContract_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCheckIfUsernameIsCreated_3 extends _i1.SmartFake
    implements _i5.CheckIfUsernameIsCreated {
  _FakeCheckIfUsernameIsCreated_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_4 extends _i1.SmartFake
    implements _i6.ReactiveContext {
  _FakeReactiveContext_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCreateUsername_5 extends _i1.SmartFake
    implements _i7.CreateUsername {
  _FakeCreateUsername_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetDefaultUsername_6 extends _i1.SmartFake
    implements _i8.GetDefaultUsername {
  _FakeGetDefaultUsername_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MUsernameRemoteSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockMUsernameRemoteSourceImpl extends _i1.Mock
    implements _i9.MUsernameRemoteSourceImpl {
  MockMUsernameRemoteSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SupabaseClient get supabase => (super.noSuchMethod(
        Invocation.getter(#supabase),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#supabase),
        ),
      ) as _i2.SupabaseClient);
  @override
  _i10.Future<String> getDefaultUsername() => (super.noSuchMethod(
        Invocation.method(
          #getDefaultUsername,
          [],
        ),
        returnValue: _i10.Future<String>.value(''),
      ) as _i10.Future<String>);
  @override
  _i10.Future<List<dynamic>> createUsername(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUsername,
          [username],
        ),
        returnValue: _i10.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i10.Future<List<dynamic>>);
  @override
  _i10.Future<List<dynamic>> checkIfUsernameIsCreated() => (super.noSuchMethod(
        Invocation.method(
          #checkIfUsernameIsCreated,
          [],
        ),
        returnValue: _i10.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i10.Future<List<dynamic>>);
}

/// A class which mocks [MRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMRemoteSource extends _i1.Mock implements _i9.MRemoteSource {
  MockMRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<String> getDefaultUsername() => (super.noSuchMethod(
        Invocation.method(
          #getDefaultUsername,
          [],
        ),
        returnValue: _i10.Future<String>.value(''),
      ) as _i10.Future<String>);
  @override
  _i10.Future<List<dynamic>> createUsername(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUsername,
          [username],
        ),
        returnValue: _i10.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i10.Future<List<dynamic>>);
  @override
  _i10.Future<List<dynamic>> checkIfUsernameIsCreated() => (super.noSuchMethod(
        Invocation.method(
          #checkIfUsernameIsCreated,
          [],
        ),
        returnValue: _i10.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i10.Future<List<dynamic>>);
}

/// A class which mocks [MUsernameContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockMUsernameContract extends _i1.Mock implements _i9.MUsernameContract {
  MockMUsernameContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i3.Either<_i11.Failure, _i12.UsernameStatusEntity>>
      createUsername(String? username) => (super.noSuchMethod(
            Invocation.method(
              #createUsername,
              [username],
            ),
            returnValue: _i10.Future<
                    _i3.Either<_i11.Failure, _i12.UsernameStatusEntity>>.value(
                _FakeEither_1<_i11.Failure, _i12.UsernameStatusEntity>(
              this,
              Invocation.method(
                #createUsername,
                [username],
              ),
            )),
          ) as _i10
              .Future<_i3.Either<_i11.Failure, _i12.UsernameStatusEntity>>);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i13.DefaultUsernameEntity>>
      getDefaultUsername() => (super.noSuchMethod(
            Invocation.method(
              #getDefaultUsername,
              [],
            ),
            returnValue: _i10.Future<
                    _i3.Either<_i11.Failure, _i13.DefaultUsernameEntity>>.value(
                _FakeEither_1<_i11.Failure, _i13.DefaultUsernameEntity>(
              this,
              Invocation.method(
                #getDefaultUsername,
                [],
              ),
            )),
          ) as _i10
              .Future<_i3.Either<_i11.Failure, _i13.DefaultUsernameEntity>>);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i12.UsernameStatusEntity>>
      checkIfUsernameIsCreated() => (super.noSuchMethod(
            Invocation.method(
              #checkIfUsernameIsCreated,
              [],
            ),
            returnValue: _i10.Future<
                    _i3.Either<_i11.Failure, _i12.UsernameStatusEntity>>.value(
                _FakeEither_1<_i11.Failure, _i12.UsernameStatusEntity>(
              this,
              Invocation.method(
                #checkIfUsernameIsCreated,
                [],
              ),
            )),
          ) as _i10
              .Future<_i3.Either<_i11.Failure, _i12.UsernameStatusEntity>>);
}

/// A class which mocks [MCheckIfUsernameIsCreated].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCheckIfUsernameIsCreated extends _i1.Mock
    implements _i9.MCheckIfUsernameIsCreated {
  MockMCheckIfUsernameIsCreated() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UsernameContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeUsernameContract_2(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i4.UsernameContract);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i12.UsernameStatusEntity>> call(
          _i14.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<
                _i3.Either<_i11.Failure, _i12.UsernameStatusEntity>>.value(
            _FakeEither_1<_i11.Failure, _i12.UsernameStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i12.UsernameStatusEntity>>);
}

/// A class which mocks [MCreateUsername].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCreateUsername extends _i1.Mock implements _i9.MCreateUsername {
  MockMCreateUsername() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UsernameContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeUsernameContract_2(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i4.UsernameContract);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i12.UsernameStatusEntity>> call(
          _i7.CreateUserParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<
                _i3.Either<_i11.Failure, _i12.UsernameStatusEntity>>.value(
            _FakeEither_1<_i11.Failure, _i12.UsernameStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i12.UsernameStatusEntity>>);
}

/// A class which mocks [MGetDefaultUsername].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetDefaultUsername extends _i1.Mock
    implements _i9.MGetDefaultUsername {
  MockMGetDefaultUsername() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UsernameContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeUsernameContract_2(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i4.UsernameContract);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i13.DefaultUsernameEntity>> call(
          _i14.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<
                _i3.Either<_i11.Failure, _i13.DefaultUsernameEntity>>.value(
            _FakeEither_1<_i11.Failure, _i13.DefaultUsernameEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i13.DefaultUsernameEntity>>);
}

/// A class which mocks [MCheckIfUsernameIsCreatedGetterStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCheckIfUsernameIsCreatedGetterStore extends _i1.Mock
    implements _i9.MCheckIfUsernameIsCreatedGetterStore {
  MockMCheckIfUsernameIsCreatedGetterStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.CheckIfUsernameIsCreated get checkUsernameLogic => (super.noSuchMethod(
        Invocation.getter(#checkUsernameLogic),
        returnValue: _FakeCheckIfUsernameIsCreated_3(
          this,
          Invocation.getter(#checkUsernameLogic),
        ),
      ) as _i5.CheckIfUsernameIsCreated);
  @override
  _i15.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i15.StoreState.initial,
      ) as _i15.StoreState);
  @override
  set state(_i15.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
  @override
  _i6.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_4(
          this,
          Invocation.getter(#context),
        ),
      ) as _i6.ReactiveContext);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i12.UsernameStatusEntity>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i10.Future<
                _i3.Either<_i11.Failure, _i12.UsernameStatusEntity>>.value(
            _FakeEither_1<_i11.Failure, _i12.UsernameStatusEntity>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i12.UsernameStatusEntity>>);
}

/// A class which mocks [MCreateUsernameGetterStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCreateUsernameGetterStore extends _i1.Mock
    implements _i9.MCreateUsernameGetterStore {
  MockMCreateUsernameGetterStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.CreateUsername get createUsernameLogic => (super.noSuchMethod(
        Invocation.getter(#createUsernameLogic),
        returnValue: _FakeCreateUsername_5(
          this,
          Invocation.getter(#createUsernameLogic),
        ),
      ) as _i7.CreateUsername);
  @override
  _i15.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i15.StoreState.initial,
      ) as _i15.StoreState);
  @override
  set state(_i15.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
  @override
  _i6.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_4(
          this,
          Invocation.getter(#context),
        ),
      ) as _i6.ReactiveContext);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i12.UsernameStatusEntity>> call(
          String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [username],
        ),
        returnValue: _i10.Future<
                _i3.Either<_i11.Failure, _i12.UsernameStatusEntity>>.value(
            _FakeEither_1<_i11.Failure, _i12.UsernameStatusEntity>(
          this,
          Invocation.method(
            #call,
            [username],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i12.UsernameStatusEntity>>);
}

/// A class which mocks [MGetDefaultUsernameGetterStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetDefaultUsernameGetterStore extends _i1.Mock
    implements _i9.MGetDefaultUsernameGetterStore {
  MockMGetDefaultUsernameGetterStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.GetDefaultUsername get getDefaultUsernameLogic => (super.noSuchMethod(
        Invocation.getter(#getDefaultUsernameLogic),
        returnValue: _FakeGetDefaultUsername_6(
          this,
          Invocation.getter(#getDefaultUsernameLogic),
        ),
      ) as _i8.GetDefaultUsername);
  @override
  _i15.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i15.StoreState.initial,
      ) as _i15.StoreState);
  @override
  set state(_i15.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
  @override
  _i6.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_4(
          this,
          Invocation.getter(#context),
        ),
      ) as _i6.ReactiveContext);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i13.DefaultUsernameEntity>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i10.Future<
                _i3.Either<_i11.Failure, _i13.DefaultUsernameEntity>>.value(
            _FakeEither_1<_i11.Failure, _i13.DefaultUsernameEntity>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i13.DefaultUsernameEntity>>);
}
