// Mocks generated by Mockito 5.4.0 from annotations
// in primala/test/app/modules/authentication/fixtures/authentication_stack_mock_gen.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;

import 'package:dartz/dartz.dart' as _i5;
import 'package:mobx/mobx.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:primala/app/core/error/failure.dart' as _i14;
import 'package:primala/app/core/interfaces/auth_providers.dart' as _i18;
import 'package:primala/app/core/interfaces/logic.dart' as _i16;
import 'package:primala/app/core/mobx/store_state.dart' as _i17;
import 'package:primala/app/modules/authentication/data/models/auth_provider_model.dart'
    as _i3;
import 'package:primala/app/modules/authentication/data/models/auth_state_model.dart'
    as _i4;
import 'package:primala/app/modules/authentication/domain/contracts/authentication_contract.dart'
    as _i7;
import 'package:primala/app/modules/authentication/domain/entities/auth_provider_entity.dart'
    as _i15;
import 'package:primala/app/modules/authentication/domain/entities/auth_state_entity.dart'
    as _i6;
import 'package:primala/app/modules/authentication/domain/logic/get_auth_state.dart'
    as _i11;
import 'package:primala/app/modules/authentication/domain/logic/sign_in_with_apple.dart'
    as _i8;
import 'package:primala/app/modules/authentication/domain/logic/sign_in_with_google.dart'
    as _i9;
import 'package:supabase_flutter/supabase_flutter.dart' as _i2;

import 'authentication_stack_mock_gen.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSupabaseClient_0 extends _i1.SmartFake
    implements _i2.SupabaseClient {
  _FakeSupabaseClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthProviderModel_1 extends _i1.SmartFake
    implements _i3.AuthProviderModel {
  _FakeAuthProviderModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthModel_2 extends _i1.SmartFake implements _i4.AuthModel {
  _FakeAuthModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_3<L, R> extends _i1.SmartFake implements _i5.Either<L, R> {
  _FakeEither_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthEntity_4 extends _i1.SmartFake implements _i6.AuthEntity {
  _FakeAuthEntity_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthenticationContract_5 extends _i1.SmartFake
    implements _i7.AuthenticationContract {
  _FakeAuthenticationContract_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSignInWithApple_6 extends _i1.SmartFake
    implements _i8.SignInWithApple {
  _FakeSignInWithApple_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSignInWithGoogle_7 extends _i1.SmartFake
    implements _i9.SignInWithGoogle {
  _FakeSignInWithGoogle_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_8 extends _i1.SmartFake
    implements _i10.ReactiveContext {
  _FakeReactiveContext_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetAuthState_9 extends _i1.SmartFake implements _i11.GetAuthState {
  _FakeGetAuthState_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MAuthenticationRemoteSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockMAuthenticationRemoteSourceImpl extends _i1.Mock
    implements _i12.MAuthenticationRemoteSourceImpl {
  MockMAuthenticationRemoteSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SupabaseClient get supabase => (super.noSuchMethod(
        Invocation.getter(#supabase),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#supabase),
        ),
      ) as _i2.SupabaseClient);
  @override
  _i13.Future<_i3.AuthProviderModel> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue:
            _i13.Future<_i3.AuthProviderModel>.value(_FakeAuthProviderModel_1(
          this,
          Invocation.method(
            #signInWithGoogle,
            [],
          ),
        )),
      ) as _i13.Future<_i3.AuthProviderModel>);
  @override
  _i13.Future<_i3.AuthProviderModel> signInWithApple() => (super.noSuchMethod(
        Invocation.method(
          #signInWithApple,
          [],
        ),
        returnValue:
            _i13.Future<_i3.AuthProviderModel>.value(_FakeAuthProviderModel_1(
          this,
          Invocation.method(
            #signInWithApple,
            [],
          ),
        )),
      ) as _i13.Future<_i3.AuthProviderModel>);
  @override
  _i4.AuthModel getAuthState() => (super.noSuchMethod(
        Invocation.method(
          #getAuthState,
          [],
        ),
        returnValue: _FakeAuthModel_2(
          this,
          Invocation.method(
            #getAuthState,
            [],
          ),
        ),
      ) as _i4.AuthModel);
}

/// A class which mocks [MRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMRemoteSource extends _i1.Mock implements _i12.MRemoteSource {
  MockMRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i3.AuthProviderModel> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue:
            _i13.Future<_i3.AuthProviderModel>.value(_FakeAuthProviderModel_1(
          this,
          Invocation.method(
            #signInWithGoogle,
            [],
          ),
        )),
      ) as _i13.Future<_i3.AuthProviderModel>);
  @override
  _i13.Future<_i3.AuthProviderModel> signInWithApple() => (super.noSuchMethod(
        Invocation.method(
          #signInWithApple,
          [],
        ),
        returnValue:
            _i13.Future<_i3.AuthProviderModel>.value(_FakeAuthProviderModel_1(
          this,
          Invocation.method(
            #signInWithApple,
            [],
          ),
        )),
      ) as _i13.Future<_i3.AuthProviderModel>);
  @override
  _i4.AuthModel getAuthState() => (super.noSuchMethod(
        Invocation.method(
          #getAuthState,
          [],
        ),
        returnValue: _FakeAuthModel_2(
          this,
          Invocation.method(
            #getAuthState,
            [],
          ),
        ),
      ) as _i4.AuthModel);
}

/// A class which mocks [MAuthenticationContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockMAuthenticationContract extends _i1.Mock
    implements _i12.MAuthenticationContract {
  MockMAuthenticationContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i5.Either<_i14.Failure, _i15.AuthProviderEntity>>
      googleSignIn() => (super.noSuchMethod(
            Invocation.method(
              #googleSignIn,
              [],
            ),
            returnValue: _i13.Future<
                    _i5.Either<_i14.Failure, _i15.AuthProviderEntity>>.value(
                _FakeEither_3<_i14.Failure, _i15.AuthProviderEntity>(
              this,
              Invocation.method(
                #googleSignIn,
                [],
              ),
            )),
          ) as _i13.Future<_i5.Either<_i14.Failure, _i15.AuthProviderEntity>>);
  @override
  _i13.Future<_i5.Either<_i14.Failure, _i15.AuthProviderEntity>>
      appleSignIn() => (super.noSuchMethod(
            Invocation.method(
              #appleSignIn,
              [],
            ),
            returnValue: _i13.Future<
                    _i5.Either<_i14.Failure, _i15.AuthProviderEntity>>.value(
                _FakeEither_3<_i14.Failure, _i15.AuthProviderEntity>(
              this,
              Invocation.method(
                #appleSignIn,
                [],
              ),
            )),
          ) as _i13.Future<_i5.Either<_i14.Failure, _i15.AuthProviderEntity>>);
  @override
  _i6.AuthEntity getAuthState() => (super.noSuchMethod(
        Invocation.method(
          #getAuthState,
          [],
        ),
        returnValue: _FakeAuthEntity_4(
          this,
          Invocation.method(
            #getAuthState,
            [],
          ),
        ),
      ) as _i6.AuthEntity);
}

/// A class which mocks [MSignInWithGoogle].
///
/// See the documentation for Mockito's code generation for more information.
class MockMSignInWithGoogle extends _i1.Mock implements _i12.MSignInWithGoogle {
  MockMSignInWithGoogle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.AuthenticationContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeAuthenticationContract_5(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i7.AuthenticationContract);
  @override
  _i13.Future<_i5.Either<_i14.Failure, _i15.AuthProviderEntity>> call(
          _i16.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i13.Future<
                _i5.Either<_i14.Failure, _i15.AuthProviderEntity>>.value(
            _FakeEither_3<_i14.Failure, _i15.AuthProviderEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i13.Future<_i5.Either<_i14.Failure, _i15.AuthProviderEntity>>);
}

/// A class which mocks [MSignInWithApple].
///
/// See the documentation for Mockito's code generation for more information.
class MockMSignInWithApple extends _i1.Mock implements _i12.MSignInWithApple {
  MockMSignInWithApple() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.AuthenticationContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeAuthenticationContract_5(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i7.AuthenticationContract);
  @override
  _i13.Future<_i5.Either<_i14.Failure, _i15.AuthProviderEntity>> call(
          _i16.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i13.Future<
                _i5.Either<_i14.Failure, _i15.AuthProviderEntity>>.value(
            _FakeEither_3<_i14.Failure, _i15.AuthProviderEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i13.Future<_i5.Either<_i14.Failure, _i15.AuthProviderEntity>>);
}

/// A class which mocks [MGetAuthState].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetAuthState extends _i1.Mock implements _i12.MGetAuthState {
  MockMGetAuthState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.AuthenticationContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeAuthenticationContract_5(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i7.AuthenticationContract);
  @override
  _i6.AuthEntity call(_i16.NoParams? params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _FakeAuthEntity_4(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        ),
      ) as _i6.AuthEntity);
}

/// A class which mocks [MGetAuthProviderStateStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetAuthProviderStateStore extends _i1.Mock
    implements _i12.MGetAuthProviderStateStore {
  MockMGetAuthProviderStateStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.SignInWithApple get appleSignInLogic => (super.noSuchMethod(
        Invocation.getter(#appleSignInLogic),
        returnValue: _FakeSignInWithApple_6(
          this,
          Invocation.getter(#appleSignInLogic),
        ),
      ) as _i8.SignInWithApple);
  @override
  _i9.SignInWithGoogle get googleSignInLogic => (super.noSuchMethod(
        Invocation.getter(#googleSignInLogic),
        returnValue: _FakeSignInWithGoogle_7(
          this,
          Invocation.getter(#googleSignInLogic),
        ),
      ) as _i9.SignInWithGoogle);
  @override
  _i17.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i17.StoreState.initial,
      ) as _i17.StoreState);
  @override
  set state(_i17.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
  @override
  _i10.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_8(
          this,
          Invocation.getter(#context),
        ),
      ) as _i10.ReactiveContext);
  @override
  _i13.Future<_i5.Either<_i14.Failure, _i15.AuthProviderEntity>> call(
          _i18.AuthProvider? authProvider) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [authProvider],
        ),
        returnValue: _i13.Future<
                _i5.Either<_i14.Failure, _i15.AuthProviderEntity>>.value(
            _FakeEither_3<_i14.Failure, _i15.AuthProviderEntity>(
          this,
          Invocation.method(
            #call,
            [authProvider],
          ),
        )),
      ) as _i13.Future<_i5.Either<_i14.Failure, _i15.AuthProviderEntity>>);
}

/// A class which mocks [MGetAuthStateStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMGetAuthStateStore extends _i1.Mock
    implements _i12.MGetAuthStateStore {
  MockMGetAuthStateStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.GetAuthState get getAuthState => (super.noSuchMethod(
        Invocation.getter(#getAuthState),
        returnValue: _FakeGetAuthState_9(
          this,
          Invocation.getter(#getAuthState),
        ),
      ) as _i11.GetAuthState);
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
  @override
  _i10.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_8(
          this,
          Invocation.getter(#context),
        ),
      ) as _i10.ReactiveContext);
  @override
  _i13.Stream<bool> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i13.Stream<bool>.empty(),
      ) as _i13.Stream<bool>);
}
