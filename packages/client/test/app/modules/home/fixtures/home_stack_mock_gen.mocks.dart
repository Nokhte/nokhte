// Mocks generated by Mockito 5.4.4 from annotations
// in nokhte/test/app/modules/home/fixtures/home_stack_mock_gen.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i20;

import 'package:dartz/dartz.dart' as _i7;
import 'package:mobx/mobx.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i26;
import 'package:nokhte/app/core/error/failure.dart' as _i21;
import 'package:nokhte/app/core/interfaces/logic.dart' as _i22;
import 'package:nokhte/app/core/mobx/base_future_store.dart' as _i10;
import 'package:nokhte/app/core/mobx/store_state.dart' as _i25;
import 'package:nokhte/app/core/modules/deep_links/constants/types/deep_link_types.dart'
    as _i28;
import 'package:nokhte/app/core/modules/deep_links/domain/domain.dart' as _i14;
import 'package:nokhte/app/core/modules/deep_links/mobx/mobx.dart' as _i16;
import 'package:nokhte/app/core/modules/delete_unconsecrated_collaborations/domain/domain.dart'
    as _i17;
import 'package:nokhte/app/core/modules/delete_unconsecrated_collaborations/mobx/delete_unconsecrated_collaborations_coordinator.dart'
    as _i30;
import 'package:nokhte/app/core/modules/user_information/domain/domain.dart'
    as _i13;
import 'package:nokhte/app/core/modules/user_information/mobx/mobx.dart'
    as _i12;
import 'package:nokhte/app/core/widgets/widgets.dart' as _i15;
import 'package:nokhte/app/modules/collaboration/presentation/presentation.dart'
    as _i18;
import 'package:nokhte/app/modules/home/data/sources/home_remote_source.dart'
    as _i19;
import 'package:nokhte/app/modules/home/domain/contracts/home_contract.dart'
    as _i8;
import 'package:nokhte/app/modules/home/domain/domain.dart' as _i9;
import 'package:nokhte/app/modules/home/domain/entities/entities.dart' as _i23;
import 'package:nokhte/app/modules/home/presentation/mobx/coordinators/home_screen_widgets_coordinator.dart'
    as _i29;
import 'package:nokhte/app/modules/home/presentation/mobx/main/add_name_to_database_store.dart'
    as _i24;
import 'package:nokhte/app/modules/home/presentation/mobx/main/get_existing_collaborations_info_store.dart'
    as _i27;
import 'package:nokhte_backend/tables/existing_collaborations.dart' as _i3;
import 'package:nokhte_backend/tables/finished_collaborative_documents.dart'
    as _i5;
import 'package:nokhte_backend/tables/p2p_perspectives_tracking.dart' as _i4;
import 'package:nokhte_backend/tables/user_names.dart' as _i6;
import 'package:supabase_flutter/supabase_flutter.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSupabaseClient_0 extends _i1.SmartFake
    implements _i2.SupabaseClient {
  _FakeSupabaseClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExistingCollaborationsQueries_1 extends _i1.SmartFake
    implements _i3.ExistingCollaborationsQueries {
  _FakeExistingCollaborationsQueries_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeP2PPerspectivesTrackingQueries_2 extends _i1.SmartFake
    implements _i4.P2PPerspectivesTrackingQueries {
  _FakeP2PPerspectivesTrackingQueries_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFinishedCollaborativeDocumentsQueries_3 extends _i1.SmartFake
    implements _i5.FinishedCollaborativeDocumentsQueries {
  _FakeFinishedCollaborativeDocumentsQueries_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserNamesQueries_4 extends _i1.SmartFake
    implements _i6.UserNamesQueries {
  _FakeUserNamesQueries_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_5<L, R> extends _i1.SmartFake implements _i7.Either<L, R> {
  _FakeEither_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeContract_6 extends _i1.SmartFake implements _i8.HomeContract {
  _FakeHomeContract_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddNameToDatabase_7 extends _i1.SmartFake
    implements _i9.AddNameToDatabase {
  _FakeAddNameToDatabase_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseFutureStore_8<T> extends _i1.SmartFake
    implements _i10.BaseFutureStore<T> {
  _FakeBaseFutureStore_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_9 extends _i1.SmartFake
    implements _i11.ReactiveContext {
  _FakeReactiveContext_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetExistingCollaborationsInfo_10 extends _i1.SmartFake
    implements _i9.GetExistingCollaborationsInfo {
  _FakeGetExistingCollaborationsInfo_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetUserInfoStore_11 extends _i1.SmartFake
    implements _i12.GetUserInfoStore {
  _FakeGetUserInfoStore_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateHasGoneThroughInvitationFlow_12 extends _i1.SmartFake
    implements _i13.UpdateHasGoneThroughInvitationFlow {
  _FakeUpdateHasGoneThroughInvitationFlow_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateHasSentAnInvitation_13 extends _i1.SmartFake
    implements _i13.UpdateHasSentAnInvitation {
  _FakeUpdateHasSentAnInvitation_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateWantsToRepeatInvitationFlow_14 extends _i1.SmartFake
    implements _i13.UpdateWantsToRepeatInvitationFlow {
  _FakeUpdateWantsToRepeatInvitationFlow_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserInformationContract_15 extends _i1.SmartFake
    implements _i13.UserInformationContract {
  _FakeUserInformationContract_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeepLinksContract_16 extends _i1.SmartFake
    implements _i14.DeepLinksContract {
  _FakeDeepLinksContract_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeListenForOpenedDeepLink_17 extends _i1.SmartFake
    implements _i14.ListenForOpenedDeepLink {
  _FakeListenForOpenedDeepLink_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterpretNokhteSessionDeepLink_18 extends _i1.SmartFake
    implements _i14.InterpretNokhteSessionDeepLink {
  _FakeInterpretNokhteSessionDeepLink_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserInformationCoordinator_19 extends _i1.SmartFake
    implements _i12.UserInformationCoordinator {
  _FakeUserInformationCoordinator_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterpretCollaboratorCodeDeepLink_20 extends _i1.SmartFake
    implements _i14.InterpretCollaboratorCodeDeepLink {
  _FakeInterpretCollaboratorCodeDeepLink_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObservableStream_21<T> extends _i1.SmartFake
    implements _i11.ObservableStream<T> {
  _FakeObservableStream_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObservableMap_22<K, V> extends _i1.SmartFake
    implements _i11.ObservableMap<K, V> {
  _FakeObservableMap_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNokhteBlurStore_23 extends _i1.SmartFake
    implements _i15.NokhteBlurStore {
  _FakeNokhteBlurStore_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBeachWavesStore_24 extends _i1.SmartFake
    implements _i15.BeachWavesStore {
  _FakeBeachWavesStore_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWifiDisconnectOverlayStore_25 extends _i1.SmartFake
    implements _i15.WifiDisconnectOverlayStore {
  _FakeWifiDisconnectOverlayStore_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGestureCrossStore_26 extends _i1.SmartFake
    implements _i15.GestureCrossStore {
  _FakeGestureCrossStore_26(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSmartTextStore_27 extends _i1.SmartFake
    implements _i15.SmartTextStore {
  _FakeSmartTextStore_27(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetDeepLinkURL_28 extends _i1.SmartFake
    implements _i14.GetDeepLinkURL {
  _FakeGetDeepLinkURL_28(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSendDeepLink_29 extends _i1.SmartFake implements _i14.SendDeepLink {
  _FakeSendDeepLink_29(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeListenForOpenedDeepLinkStore_30 extends _i1.SmartFake
    implements _i16.ListenForOpenedDeepLinkStore {
  _FakeListenForOpenedDeepLinkStore_30(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserJourneyInfoEntity_31 extends _i1.SmartFake
    implements _i13.UserJourneyInfoEntity {
  _FakeUserJourneyInfoEntity_31(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetUserInfo_32 extends _i1.SmartFake implements _i13.GetUserInfo {
  _FakeGetUserInfo_32(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollaboratorInfo_33 extends _i1.SmartFake
    implements _i3.CollaboratorInfo {
  _FakeCollaboratorInfo_33(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteActiveNokhteSession_34 extends _i1.SmartFake
    implements _i17.DeleteActiveNokhteSession {
  _FakeDeleteActiveNokhteSession_34(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteCapsuleArrangement_35 extends _i1.SmartFake
    implements _i17.DeleteCapsuleArrangement {
  _FakeDeleteCapsuleArrangement_35(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteCollaborativeDocument_36 extends _i1.SmartFake
    implements _i17.DeleteCollaborativeDocument {
  _FakeDeleteCollaborativeDocument_36(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteSchedulingSession_37 extends _i1.SmartFake
    implements _i17.DeleteSchedulingSession {
  _FakeDeleteSchedulingSession_37(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteTheCollaboration_38 extends _i1.SmartFake
    implements _i17.DeleteTheCollaboration {
  _FakeDeleteTheCollaboration_38(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteSoloDocument_39 extends _i1.SmartFake
    implements _i17.DeleteSoloDocument {
  _FakeDeleteSoloDocument_39(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCheckIfCollaboratorHasDeletedArtifacts_40 extends _i1.SmartFake
    implements _i17.CheckIfCollaboratorHasDeletedArtifacts {
  _FakeCheckIfCollaboratorHasDeletedArtifacts_40(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCheckForUnconsecratedCollaboration_41 extends _i1.SmartFake
    implements _i17.CheckForUnconsecratedCollaboration {
  _FakeCheckForUnconsecratedCollaboration_41(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollaborationLogicCoordinator_42 extends _i1.SmartFake
    implements _i18.CollaborationLogicCoordinator {
  _FakeCollaborationLogicCoordinator_42(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateHasDeletedArtifacts_43 extends _i1.SmartFake
    implements _i17.UpdateHasDeletedArtifacts {
  _FakeUpdateHasDeletedArtifacts_43(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeRemoteSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRemoteSourceImpl extends _i1.Mock
    implements _i19.HomeRemoteSourceImpl {
  @override
  _i2.SupabaseClient get supabase => (super.noSuchMethod(
        Invocation.getter(#supabase),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#supabase),
        ),
        returnValueForMissingStub: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#supabase),
        ),
      ) as _i2.SupabaseClient);

  @override
  _i3.ExistingCollaborationsQueries get existingCollaborationsQueries =>
      (super.noSuchMethod(
        Invocation.getter(#existingCollaborationsQueries),
        returnValue: _FakeExistingCollaborationsQueries_1(
          this,
          Invocation.getter(#existingCollaborationsQueries),
        ),
        returnValueForMissingStub: _FakeExistingCollaborationsQueries_1(
          this,
          Invocation.getter(#existingCollaborationsQueries),
        ),
      ) as _i3.ExistingCollaborationsQueries);

  @override
  _i4.P2PPerspectivesTrackingQueries get perspectivesQueries =>
      (super.noSuchMethod(
        Invocation.getter(#perspectivesQueries),
        returnValue: _FakeP2PPerspectivesTrackingQueries_2(
          this,
          Invocation.getter(#perspectivesQueries),
        ),
        returnValueForMissingStub: _FakeP2PPerspectivesTrackingQueries_2(
          this,
          Invocation.getter(#perspectivesQueries),
        ),
      ) as _i4.P2PPerspectivesTrackingQueries);

  @override
  _i5.FinishedCollaborativeDocumentsQueries
      get finishedCollaborativeP2PPurposeDocumentsQueries =>
          (super.noSuchMethod(
            Invocation.getter(#finishedCollaborativeP2PPurposeDocumentsQueries),
            returnValue: _FakeFinishedCollaborativeDocumentsQueries_3(
              this,
              Invocation.getter(
                  #finishedCollaborativeP2PPurposeDocumentsQueries),
            ),
            returnValueForMissingStub:
                _FakeFinishedCollaborativeDocumentsQueries_3(
              this,
              Invocation.getter(
                  #finishedCollaborativeP2PPurposeDocumentsQueries),
            ),
          ) as _i5.FinishedCollaborativeDocumentsQueries);

  @override
  _i6.UserNamesQueries get userNamesQueries => (super.noSuchMethod(
        Invocation.getter(#userNamesQueries),
        returnValue: _FakeUserNamesQueries_4(
          this,
          Invocation.getter(#userNamesQueries),
        ),
        returnValueForMissingStub: _FakeUserNamesQueries_4(
          this,
          Invocation.getter(#userNamesQueries),
        ),
      ) as _i6.UserNamesQueries);

  @override
  _i20.Future<List<dynamic>> addNamesToDatabase({String? theName = r''}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNamesToDatabase,
          [],
          {#theName: theName},
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);

  @override
  _i20.Future<List<dynamic>> checkIfTheyHaveACollaboration() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfTheyHaveACollaboration,
          [],
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);

  @override
  _i20.Future<List<dynamic>> checkIfTheyHaveDonePerspectives() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfTheyHaveDonePerspectives,
          [],
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);

  @override
  _i20.Future<List<dynamic>> checkIfTheyHaveCommittedAPurpose() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfTheyHaveCommittedAPurpose,
          [],
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);

  @override
  _i20.Future<List<dynamic>> updateHasGoneThroughInvitationFlow(
          bool? hasGoneThroughInvitationFlowParam) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHasGoneThroughInvitationFlow,
          [hasGoneThroughInvitationFlowParam],
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);

  @override
  _i20.Future<List<dynamic>> updateHasSentAnInvitation(
          bool? hasSentAnInvitationParam) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHasSentAnInvitation,
          [hasSentAnInvitationParam],
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);

  @override
  _i20.Future<List<dynamic>> getUserInfo() => (super.noSuchMethod(
        Invocation.method(
          #getUserInfo,
          [],
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);
}

/// A class which mocks [HomeContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeContract extends _i1.Mock implements _i8.HomeContract {
  @override
  _i20.Future<_i7.Either<_i21.Failure, bool>> addNameToDatabase(
          _i22.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNameToDatabase,
          [params],
        ),
        returnValue: _i20.Future<_i7.Either<_i21.Failure, bool>>.value(
            _FakeEither_5<_i21.Failure, bool>(
          this,
          Invocation.method(
            #addNameToDatabase,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<_i7.Either<_i21.Failure, bool>>.value(
                _FakeEither_5<_i21.Failure, bool>(
          this,
          Invocation.method(
            #addNameToDatabase,
            [params],
          ),
        )),
      ) as _i20.Future<_i7.Either<_i21.Failure, bool>>);

  @override
  _i20.Future<_i7.Either<_i21.Failure, _i23.ExistingCollaborationsInfoEntity>>
      getExistingCollaborationInfo(_i22.NoParams? params) =>
          (super.noSuchMethod(
            Invocation.method(
              #getExistingCollaborationInfo,
              [params],
            ),
            returnValue: _i20.Future<
                _i7.Either<_i21.Failure,
                    _i23.ExistingCollaborationsInfoEntity>>.value(_FakeEither_5<
                _i21.Failure, _i23.ExistingCollaborationsInfoEntity>(
              this,
              Invocation.method(
                #getExistingCollaborationInfo,
                [params],
              ),
            )),
            returnValueForMissingStub: _i20.Future<
                _i7.Either<_i21.Failure,
                    _i23.ExistingCollaborationsInfoEntity>>.value(_FakeEither_5<
                _i21.Failure, _i23.ExistingCollaborationsInfoEntity>(
              this,
              Invocation.method(
                #getExistingCollaborationInfo,
                [params],
              ),
            )),
          ) as _i20.Future<
              _i7.Either<_i21.Failure, _i23.ExistingCollaborationsInfoEntity>>);
}

/// A class which mocks [HomeRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRemoteSource extends _i1.Mock implements _i19.HomeRemoteSource {
  @override
  _i20.Future<List<dynamic>> addNamesToDatabase({String? theName = r''}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNamesToDatabase,
          [],
          {#theName: theName},
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);

  @override
  _i20.Future<List<dynamic>> checkIfTheyHaveACollaboration() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfTheyHaveACollaboration,
          [],
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);

  @override
  _i20.Future<List<dynamic>> checkIfTheyHaveDonePerspectives() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfTheyHaveDonePerspectives,
          [],
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);

  @override
  _i20.Future<List<dynamic>> checkIfTheyHaveCommittedAPurpose() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfTheyHaveCommittedAPurpose,
          [],
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);

  @override
  _i20.Future<List<dynamic>> updateHasSentAnInvitation(
          bool? hasSentAnInvitationParam) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHasSentAnInvitation,
          [hasSentAnInvitationParam],
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);

  @override
  _i20.Future<List<dynamic>> updateHasGoneThroughInvitationFlow(
          bool? hasGoneThroughInvitationFlowParam) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHasGoneThroughInvitationFlow,
          [hasGoneThroughInvitationFlowParam],
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);

  @override
  _i20.Future<List<dynamic>> getUserInfo() => (super.noSuchMethod(
        Invocation.method(
          #getUserInfo,
          [],
        ),
        returnValue: _i20.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i20.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i20.Future<List<dynamic>>);
}

/// A class which mocks [AddNameToDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddNameToDatabase extends _i1.Mock implements _i9.AddNameToDatabase {
  @override
  _i8.HomeContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeHomeContract_6(
          this,
          Invocation.getter(#contract),
        ),
        returnValueForMissingStub: _FakeHomeContract_6(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i8.HomeContract);

  @override
  _i20.Future<_i7.Either<_i21.Failure, bool>> call(_i22.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i20.Future<_i7.Either<_i21.Failure, bool>>.value(
            _FakeEither_5<_i21.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<_i7.Either<_i21.Failure, bool>>.value(
                _FakeEither_5<_i21.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i20.Future<_i7.Either<_i21.Failure, bool>>);
}

/// A class which mocks [AddNameToDatabaseStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddNameToDatabaseStore extends _i1.Mock
    implements _i24.AddNameToDatabaseStore {
  @override
  _i9.AddNameToDatabase get logic => (super.noSuchMethod(
        Invocation.getter(#logic),
        returnValue: _FakeAddNameToDatabase_7(
          this,
          Invocation.getter(#logic),
        ),
        returnValueForMissingStub: _FakeAddNameToDatabase_7(
          this,
          Invocation.getter(#logic),
        ),
      ) as _i9.AddNameToDatabase);

  @override
  bool get nameIsAdded => (super.noSuchMethod(
        Invocation.getter(#nameIsAdded),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set nameIsAdded(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #nameIsAdded,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.BaseFutureStore<bool> get futureStore => (super.noSuchMethod(
        Invocation.getter(#futureStore),
        returnValue: _FakeBaseFutureStore_8<bool>(
          this,
          Invocation.getter(#futureStore),
        ),
        returnValueForMissingStub: _FakeBaseFutureStore_8<bool>(
          this,
          Invocation.getter(#futureStore),
        ),
      ) as _i10.BaseFutureStore<bool>);

  @override
  set futureStore(_i10.BaseFutureStore<bool>? value) => super.noSuchMethod(
        Invocation.setter(
          #futureStore,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i25.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i25.StoreState.initial,
        returnValueForMissingStub: _i25.StoreState.initial,
      ) as _i25.StoreState);

  @override
  set state(_i25.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
      ) as _i11.ReactiveContext);

  @override
  void stateOrErrorUpdater(_i7.Either<_i21.Failure, bool>? result) =>
      super.noSuchMethod(
        Invocation.method(
          #stateOrErrorUpdater,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<void> call(_i22.NoParams? params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  String mapFailureToMessage(_i21.Failure? failure) => (super.noSuchMethod(
        Invocation.method(
          #mapFailureToMessage,
          [failure],
        ),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
      ) as String);

  @override
  dynamic errorUpdater(_i21.Failure? failure) => super.noSuchMethod(
        Invocation.method(
          #errorUpdater,
          [failure],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetExistingCollaborationsInfoStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetExistingCollaborationsInfoStore extends _i1.Mock
    implements _i27.GetExistingCollaborationsInfoStore {
  @override
  bool get hasACollaboration => (super.noSuchMethod(
        Invocation.getter(#hasACollaboration),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasACollaboration(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasACollaboration,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasDonePerspectives => (super.noSuchMethod(
        Invocation.getter(#hasDonePerspectives),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasDonePerspectives(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasDonePerspectives,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasCommittedAPurpose => (super.noSuchMethod(
        Invocation.getter(#hasCommittedAPurpose),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasCommittedAPurpose(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasCommittedAPurpose,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.GetExistingCollaborationsInfo get logic => (super.noSuchMethod(
        Invocation.getter(#logic),
        returnValue: _FakeGetExistingCollaborationsInfo_10(
          this,
          Invocation.getter(#logic),
        ),
        returnValueForMissingStub: _FakeGetExistingCollaborationsInfo_10(
          this,
          Invocation.getter(#logic),
        ),
      ) as _i9.GetExistingCollaborationsInfo);

  @override
  _i10.BaseFutureStore<_i23.ExistingCollaborationsInfoEntity> get futureStore =>
      (super.noSuchMethod(
        Invocation.getter(#futureStore),
        returnValue:
            _FakeBaseFutureStore_8<_i23.ExistingCollaborationsInfoEntity>(
          this,
          Invocation.getter(#futureStore),
        ),
        returnValueForMissingStub:
            _FakeBaseFutureStore_8<_i23.ExistingCollaborationsInfoEntity>(
          this,
          Invocation.getter(#futureStore),
        ),
      ) as _i10.BaseFutureStore<_i23.ExistingCollaborationsInfoEntity>);

  @override
  set futureStore(
          _i10.BaseFutureStore<_i23.ExistingCollaborationsInfoEntity>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #futureStore,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i25.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i25.StoreState.initial,
        returnValueForMissingStub: _i25.StoreState.initial,
      ) as _i25.StoreState);

  @override
  set state(_i25.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i11.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
      ) as _i11.ReactiveContext);

  @override
  void stateOrErrorUpdater(
          _i7.Either<_i21.Failure, _i23.ExistingCollaborationsInfoEntity>?
              result) =>
      super.noSuchMethod(
        Invocation.method(
          #stateOrErrorUpdater,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<void> call(_i22.NoParams? params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  String mapFailureToMessage(_i21.Failure? failure) => (super.noSuchMethod(
        Invocation.method(
          #mapFailureToMessage,
          [failure],
        ),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
      ) as String);

  @override
  dynamic errorUpdater(_i21.Failure? failure) => super.noSuchMethod(
        Invocation.method(
          #errorUpdater,
          [failure],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UserInformationCoordinator].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInformationCoordinator extends _i1.Mock
    implements _i12.UserInformationCoordinator {
  @override
  _i12.GetUserInfoStore get getUserInfoStore => (super.noSuchMethod(
        Invocation.getter(#getUserInfoStore),
        returnValue: _FakeGetUserInfoStore_11(
          this,
          Invocation.getter(#getUserInfoStore),
        ),
        returnValueForMissingStub: _FakeGetUserInfoStore_11(
          this,
          Invocation.getter(#getUserInfoStore),
        ),
      ) as _i12.GetUserInfoStore);

  @override
  _i13.UpdateHasGoneThroughInvitationFlow
      get updateHasGoneThroughInvitationFlowLogic => (super.noSuchMethod(
            Invocation.getter(#updateHasGoneThroughInvitationFlowLogic),
            returnValue: _FakeUpdateHasGoneThroughInvitationFlow_12(
              this,
              Invocation.getter(#updateHasGoneThroughInvitationFlowLogic),
            ),
            returnValueForMissingStub:
                _FakeUpdateHasGoneThroughInvitationFlow_12(
              this,
              Invocation.getter(#updateHasGoneThroughInvitationFlowLogic),
            ),
          ) as _i13.UpdateHasGoneThroughInvitationFlow);

  @override
  _i13.UpdateHasSentAnInvitation get updateHasSentAnInvitationLogic =>
      (super.noSuchMethod(
        Invocation.getter(#updateHasSentAnInvitationLogic),
        returnValue: _FakeUpdateHasSentAnInvitation_13(
          this,
          Invocation.getter(#updateHasSentAnInvitationLogic),
        ),
        returnValueForMissingStub: _FakeUpdateHasSentAnInvitation_13(
          this,
          Invocation.getter(#updateHasSentAnInvitationLogic),
        ),
      ) as _i13.UpdateHasSentAnInvitation);

  @override
  _i13.UpdateWantsToRepeatInvitationFlow
      get updateWantsToRepeatInvitationFlowLogic => (super.noSuchMethod(
            Invocation.getter(#updateWantsToRepeatInvitationFlowLogic),
            returnValue: _FakeUpdateWantsToRepeatInvitationFlow_14(
              this,
              Invocation.getter(#updateWantsToRepeatInvitationFlowLogic),
            ),
            returnValueForMissingStub:
                _FakeUpdateWantsToRepeatInvitationFlow_14(
              this,
              Invocation.getter(#updateWantsToRepeatInvitationFlowLogic),
            ),
          ) as _i13.UpdateWantsToRepeatInvitationFlow);

  @override
  bool get invitationFlowCompletionStatusIsUpdated => (super.noSuchMethod(
        Invocation.getter(#invitationFlowCompletionStatusIsUpdated),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set invitationFlowCompletionStatusIsUpdated(bool? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #invitationFlowCompletionStatusIsUpdated,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get invitationSendStatusIsUpdated => (super.noSuchMethod(
        Invocation.getter(#invitationSendStatusIsUpdated),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set invitationSendStatusIsUpdated(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #invitationSendStatusIsUpdated,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get invitationRepeatStatusIsUpdated => (super.noSuchMethod(
        Invocation.getter(#invitationRepeatStatusIsUpdated),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set invitationRepeatStatusIsUpdated(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #invitationRepeatStatusIsUpdated,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i25.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i25.StoreState.initial,
        returnValueForMissingStub: _i25.StoreState.initial,
      ) as _i25.StoreState);

  @override
  set state(_i25.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
      ) as _i11.ReactiveContext);

  @override
  _i20.Future<dynamic> updateHasGoneThroughInvitationFlow(bool? newStatus) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHasGoneThroughInvitationFlow,
          [newStatus],
        ),
        returnValue: _i20.Future<dynamic>.value(),
        returnValueForMissingStub: _i20.Future<dynamic>.value(),
      ) as _i20.Future<dynamic>);

  @override
  _i20.Future<dynamic> updateHasSentAnInvitation(bool? newStatus) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHasSentAnInvitation,
          [newStatus],
        ),
        returnValue: _i20.Future<dynamic>.value(),
        returnValueForMissingStub: _i20.Future<dynamic>.value(),
      ) as _i20.Future<dynamic>);

  @override
  _i20.Future<dynamic> updateWantsToRepeatInvitationFlow(bool? newStatus) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateWantsToRepeatInvitationFlow,
          [newStatus],
        ),
        returnValue: _i20.Future<dynamic>.value(),
        returnValueForMissingStub: _i20.Future<dynamic>.value(),
      ) as _i20.Future<dynamic>);

  @override
  String mapFailureToMessage(_i21.Failure? failure) => (super.noSuchMethod(
        Invocation.method(
          #mapFailureToMessage,
          [failure],
        ),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
      ) as String);

  @override
  dynamic errorUpdater(_i21.Failure? failure) => super.noSuchMethod(
        Invocation.method(
          #errorUpdater,
          [failure],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stateOrErrorUpdater(_i7.Either<_i21.Failure, dynamic>? result) =>
      super.noSuchMethod(
        Invocation.method(
          #stateOrErrorUpdater,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<void> call(dynamic params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);
}

/// A class which mocks [UpdateWantsToRepeatInvitationFlow].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateWantsToRepeatInvitationFlow extends _i1.Mock
    implements _i13.UpdateWantsToRepeatInvitationFlow {
  @override
  _i13.UserInformationContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeUserInformationContract_15(
          this,
          Invocation.getter(#contract),
        ),
        returnValueForMissingStub: _FakeUserInformationContract_15(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i13.UserInformationContract);

  @override
  _i20.Future<_i7.Either<_i21.Failure, bool>> call(bool? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i20.Future<_i7.Either<_i21.Failure, bool>>.value(
            _FakeEither_5<_i21.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<_i7.Either<_i21.Failure, bool>>.value(
                _FakeEither_5<_i21.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i20.Future<_i7.Either<_i21.Failure, bool>>);
}

/// A class which mocks [GetDeepLinkURL].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetDeepLinkURL extends _i1.Mock implements _i14.GetDeepLinkURL {
  @override
  _i14.DeepLinksContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeDeepLinksContract_16(
          this,
          Invocation.getter(#contract),
        ),
        returnValueForMissingStub: _FakeDeepLinksContract_16(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i14.DeepLinksContract);

  @override
  _i20.Future<_i7.Either<_i21.Failure, String>> call(
          _i28.DeepLinkTypes? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i20.Future<_i7.Either<_i21.Failure, String>>.value(
            _FakeEither_5<_i21.Failure, String>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<_i7.Either<_i21.Failure, String>>.value(
                _FakeEither_5<_i21.Failure, String>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i20.Future<_i7.Either<_i21.Failure, String>>);
}

/// A class which mocks [ListenForOpenedDeepLinkStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockListenForOpenedDeepLinkStore extends _i1.Mock
    implements _i16.ListenForOpenedDeepLinkStore {
  @override
  _i14.ListenForOpenedDeepLink get logic => (super.noSuchMethod(
        Invocation.getter(#logic),
        returnValue: _FakeListenForOpenedDeepLink_17(
          this,
          Invocation.getter(#logic),
        ),
        returnValueForMissingStub: _FakeListenForOpenedDeepLink_17(
          this,
          Invocation.getter(#logic),
        ),
      ) as _i14.ListenForOpenedDeepLink);

  @override
  _i14.InterpretNokhteSessionDeepLink get interpretNokhteSessionDeepLink =>
      (super.noSuchMethod(
        Invocation.getter(#interpretNokhteSessionDeepLink),
        returnValue: _FakeInterpretNokhteSessionDeepLink_18(
          this,
          Invocation.getter(#interpretNokhteSessionDeepLink),
        ),
        returnValueForMissingStub: _FakeInterpretNokhteSessionDeepLink_18(
          this,
          Invocation.getter(#interpretNokhteSessionDeepLink),
        ),
      ) as _i14.InterpretNokhteSessionDeepLink);

  @override
  _i12.UserInformationCoordinator get userInformation => (super.noSuchMethod(
        Invocation.getter(#userInformation),
        returnValue: _FakeUserInformationCoordinator_19(
          this,
          Invocation.getter(#userInformation),
        ),
        returnValueForMissingStub: _FakeUserInformationCoordinator_19(
          this,
          Invocation.getter(#userInformation),
        ),
      ) as _i12.UserInformationCoordinator);

  @override
  _i14.InterpretCollaboratorCodeDeepLink get interpretCollaboratorCode =>
      (super.noSuchMethod(
        Invocation.getter(#interpretCollaboratorCode),
        returnValue: _FakeInterpretCollaboratorCodeDeepLink_20(
          this,
          Invocation.getter(#interpretCollaboratorCode),
        ),
        returnValueForMissingStub: _FakeInterpretCollaboratorCodeDeepLink_20(
          this,
          Invocation.getter(#interpretCollaboratorCode),
        ),
      ) as _i14.InterpretCollaboratorCodeDeepLink);

  @override
  _i11.ObservableStream<Map<dynamic, dynamic>> get deepLinkSream =>
      (super.noSuchMethod(
        Invocation.getter(#deepLinkSream),
        returnValue: _FakeObservableStream_21<Map<dynamic, dynamic>>(
          this,
          Invocation.getter(#deepLinkSream),
        ),
        returnValueForMissingStub:
            _FakeObservableStream_21<Map<dynamic, dynamic>>(
          this,
          Invocation.getter(#deepLinkSream),
        ),
      ) as _i11.ObservableStream<Map<dynamic, dynamic>>);

  @override
  set deepLinkSream(_i11.ObservableStream<Map<dynamic, dynamic>>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #deepLinkSream,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  set path(String? value) => super.noSuchMethod(
        Invocation.setter(
          #path,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.ObservableMap<dynamic, dynamic> get additionalMetadata =>
      (super.noSuchMethod(
        Invocation.getter(#additionalMetadata),
        returnValue: _FakeObservableMap_22<dynamic, dynamic>(
          this,
          Invocation.getter(#additionalMetadata),
        ),
        returnValueForMissingStub: _FakeObservableMap_22<dynamic, dynamic>(
          this,
          Invocation.getter(#additionalMetadata),
        ),
      ) as _i11.ObservableMap<dynamic, dynamic>);

  @override
  set additionalMetadata(_i11.ObservableMap<dynamic, dynamic>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #additionalMetadata,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
        returnValueForMissingStub: <Object?>[],
      ) as List<Object?>);

  @override
  _i11.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
      ) as _i11.ReactiveContext);

  @override
  dynamic call(_i22.NoParams? params) => super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SendDeepLink].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendDeepLink extends _i1.Mock implements _i14.SendDeepLink {
  @override
  _i14.DeepLinksContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeDeepLinksContract_16(
          this,
          Invocation.getter(#contract),
        ),
        returnValueForMissingStub: _FakeDeepLinksContract_16(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i14.DeepLinksContract);

  @override
  _i20.Future<_i7.Either<_i21.Failure, bool>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i20.Future<_i7.Either<_i21.Failure, bool>>.value(
            _FakeEither_5<_i21.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<_i7.Either<_i21.Failure, bool>>.value(
                _FakeEither_5<_i21.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i20.Future<_i7.Either<_i21.Failure, bool>>);
}

/// A class which mocks [HomeScreenWidgetsCoordinator].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeScreenWidgetsCoordinator extends _i1.Mock
    implements _i29.HomeScreenWidgetsCoordinator {
  @override
  _i15.NokhteBlurStore get nokhteBlur => (super.noSuchMethod(
        Invocation.getter(#nokhteBlur),
        returnValue: _FakeNokhteBlurStore_23(
          this,
          Invocation.getter(#nokhteBlur),
        ),
        returnValueForMissingStub: _FakeNokhteBlurStore_23(
          this,
          Invocation.getter(#nokhteBlur),
        ),
      ) as _i15.NokhteBlurStore);

  @override
  _i15.BeachWavesStore get beachWaves => (super.noSuchMethod(
        Invocation.getter(#beachWaves),
        returnValue: _FakeBeachWavesStore_24(
          this,
          Invocation.getter(#beachWaves),
        ),
        returnValueForMissingStub: _FakeBeachWavesStore_24(
          this,
          Invocation.getter(#beachWaves),
        ),
      ) as _i15.BeachWavesStore);

  @override
  _i15.WifiDisconnectOverlayStore get wifiDisconnectOverlay =>
      (super.noSuchMethod(
        Invocation.getter(#wifiDisconnectOverlay),
        returnValue: _FakeWifiDisconnectOverlayStore_25(
          this,
          Invocation.getter(#wifiDisconnectOverlay),
        ),
        returnValueForMissingStub: _FakeWifiDisconnectOverlayStore_25(
          this,
          Invocation.getter(#wifiDisconnectOverlay),
        ),
      ) as _i15.WifiDisconnectOverlayStore);

  @override
  _i15.GestureCrossStore get gestureCross => (super.noSuchMethod(
        Invocation.getter(#gestureCross),
        returnValue: _FakeGestureCrossStore_26(
          this,
          Invocation.getter(#gestureCross),
        ),
        returnValueForMissingStub: _FakeGestureCrossStore_26(
          this,
          Invocation.getter(#gestureCross),
        ),
      ) as _i15.GestureCrossStore);

  @override
  _i15.SmartTextStore get primarySmartText => (super.noSuchMethod(
        Invocation.getter(#primarySmartText),
        returnValue: _FakeSmartTextStore_27(
          this,
          Invocation.getter(#primarySmartText),
        ),
        returnValueForMissingStub: _FakeSmartTextStore_27(
          this,
          Invocation.getter(#primarySmartText),
        ),
      ) as _i15.SmartTextStore);

  @override
  bool get hasCompletedInvitationFlow => (super.noSuchMethod(
        Invocation.getter(#hasCompletedInvitationFlow),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasCompletedInvitationFlow(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasCompletedInvitationFlow,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get wantsToRepeatInvitationFlow => (super.noSuchMethod(
        Invocation.getter(#wantsToRepeatInvitationFlow),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set wantsToRepeatInvitationFlow(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #wantsToRepeatInvitationFlow,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isEnteringNokhteSession => (super.noSuchMethod(
        Invocation.getter(#isEnteringNokhteSession),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isEnteringNokhteSession(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isEnteringNokhteSession,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasSwipedUp => (super.noSuchMethod(
        Invocation.getter(#hasSwipedUp),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasSwipedUp(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasSwipedUp,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get gracePeriodHasExpired => (super.noSuchMethod(
        Invocation.getter(#gracePeriodHasExpired),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set gracePeriodHasExpired(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #gracePeriodHasExpired,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasInitiatedBlur => (super.noSuchMethod(
        Invocation.getter(#hasInitiatedBlur),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasInitiatedBlur(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasInitiatedBlur,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isDoubleTriggeringWindDown => (super.noSuchMethod(
        Invocation.getter(#isDoubleTriggeringWindDown),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isDoubleTriggeringWindDown(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isDoubleTriggeringWindDown,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isDisconnected => (super.noSuchMethod(
        Invocation.getter(#isDisconnected),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isDisconnected(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isDisconnected,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i11.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
      ) as _i11.ReactiveContext);

  @override
  dynamic postInvitationFlowConstructor({required bool? hasDoneASession}) =>
      super.noSuchMethod(
        Invocation.method(
          #postInvitationFlowConstructor,
          [],
          {#hasDoneASession: hasDoneASession},
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic prepForNavigation({bool? excludeUnBlur = false}) =>
      super.noSuchMethod(
        Invocation.method(
          #prepForNavigation,
          [],
          {#excludeUnBlur: excludeUnBlur},
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic onGestureCrossTap(Function? repeatTheFlow) => super.noSuchMethod(
        Invocation.method(
          #onGestureCrossTap,
          [repeatTheFlow],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic initReactors(Function? repeatTheFlow) => super.noSuchMethod(
        Invocation.method(
          #initReactors,
          [repeatTheFlow],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic gestureCrossTapReactor(Function? repeatTheFlow) => super.noSuchMethod(
        Invocation.method(
          #gestureCrossTapReactor,
          [repeatTheFlow],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic beachWavesMovieStatusReactor(
    Function? onShoreToOceanDiveComplete,
    Function? onShoreToVibrantBlueComplete,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #beachWavesMovieStatusReactor,
          [
            onShoreToOceanDiveComplete,
            onShoreToVibrantBlueComplete,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setIsDisconnected(bool? newValue) => super.noSuchMethod(
        Invocation.method(
          #setIsDisconnected,
          [newValue],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DeepLinksCoordinator].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeepLinksCoordinator extends _i1.Mock
    implements _i16.DeepLinksCoordinator {
  @override
  _i14.GetDeepLinkURL get getDeepLinkUrlLogic => (super.noSuchMethod(
        Invocation.getter(#getDeepLinkUrlLogic),
        returnValue: _FakeGetDeepLinkURL_28(
          this,
          Invocation.getter(#getDeepLinkUrlLogic),
        ),
        returnValueForMissingStub: _FakeGetDeepLinkURL_28(
          this,
          Invocation.getter(#getDeepLinkUrlLogic),
        ),
      ) as _i14.GetDeepLinkURL);

  @override
  _i14.SendDeepLink get sendDeepLinkLogic => (super.noSuchMethod(
        Invocation.getter(#sendDeepLinkLogic),
        returnValue: _FakeSendDeepLink_29(
          this,
          Invocation.getter(#sendDeepLinkLogic),
        ),
        returnValueForMissingStub: _FakeSendDeepLink_29(
          this,
          Invocation.getter(#sendDeepLinkLogic),
        ),
      ) as _i14.SendDeepLink);

  @override
  _i16.ListenForOpenedDeepLinkStore get listenForOpenedDeepLinkStore =>
      (super.noSuchMethod(
        Invocation.getter(#listenForOpenedDeepLinkStore),
        returnValue: _FakeListenForOpenedDeepLinkStore_30(
          this,
          Invocation.getter(#listenForOpenedDeepLinkStore),
        ),
        returnValueForMissingStub: _FakeListenForOpenedDeepLinkStore_30(
          this,
          Invocation.getter(#listenForOpenedDeepLinkStore),
        ),
      ) as _i16.ListenForOpenedDeepLinkStore);

  @override
  String get link => (super.noSuchMethod(
        Invocation.getter(#link),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.getter(#link),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.getter(#link),
        ),
      ) as String);

  @override
  set link(String? value) => super.noSuchMethod(
        Invocation.setter(
          #link,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isShared => (super.noSuchMethod(
        Invocation.getter(#isShared),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isShared(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isShared,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i25.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i25.StoreState.initial,
        returnValueForMissingStub: _i25.StoreState.initial,
      ) as _i25.StoreState);

  @override
  set state(_i25.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i11.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
      ) as _i11.ReactiveContext);

  @override
  _i20.Future<dynamic> getDeepLink(_i28.DeepLinkTypes? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDeepLink,
          [params],
        ),
        returnValue: _i20.Future<dynamic>.value(),
        returnValueForMissingStub: _i20.Future<dynamic>.value(),
      ) as _i20.Future<dynamic>);

  @override
  _i20.Future<dynamic> share(String? link) => (super.noSuchMethod(
        Invocation.method(
          #share,
          [link],
        ),
        returnValue: _i20.Future<dynamic>.value(),
        returnValueForMissingStub: _i20.Future<dynamic>.value(),
      ) as _i20.Future<dynamic>);

  @override
  String mapFailureToMessage(_i21.Failure? failure) => (super.noSuchMethod(
        Invocation.method(
          #mapFailureToMessage,
          [failure],
        ),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
      ) as String);

  @override
  dynamic errorUpdater(_i21.Failure? failure) => super.noSuchMethod(
        Invocation.method(
          #errorUpdater,
          [failure],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stateOrErrorUpdater(_i7.Either<_i21.Failure, dynamic>? result) =>
      super.noSuchMethod(
        Invocation.method(
          #stateOrErrorUpdater,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<void> call(dynamic params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);
}

/// A class which mocks [GetUserInfoStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserInfoStore extends _i1.Mock implements _i12.GetUserInfoStore {
  @override
  bool get hasGoneThroughInvitationFlow => (super.noSuchMethod(
        Invocation.getter(#hasGoneThroughInvitationFlow),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasGoneThroughInvitationFlow(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasGoneThroughInvitationFlow,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasSentAnInvitation => (super.noSuchMethod(
        Invocation.getter(#hasSentAnInvitation),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasSentAnInvitation(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasSentAnInvitation,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get wantsToRepeatInvitationFlow => (super.noSuchMethod(
        Invocation.getter(#wantsToRepeatInvitationFlow),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set wantsToRepeatInvitationFlow(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #wantsToRepeatInvitationFlow,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasDoneASession => (super.noSuchMethod(
        Invocation.getter(#hasDoneASession),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasDoneASession(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasDoneASession,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get userUID => (super.noSuchMethod(
        Invocation.getter(#userUID),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.getter(#userUID),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.getter(#userUID),
        ),
      ) as String);

  @override
  set userUID(String? value) => super.noSuchMethod(
        Invocation.setter(
          #userUID,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.UserJourneyInfoEntity get entity => (super.noSuchMethod(
        Invocation.getter(#entity),
        returnValue: _FakeUserJourneyInfoEntity_31(
          this,
          Invocation.getter(#entity),
        ),
        returnValueForMissingStub: _FakeUserJourneyInfoEntity_31(
          this,
          Invocation.getter(#entity),
        ),
      ) as _i13.UserJourneyInfoEntity);

  @override
  set entity(_i13.UserJourneyInfoEntity? value) => super.noSuchMethod(
        Invocation.setter(
          #entity,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.GetUserInfo get logic => (super.noSuchMethod(
        Invocation.getter(#logic),
        returnValue: _FakeGetUserInfo_32(
          this,
          Invocation.getter(#logic),
        ),
        returnValueForMissingStub: _FakeGetUserInfo_32(
          this,
          Invocation.getter(#logic),
        ),
      ) as _i13.GetUserInfo);

  @override
  _i10.BaseFutureStore<_i13.UserJourneyInfoEntity> get futureStore =>
      (super.noSuchMethod(
        Invocation.getter(#futureStore),
        returnValue: _FakeBaseFutureStore_8<_i13.UserJourneyInfoEntity>(
          this,
          Invocation.getter(#futureStore),
        ),
        returnValueForMissingStub:
            _FakeBaseFutureStore_8<_i13.UserJourneyInfoEntity>(
          this,
          Invocation.getter(#futureStore),
        ),
      ) as _i10.BaseFutureStore<_i13.UserJourneyInfoEntity>);

  @override
  set futureStore(_i10.BaseFutureStore<_i13.UserJourneyInfoEntity>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #futureStore,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i25.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i25.StoreState.initial,
        returnValueForMissingStub: _i25.StoreState.initial,
      ) as _i25.StoreState);

  @override
  set state(_i25.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i11.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
      ) as _i11.ReactiveContext);

  @override
  void stateOrErrorUpdater(
          _i7.Either<_i21.Failure, _i13.UserJourneyInfoEntity>? result) =>
      super.noSuchMethod(
        Invocation.method(
          #stateOrErrorUpdater,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.Future<void> call(_i22.NoParams? params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  String mapFailureToMessage(_i21.Failure? failure) => (super.noSuchMethod(
        Invocation.method(
          #mapFailureToMessage,
          [failure],
        ),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
      ) as String);

  @override
  dynamic errorUpdater(_i21.Failure? failure) => super.noSuchMethod(
        Invocation.method(
          #errorUpdater,
          [failure],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UpdateHasGoneThroughInvitationFlow].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateHasGoneThroughInvitationFlow extends _i1.Mock
    implements _i13.UpdateHasGoneThroughInvitationFlow {
  @override
  _i13.UserInformationContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeUserInformationContract_15(
          this,
          Invocation.getter(#contract),
        ),
        returnValueForMissingStub: _FakeUserInformationContract_15(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i13.UserInformationContract);

  @override
  _i20.Future<_i7.Either<_i21.Failure, bool>> call(bool? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i20.Future<_i7.Either<_i21.Failure, bool>>.value(
            _FakeEither_5<_i21.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<_i7.Either<_i21.Failure, bool>>.value(
                _FakeEither_5<_i21.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i20.Future<_i7.Either<_i21.Failure, bool>>);
}

/// A class which mocks [UpdateHasSentAnInvitation].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateHasSentAnInvitation extends _i1.Mock
    implements _i13.UpdateHasSentAnInvitation {
  @override
  _i13.UserInformationContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeUserInformationContract_15(
          this,
          Invocation.getter(#contract),
        ),
        returnValueForMissingStub: _FakeUserInformationContract_15(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i13.UserInformationContract);

  @override
  _i20.Future<_i7.Either<_i21.Failure, bool>> call(bool? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i20.Future<_i7.Either<_i21.Failure, bool>>.value(
            _FakeEither_5<_i21.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i20.Future<_i7.Either<_i21.Failure, bool>>.value(
                _FakeEither_5<_i21.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i20.Future<_i7.Either<_i21.Failure, bool>>);
}

/// A class which mocks [DeleteUnconsecratedCollaborationsCoordinator].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteUnconsecratedCollaborationsCoordinator extends _i1.Mock
    implements _i30.DeleteUnconsecratedCollaborationsCoordinator {
  @override
  bool get collaborationIsDeleted => (super.noSuchMethod(
        Invocation.getter(#collaborationIsDeleted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set collaborationIsDeleted(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #collaborationIsDeleted,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get soloDocumentIsDeleted => (super.noSuchMethod(
        Invocation.getter(#soloDocumentIsDeleted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set soloDocumentIsDeleted(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #soloDocumentIsDeleted,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get capsuleArrangementIsDeleted => (super.noSuchMethod(
        Invocation.getter(#capsuleArrangementIsDeleted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set capsuleArrangementIsDeleted(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #capsuleArrangementIsDeleted,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get collaborativeDocumentIsDeleted => (super.noSuchMethod(
        Invocation.getter(#collaborativeDocumentIsDeleted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set collaborativeDocumentIsDeleted(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #collaborativeDocumentIsDeleted,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get userHasDeletedArtifacts => (super.noSuchMethod(
        Invocation.getter(#userHasDeletedArtifacts),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set userHasDeletedArtifacts(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #userHasDeletedArtifacts,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get schedulingSessionIsDeleted => (super.noSuchMethod(
        Invocation.getter(#schedulingSessionIsDeleted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set schedulingSessionIsDeleted(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #schedulingSessionIsDeleted,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasAnUnconsecratedCollabooration => (super.noSuchMethod(
        Invocation.getter(#hasAnUnconsecratedCollabooration),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasAnUnconsecratedCollabooration(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasAnUnconsecratedCollabooration,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get collaboratorHasDeletedArtifacts => (super.noSuchMethod(
        Invocation.getter(#collaboratorHasDeletedArtifacts),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set collaboratorHasDeletedArtifacts(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #collaboratorHasDeletedArtifacts,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.CollaboratorInfo get collaboratorInfo => (super.noSuchMethod(
        Invocation.getter(#collaboratorInfo),
        returnValue: _FakeCollaboratorInfo_33(
          this,
          Invocation.getter(#collaboratorInfo),
        ),
        returnValueForMissingStub: _FakeCollaboratorInfo_33(
          this,
          Invocation.getter(#collaboratorInfo),
        ),
      ) as _i3.CollaboratorInfo);

  @override
  set collaboratorInfo(_i3.CollaboratorInfo? value) => super.noSuchMethod(
        Invocation.setter(
          #collaboratorInfo,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.DeleteActiveNokhteSession get deleteActiveNokhteSession =>
      (super.noSuchMethod(
        Invocation.getter(#deleteActiveNokhteSession),
        returnValue: _FakeDeleteActiveNokhteSession_34(
          this,
          Invocation.getter(#deleteActiveNokhteSession),
        ),
        returnValueForMissingStub: _FakeDeleteActiveNokhteSession_34(
          this,
          Invocation.getter(#deleteActiveNokhteSession),
        ),
      ) as _i17.DeleteActiveNokhteSession);

  @override
  _i17.DeleteCapsuleArrangement get deleteCapsuleArrangementLogic =>
      (super.noSuchMethod(
        Invocation.getter(#deleteCapsuleArrangementLogic),
        returnValue: _FakeDeleteCapsuleArrangement_35(
          this,
          Invocation.getter(#deleteCapsuleArrangementLogic),
        ),
        returnValueForMissingStub: _FakeDeleteCapsuleArrangement_35(
          this,
          Invocation.getter(#deleteCapsuleArrangementLogic),
        ),
      ) as _i17.DeleteCapsuleArrangement);

  @override
  _i17.DeleteCollaborativeDocument get deleteCollaborativeDocumentLogic =>
      (super.noSuchMethod(
        Invocation.getter(#deleteCollaborativeDocumentLogic),
        returnValue: _FakeDeleteCollaborativeDocument_36(
          this,
          Invocation.getter(#deleteCollaborativeDocumentLogic),
        ),
        returnValueForMissingStub: _FakeDeleteCollaborativeDocument_36(
          this,
          Invocation.getter(#deleteCollaborativeDocumentLogic),
        ),
      ) as _i17.DeleteCollaborativeDocument);

  @override
  _i17.DeleteSchedulingSession get deleteSchedulingSessionLogic =>
      (super.noSuchMethod(
        Invocation.getter(#deleteSchedulingSessionLogic),
        returnValue: _FakeDeleteSchedulingSession_37(
          this,
          Invocation.getter(#deleteSchedulingSessionLogic),
        ),
        returnValueForMissingStub: _FakeDeleteSchedulingSession_37(
          this,
          Invocation.getter(#deleteSchedulingSessionLogic),
        ),
      ) as _i17.DeleteSchedulingSession);

  @override
  _i17.DeleteTheCollaboration get deleteTheCollaborationLogic =>
      (super.noSuchMethod(
        Invocation.getter(#deleteTheCollaborationLogic),
        returnValue: _FakeDeleteTheCollaboration_38(
          this,
          Invocation.getter(#deleteTheCollaborationLogic),
        ),
        returnValueForMissingStub: _FakeDeleteTheCollaboration_38(
          this,
          Invocation.getter(#deleteTheCollaborationLogic),
        ),
      ) as _i17.DeleteTheCollaboration);

  @override
  _i17.DeleteSoloDocument get deleteSoloDocumentLogic => (super.noSuchMethod(
        Invocation.getter(#deleteSoloDocumentLogic),
        returnValue: _FakeDeleteSoloDocument_39(
          this,
          Invocation.getter(#deleteSoloDocumentLogic),
        ),
        returnValueForMissingStub: _FakeDeleteSoloDocument_39(
          this,
          Invocation.getter(#deleteSoloDocumentLogic),
        ),
      ) as _i17.DeleteSoloDocument);

  @override
  _i17.CheckIfCollaboratorHasDeletedArtifacts
      get checkIfCollaboratorHasDeletedArtifactsLogic => (super.noSuchMethod(
            Invocation.getter(#checkIfCollaboratorHasDeletedArtifactsLogic),
            returnValue: _FakeCheckIfCollaboratorHasDeletedArtifacts_40(
              this,
              Invocation.getter(#checkIfCollaboratorHasDeletedArtifactsLogic),
            ),
            returnValueForMissingStub:
                _FakeCheckIfCollaboratorHasDeletedArtifacts_40(
              this,
              Invocation.getter(#checkIfCollaboratorHasDeletedArtifactsLogic),
            ),
          ) as _i17.CheckIfCollaboratorHasDeletedArtifacts);

  @override
  _i17.CheckForUnconsecratedCollaboration
      get checkForUnconsecratedCollaborationLogic => (super.noSuchMethod(
            Invocation.getter(#checkForUnconsecratedCollaborationLogic),
            returnValue: _FakeCheckForUnconsecratedCollaboration_41(
              this,
              Invocation.getter(#checkForUnconsecratedCollaborationLogic),
            ),
            returnValueForMissingStub:
                _FakeCheckForUnconsecratedCollaboration_41(
              this,
              Invocation.getter(#checkForUnconsecratedCollaborationLogic),
            ),
          ) as _i17.CheckForUnconsecratedCollaboration);

  @override
  _i18.CollaborationLogicCoordinator get collaborationLogicCoordinator =>
      (super.noSuchMethod(
        Invocation.getter(#collaborationLogicCoordinator),
        returnValue: _FakeCollaborationLogicCoordinator_42(
          this,
          Invocation.getter(#collaborationLogicCoordinator),
        ),
        returnValueForMissingStub: _FakeCollaborationLogicCoordinator_42(
          this,
          Invocation.getter(#collaborationLogicCoordinator),
        ),
      ) as _i18.CollaborationLogicCoordinator);

  @override
  _i17.UpdateHasDeletedArtifacts get updateHasDeletedArtifactsLogic =>
      (super.noSuchMethod(
        Invocation.getter(#updateHasDeletedArtifactsLogic),
        returnValue: _FakeUpdateHasDeletedArtifacts_43(
          this,
          Invocation.getter(#updateHasDeletedArtifactsLogic),
        ),
        returnValueForMissingStub: _FakeUpdateHasDeletedArtifacts_43(
          this,
          Invocation.getter(#updateHasDeletedArtifactsLogic),
        ),
      ) as _i17.UpdateHasDeletedArtifacts);

  @override
  _i25.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i25.StoreState.initial,
        returnValueForMissingStub: _i25.StoreState.initial,
      ) as _i25.StoreState);

  @override
  set state(_i25.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i11.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_9(
          this,
          Invocation.getter(#context),
        ),
      ) as _i11.ReactiveContext);

  @override
  _i20.Future<dynamic> checkIfCollaboratorHasDeletedArtifacts() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfCollaboratorHasDeletedArtifacts,
          [],
        ),
        returnValue: _i20.Future<dynamic>.value(),
        returnValueForMissingStub: _i20.Future<dynamic>.value(),
      ) as _i20.Future<dynamic>);

  @override
  _i20.Future<dynamic> checkForUnconsecratedCollaboration() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkForUnconsecratedCollaboration,
          [],
        ),
        returnValue: _i20.Future<dynamic>.value(),
        returnValueForMissingStub: _i20.Future<dynamic>.value(),
      ) as _i20.Future<dynamic>);

  @override
  _i20.Future<dynamic> deleteTheCollaboration() => (super.noSuchMethod(
        Invocation.method(
          #deleteTheCollaboration,
          [],
        ),
        returnValue: _i20.Future<dynamic>.value(),
        returnValueForMissingStub: _i20.Future<dynamic>.value(),
      ) as _i20.Future<dynamic>);

  @override
  _i20.Future<dynamic> deleteSoloDocuments() => (super.noSuchMethod(
        Invocation.method(
          #deleteSoloDocuments,
          [],
        ),
        returnValue: _i20.Future<dynamic>.value(),
        returnValueForMissingStub: _i20.Future<dynamic>.value(),
      ) as _i20.Future<dynamic>);

  @override
  _i20.Future<dynamic> updateHasDeletedArtifacts() => (super.noSuchMethod(
        Invocation.method(
          #updateHasDeletedArtifacts,
          [],
        ),
        returnValue: _i20.Future<dynamic>.value(),
        returnValueForMissingStub: _i20.Future<dynamic>.value(),
      ) as _i20.Future<dynamic>);

  @override
  _i20.Future<void> call(_i22.NoParams? params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i20.Future<void>.value(),
        returnValueForMissingStub: _i20.Future<void>.value(),
      ) as _i20.Future<void>);

  @override
  String mapFailureToMessage(_i21.Failure? failure) => (super.noSuchMethod(
        Invocation.method(
          #mapFailureToMessage,
          [failure],
        ),
        returnValue: _i26.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
        returnValueForMissingStub: _i26.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
      ) as String);

  @override
  dynamic errorUpdater(_i21.Failure? failure) => super.noSuchMethod(
        Invocation.method(
          #errorUpdater,
          [failure],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stateOrErrorUpdater(_i7.Either<_i21.Failure, bool>? result) =>
      super.noSuchMethod(
        Invocation.method(
          #stateOrErrorUpdater,
          [result],
        ),
        returnValueForMissingStub: null,
      );
}
