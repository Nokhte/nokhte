// Mocks generated by Mockito 5.4.4 from annotations
// in nokhte/test/app/modules/home/fixtures/home_stack_mock_gen.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i19;

import 'package:dartz/dartz.dart' as _i10;
import 'package:flutter_branch_sdk/flutter_branch_sdk.dart' as _i8;
import 'package:mobx/mobx.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i24;
import 'package:nokhte/app/core/error/failure.dart' as _i20;
import 'package:nokhte/app/core/interfaces/logic.dart' as _i21;
import 'package:nokhte/app/core/mobx/base_future_store.dart' as _i14;
import 'package:nokhte/app/core/mobx/store_state.dart' as _i23;
import 'package:nokhte/app/core/modules/user_information/mobx/mobx.dart'
    as _i16;
import 'package:nokhte/app/core/types/types.dart' as _i28;
import 'package:nokhte/app/core/widgets/widgets.dart' as _i17;
import 'package:nokhte/app/modules/home/data/sources/home_remote_source.dart'
    as _i18;
import 'package:nokhte/app/modules/home/domain/contracts/home_contract.dart'
    as _i11;
import 'package:nokhte/app/modules/home/domain/domain.dart' as _i12;
import 'package:nokhte/app/modules/home/domain/entities/entities.dart' as _i13;
import 'package:nokhte/app/modules/home/presentation/mobx/coordinators/home_screen_widgets_coordinator.dart'
    as _i27;
import 'package:nokhte/app/modules/home/presentation/mobx/main/add_name_to_database_store.dart'
    as _i22;
import 'package:nokhte/app/modules/home/presentation/mobx/main/get_collaborator_phrase_store.dart'
    as _i26;
import 'package:nokhte/app/modules/home/presentation/mobx/main/get_existing_collaborations_info_store.dart'
    as _i25;
import 'package:nokhte_backend/tables/collaborator_phrases.dart' as _i6;
import 'package:nokhte_backend/tables/existing_collaborations.dart' as _i3;
import 'package:nokhte_backend/tables/finished_collaborative_documents.dart'
    as _i5;
import 'package:nokhte_backend/tables/p2p_perspectives_tracking.dart' as _i4;
import 'package:nokhte_backend/tables/user_names.dart' as _i7;
import 'package:share_plus/share_plus.dart' as _i9;
import 'package:supabase_flutter/supabase_flutter.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSupabaseClient_0 extends _i1.SmartFake
    implements _i2.SupabaseClient {
  _FakeSupabaseClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExistingCollaborationsQueries_1 extends _i1.SmartFake
    implements _i3.ExistingCollaborationsQueries {
  _FakeExistingCollaborationsQueries_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeP2PPerspectivesTrackingQueries_2 extends _i1.SmartFake
    implements _i4.P2PPerspectivesTrackingQueries {
  _FakeP2PPerspectivesTrackingQueries_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFinishedCollaborativeDocumentsQueries_3 extends _i1.SmartFake
    implements _i5.FinishedCollaborativeDocumentsQueries {
  _FakeFinishedCollaborativeDocumentsQueries_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollaboratorPhraseQueries_4 extends _i1.SmartFake
    implements _i6.CollaboratorPhraseQueries {
  _FakeCollaboratorPhraseQueries_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserNamesQueries_5 extends _i1.SmartFake
    implements _i7.UserNamesQueries {
  _FakeUserNamesQueries_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBranchResponse_6<T> extends _i1.SmartFake
    implements _i8.BranchResponse<T> {
  _FakeBranchResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeShareResult_7 extends _i1.SmartFake implements _i9.ShareResult {
  _FakeShareResult_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_8<L, R> extends _i1.SmartFake implements _i10.Either<L, R> {
  _FakeEither_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeContract_9 extends _i1.SmartFake implements _i11.HomeContract {
  _FakeHomeContract_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddNameToDatabase_10 extends _i1.SmartFake
    implements _i12.AddNameToDatabase {
  _FakeAddNameToDatabase_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNameCreationStatusEntity_11 extends _i1.SmartFake
    implements _i13.NameCreationStatusEntity {
  _FakeNameCreationStatusEntity_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseFutureStore_12<T> extends _i1.SmartFake
    implements _i14.BaseFutureStore<T> {
  _FakeBaseFutureStore_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_13 extends _i1.SmartFake
    implements _i15.ReactiveContext {
  _FakeReactiveContext_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetExistingCollaborationsInfo_14 extends _i1.SmartFake
    implements _i12.GetExistingCollaborationsInfo {
  _FakeGetExistingCollaborationsInfo_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetUserInfoStore_15 extends _i1.SmartFake
    implements _i16.GetUserInfoStore {
  _FakeGetUserInfoStore_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateHasGoneThroughInvitationFlowStore_16 extends _i1.SmartFake
    implements _i16.UpdateHasGoneThroughInvitationFlowStore {
  _FakeUpdateHasGoneThroughInvitationFlowStore_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateHasSentAnInvitationStore_17 extends _i1.SmartFake
    implements _i16.UpdateHasSentAnInvitationStore {
  _FakeUpdateHasSentAnInvitationStore_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetCollaboratorPhrase_18 extends _i1.SmartFake
    implements _i12.GetCollaboratorPhrase {
  _FakeGetCollaboratorPhrase_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollaboratorPhraseEntity_19 extends _i1.SmartFake
    implements _i13.CollaboratorPhraseEntity {
  _FakeCollaboratorPhraseEntity_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTimeAlignmentModelCoordinator_20 extends _i1.SmartFake
    implements _i17.TimeAlignmentModelCoordinator {
  _FakeTimeAlignmentModelCoordinator_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNokhteBlurStore_21 extends _i1.SmartFake
    implements _i17.NokhteBlurStore {
  _FakeNokhteBlurStore_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBeachWavesStore_22 extends _i1.SmartFake
    implements _i17.BeachWavesStore {
  _FakeBeachWavesStore_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWifiDisconnectOverlayStore_23 extends _i1.SmartFake
    implements _i17.WifiDisconnectOverlayStore {
  _FakeWifiDisconnectOverlayStore_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGestureCrossStore_24 extends _i1.SmartFake
    implements _i17.GestureCrossStore {
  _FakeGestureCrossStore_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSmartTextStore_25 extends _i1.SmartFake
    implements _i17.SmartTextStore {
  _FakeSmartTextStore_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeRemoteSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRemoteSourceImpl extends _i1.Mock
    implements _i18.HomeRemoteSourceImpl {
  @override
  _i2.SupabaseClient get supabase => (super.noSuchMethod(
        Invocation.getter(#supabase),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#supabase),
        ),
        returnValueForMissingStub: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#supabase),
        ),
      ) as _i2.SupabaseClient);

  @override
  _i3.ExistingCollaborationsQueries get existingCollaborationsQueries =>
      (super.noSuchMethod(
        Invocation.getter(#existingCollaborationsQueries),
        returnValue: _FakeExistingCollaborationsQueries_1(
          this,
          Invocation.getter(#existingCollaborationsQueries),
        ),
        returnValueForMissingStub: _FakeExistingCollaborationsQueries_1(
          this,
          Invocation.getter(#existingCollaborationsQueries),
        ),
      ) as _i3.ExistingCollaborationsQueries);

  @override
  _i4.P2PPerspectivesTrackingQueries get perspectivesQueries =>
      (super.noSuchMethod(
        Invocation.getter(#perspectivesQueries),
        returnValue: _FakeP2PPerspectivesTrackingQueries_2(
          this,
          Invocation.getter(#perspectivesQueries),
        ),
        returnValueForMissingStub: _FakeP2PPerspectivesTrackingQueries_2(
          this,
          Invocation.getter(#perspectivesQueries),
        ),
      ) as _i4.P2PPerspectivesTrackingQueries);

  @override
  _i5.FinishedCollaborativeDocumentsQueries
      get finishedCollaborativeP2PPurposeDocumentsQueries =>
          (super.noSuchMethod(
            Invocation.getter(#finishedCollaborativeP2PPurposeDocumentsQueries),
            returnValue: _FakeFinishedCollaborativeDocumentsQueries_3(
              this,
              Invocation.getter(
                  #finishedCollaborativeP2PPurposeDocumentsQueries),
            ),
            returnValueForMissingStub:
                _FakeFinishedCollaborativeDocumentsQueries_3(
              this,
              Invocation.getter(
                  #finishedCollaborativeP2PPurposeDocumentsQueries),
            ),
          ) as _i5.FinishedCollaborativeDocumentsQueries);

  @override
  _i6.CollaboratorPhraseQueries get collaboratorPhraseQueries =>
      (super.noSuchMethod(
        Invocation.getter(#collaboratorPhraseQueries),
        returnValue: _FakeCollaboratorPhraseQueries_4(
          this,
          Invocation.getter(#collaboratorPhraseQueries),
        ),
        returnValueForMissingStub: _FakeCollaboratorPhraseQueries_4(
          this,
          Invocation.getter(#collaboratorPhraseQueries),
        ),
      ) as _i6.CollaboratorPhraseQueries);

  @override
  _i7.UserNamesQueries get userNamesQueries => (super.noSuchMethod(
        Invocation.getter(#userNamesQueries),
        returnValue: _FakeUserNamesQueries_5(
          this,
          Invocation.getter(#userNamesQueries),
        ),
        returnValueForMissingStub: _FakeUserNamesQueries_5(
          this,
          Invocation.getter(#userNamesQueries),
        ),
      ) as _i7.UserNamesQueries);

  @override
  _i19.Future<List<dynamic>> addNamesToDatabase({String? theName = r''}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNamesToDatabase,
          [],
          {#theName: theName},
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);

  @override
  _i19.Future<List<dynamic>> getCollaboratorPhrase() => (super.noSuchMethod(
        Invocation.method(
          #getCollaboratorPhrase,
          [],
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);

  @override
  _i19.Future<List<dynamic>> checkIfTheyHaveACollaboration() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfTheyHaveACollaboration,
          [],
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);

  @override
  _i19.Future<List<dynamic>> checkIfTheyHaveDonePerspectives() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfTheyHaveDonePerspectives,
          [],
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);

  @override
  _i19.Future<List<dynamic>> checkIfTheyHaveCommittedAPurpose() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfTheyHaveCommittedAPurpose,
          [],
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);

  @override
  _i19.Future<_i8.BranchResponse<dynamic>> getInvitationURL() =>
      (super.noSuchMethod(
        Invocation.method(
          #getInvitationURL,
          [],
        ),
        returnValue: _i19.Future<_i8.BranchResponse<dynamic>>.value(
            _FakeBranchResponse_6<dynamic>(
          this,
          Invocation.method(
            #getInvitationURL,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i19.Future<_i8.BranchResponse<dynamic>>.value(
                _FakeBranchResponse_6<dynamic>(
          this,
          Invocation.method(
            #getInvitationURL,
            [],
          ),
        )),
      ) as _i19.Future<_i8.BranchResponse<dynamic>>);

  @override
  _i19.Future<_i9.ShareResult> shareCollaborationInvitation(
          String? invitationURL) =>
      (super.noSuchMethod(
        Invocation.method(
          #shareCollaborationInvitation,
          [invitationURL],
        ),
        returnValue: _i19.Future<_i9.ShareResult>.value(_FakeShareResult_7(
          this,
          Invocation.method(
            #shareCollaborationInvitation,
            [invitationURL],
          ),
        )),
        returnValueForMissingStub:
            _i19.Future<_i9.ShareResult>.value(_FakeShareResult_7(
          this,
          Invocation.method(
            #shareCollaborationInvitation,
            [invitationURL],
          ),
        )),
      ) as _i19.Future<_i9.ShareResult>);

  @override
  _i19.Future<List<dynamic>> updateHasGoneThroughInvitationFlow(
          bool? hasGoneThroughInvitationFlowParam) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHasGoneThroughInvitationFlow,
          [hasGoneThroughInvitationFlowParam],
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);

  @override
  _i19.Future<List<dynamic>> updateHasSentAnInvitation(
          bool? hasSentAnInvitationParam) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHasSentAnInvitation,
          [hasSentAnInvitationParam],
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);

  @override
  _i19.Future<List<dynamic>> getUserInfo() => (super.noSuchMethod(
        Invocation.method(
          #getUserInfo,
          [],
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);
}

/// A class which mocks [HomeContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeContract extends _i1.Mock implements _i11.HomeContract {
  @override
  _i19.Future<_i10.Either<_i20.Failure, _i13.NameCreationStatusEntity>>
      addNameToDatabase(_i21.NoParams? params) => (super.noSuchMethod(
            Invocation.method(
              #addNameToDatabase,
              [params],
            ),
            returnValue: _i19.Future<
                    _i10
                    .Either<_i20.Failure, _i13.NameCreationStatusEntity>>.value(
                _FakeEither_8<_i20.Failure, _i13.NameCreationStatusEntity>(
              this,
              Invocation.method(
                #addNameToDatabase,
                [params],
              ),
            )),
            returnValueForMissingStub: _i19.Future<
                    _i10
                    .Either<_i20.Failure, _i13.NameCreationStatusEntity>>.value(
                _FakeEither_8<_i20.Failure, _i13.NameCreationStatusEntity>(
              this,
              Invocation.method(
                #addNameToDatabase,
                [params],
              ),
            )),
          ) as _i19.Future<
              _i10.Either<_i20.Failure, _i13.NameCreationStatusEntity>>);

  @override
  _i19.Future<_i10.Either<_i20.Failure, _i13.CollaboratorPhraseEntity>>
      getCollaboratorPhrase(_i21.NoParams? params) => (super.noSuchMethod(
            Invocation.method(
              #getCollaboratorPhrase,
              [params],
            ),
            returnValue: _i19.Future<
                    _i10
                    .Either<_i20.Failure, _i13.CollaboratorPhraseEntity>>.value(
                _FakeEither_8<_i20.Failure, _i13.CollaboratorPhraseEntity>(
              this,
              Invocation.method(
                #getCollaboratorPhrase,
                [params],
              ),
            )),
            returnValueForMissingStub: _i19.Future<
                    _i10
                    .Either<_i20.Failure, _i13.CollaboratorPhraseEntity>>.value(
                _FakeEither_8<_i20.Failure, _i13.CollaboratorPhraseEntity>(
              this,
              Invocation.method(
                #getCollaboratorPhrase,
                [params],
              ),
            )),
          ) as _i19.Future<
              _i10.Either<_i20.Failure, _i13.CollaboratorPhraseEntity>>);

  @override
  _i19.Future<_i10.Either<_i20.Failure, _i13.ExistingCollaborationsInfoEntity>>
      getExistingCollaborationInfo(_i21.NoParams? params) =>
          (super.noSuchMethod(
            Invocation.method(
              #getExistingCollaborationInfo,
              [params],
            ),
            returnValue: _i19.Future<
                _i10.Either<_i20.Failure,
                    _i13.ExistingCollaborationsInfoEntity>>.value(_FakeEither_8<
                _i20.Failure, _i13.ExistingCollaborationsInfoEntity>(
              this,
              Invocation.method(
                #getExistingCollaborationInfo,
                [params],
              ),
            )),
            returnValueForMissingStub: _i19.Future<
                _i10.Either<_i20.Failure,
                    _i13.ExistingCollaborationsInfoEntity>>.value(_FakeEither_8<
                _i20.Failure, _i13.ExistingCollaborationsInfoEntity>(
              this,
              Invocation.method(
                #getExistingCollaborationInfo,
                [params],
              ),
            )),
          ) as _i19.Future<
              _i10
              .Either<_i20.Failure, _i13.ExistingCollaborationsInfoEntity>>);
}

/// A class which mocks [HomeRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRemoteSource extends _i1.Mock implements _i18.HomeRemoteSource {
  @override
  _i19.Future<List<dynamic>> addNamesToDatabase({String? theName = r''}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNamesToDatabase,
          [],
          {#theName: theName},
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);

  @override
  _i19.Future<List<dynamic>> getCollaboratorPhrase() => (super.noSuchMethod(
        Invocation.method(
          #getCollaboratorPhrase,
          [],
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);

  @override
  _i19.Future<List<dynamic>> checkIfTheyHaveACollaboration() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfTheyHaveACollaboration,
          [],
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);

  @override
  _i19.Future<List<dynamic>> checkIfTheyHaveDonePerspectives() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfTheyHaveDonePerspectives,
          [],
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);

  @override
  _i19.Future<List<dynamic>> checkIfTheyHaveCommittedAPurpose() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfTheyHaveCommittedAPurpose,
          [],
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);

  @override
  _i19.Future<_i9.ShareResult> shareCollaborationInvitation(
          String? invitationURL) =>
      (super.noSuchMethod(
        Invocation.method(
          #shareCollaborationInvitation,
          [invitationURL],
        ),
        returnValue: _i19.Future<_i9.ShareResult>.value(_FakeShareResult_7(
          this,
          Invocation.method(
            #shareCollaborationInvitation,
            [invitationURL],
          ),
        )),
        returnValueForMissingStub:
            _i19.Future<_i9.ShareResult>.value(_FakeShareResult_7(
          this,
          Invocation.method(
            #shareCollaborationInvitation,
            [invitationURL],
          ),
        )),
      ) as _i19.Future<_i9.ShareResult>);

  @override
  _i19.Future<_i8.BranchResponse<dynamic>> getInvitationURL() =>
      (super.noSuchMethod(
        Invocation.method(
          #getInvitationURL,
          [],
        ),
        returnValue: _i19.Future<_i8.BranchResponse<dynamic>>.value(
            _FakeBranchResponse_6<dynamic>(
          this,
          Invocation.method(
            #getInvitationURL,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i19.Future<_i8.BranchResponse<dynamic>>.value(
                _FakeBranchResponse_6<dynamic>(
          this,
          Invocation.method(
            #getInvitationURL,
            [],
          ),
        )),
      ) as _i19.Future<_i8.BranchResponse<dynamic>>);

  @override
  _i19.Future<List<dynamic>> updateHasSentAnInvitation(
          bool? hasSentAnInvitationParam) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHasSentAnInvitation,
          [hasSentAnInvitationParam],
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);

  @override
  _i19.Future<List<dynamic>> updateHasGoneThroughInvitationFlow(
          bool? hasGoneThroughInvitationFlowParam) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHasGoneThroughInvitationFlow,
          [hasGoneThroughInvitationFlowParam],
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);

  @override
  _i19.Future<List<dynamic>> getUserInfo() => (super.noSuchMethod(
        Invocation.method(
          #getUserInfo,
          [],
        ),
        returnValue: _i19.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i19.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i19.Future<List<dynamic>>);
}

/// A class which mocks [GetCollaboratorPhrase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCollaboratorPhrase extends _i1.Mock
    implements _i12.GetCollaboratorPhrase {
  @override
  _i11.HomeContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeHomeContract_9(
          this,
          Invocation.getter(#contract),
        ),
        returnValueForMissingStub: _FakeHomeContract_9(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i11.HomeContract);

  @override
  _i19.Future<_i10.Either<_i20.Failure, _i13.CollaboratorPhraseEntity>> call(
          _i21.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i19.Future<
                _i10.Either<_i20.Failure, _i13.CollaboratorPhraseEntity>>.value(
            _FakeEither_8<_i20.Failure, _i13.CollaboratorPhraseEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub: _i19.Future<
                _i10.Either<_i20.Failure, _i13.CollaboratorPhraseEntity>>.value(
            _FakeEither_8<_i20.Failure, _i13.CollaboratorPhraseEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i19
          .Future<_i10.Either<_i20.Failure, _i13.CollaboratorPhraseEntity>>);
}

/// A class which mocks [AddNameToDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddNameToDatabase extends _i1.Mock implements _i12.AddNameToDatabase {
  @override
  _i11.HomeContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeHomeContract_9(
          this,
          Invocation.getter(#contract),
        ),
        returnValueForMissingStub: _FakeHomeContract_9(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i11.HomeContract);

  @override
  _i19.Future<_i10.Either<_i20.Failure, _i13.NameCreationStatusEntity>> call(
          _i21.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i19.Future<
                _i10.Either<_i20.Failure, _i13.NameCreationStatusEntity>>.value(
            _FakeEither_8<_i20.Failure, _i13.NameCreationStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub: _i19.Future<
                _i10.Either<_i20.Failure, _i13.NameCreationStatusEntity>>.value(
            _FakeEither_8<_i20.Failure, _i13.NameCreationStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i19
          .Future<_i10.Either<_i20.Failure, _i13.NameCreationStatusEntity>>);
}

/// A class which mocks [AddNameToDatabaseStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddNameToDatabaseStore extends _i1.Mock
    implements _i22.AddNameToDatabaseStore {
  @override
  _i12.AddNameToDatabase get logic => (super.noSuchMethod(
        Invocation.getter(#logic),
        returnValue: _FakeAddNameToDatabase_10(
          this,
          Invocation.getter(#logic),
        ),
        returnValueForMissingStub: _FakeAddNameToDatabase_10(
          this,
          Invocation.getter(#logic),
        ),
      ) as _i12.AddNameToDatabase);

  @override
  _i13.NameCreationStatusEntity get nameCreationStatus => (super.noSuchMethod(
        Invocation.getter(#nameCreationStatus),
        returnValue: _FakeNameCreationStatusEntity_11(
          this,
          Invocation.getter(#nameCreationStatus),
        ),
        returnValueForMissingStub: _FakeNameCreationStatusEntity_11(
          this,
          Invocation.getter(#nameCreationStatus),
        ),
      ) as _i13.NameCreationStatusEntity);

  @override
  set nameCreationStatus(_i13.NameCreationStatusEntity? _nameCreationStatus) =>
      super.noSuchMethod(
        Invocation.setter(
          #nameCreationStatus,
          _nameCreationStatus,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.BaseFutureStore<_i13.NameCreationStatusEntity> get futureStore =>
      (super.noSuchMethod(
        Invocation.getter(#futureStore),
        returnValue: _FakeBaseFutureStore_12<_i13.NameCreationStatusEntity>(
          this,
          Invocation.getter(#futureStore),
        ),
        returnValueForMissingStub:
            _FakeBaseFutureStore_12<_i13.NameCreationStatusEntity>(
          this,
          Invocation.getter(#futureStore),
        ),
      ) as _i14.BaseFutureStore<_i13.NameCreationStatusEntity>);

  @override
  set futureStore(_i14.BaseFutureStore<_i13.NameCreationStatusEntity>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #futureStore,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i23.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i23.StoreState.initial,
        returnValueForMissingStub: _i23.StoreState.initial,
      ) as _i23.StoreState);

  @override
  set state(_i23.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i24.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
        returnValueForMissingStub: _i24.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_13(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_13(
          this,
          Invocation.getter(#context),
        ),
      ) as _i15.ReactiveContext);

  @override
  void stateOrErrorUpdater(
          _i10.Either<_i20.Failure, _i13.NameCreationStatusEntity>? result) =>
      super.noSuchMethod(
        Invocation.method(
          #stateOrErrorUpdater,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i19.Future<void> call(_i21.NoParams? params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i19.Future<void>.value(),
        returnValueForMissingStub: _i19.Future<void>.value(),
      ) as _i19.Future<void>);

  @override
  String mapFailureToMessage(_i20.Failure? failure) => (super.noSuchMethod(
        Invocation.method(
          #mapFailureToMessage,
          [failure],
        ),
        returnValue: _i24.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
        returnValueForMissingStub: _i24.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
      ) as String);
}

/// A class which mocks [GetExistingCollaborationsInfoStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetExistingCollaborationsInfoStore extends _i1.Mock
    implements _i25.GetExistingCollaborationsInfoStore {
  @override
  bool get hasACollaboration => (super.noSuchMethod(
        Invocation.getter(#hasACollaboration),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasACollaboration(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasACollaboration,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasDonePerspectives => (super.noSuchMethod(
        Invocation.getter(#hasDonePerspectives),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasDonePerspectives(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasDonePerspectives,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasCommittedAPurpose => (super.noSuchMethod(
        Invocation.getter(#hasCommittedAPurpose),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasCommittedAPurpose(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasCommittedAPurpose,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.GetExistingCollaborationsInfo get logic => (super.noSuchMethod(
        Invocation.getter(#logic),
        returnValue: _FakeGetExistingCollaborationsInfo_14(
          this,
          Invocation.getter(#logic),
        ),
        returnValueForMissingStub: _FakeGetExistingCollaborationsInfo_14(
          this,
          Invocation.getter(#logic),
        ),
      ) as _i12.GetExistingCollaborationsInfo);

  @override
  _i14.BaseFutureStore<_i13.ExistingCollaborationsInfoEntity> get futureStore =>
      (super.noSuchMethod(
        Invocation.getter(#futureStore),
        returnValue:
            _FakeBaseFutureStore_12<_i13.ExistingCollaborationsInfoEntity>(
          this,
          Invocation.getter(#futureStore),
        ),
        returnValueForMissingStub:
            _FakeBaseFutureStore_12<_i13.ExistingCollaborationsInfoEntity>(
          this,
          Invocation.getter(#futureStore),
        ),
      ) as _i14.BaseFutureStore<_i13.ExistingCollaborationsInfoEntity>);

  @override
  set futureStore(
          _i14.BaseFutureStore<_i13.ExistingCollaborationsInfoEntity>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #futureStore,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i23.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i23.StoreState.initial,
        returnValueForMissingStub: _i23.StoreState.initial,
      ) as _i23.StoreState);

  @override
  set state(_i23.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i24.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
        returnValueForMissingStub: _i24.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i15.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_13(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_13(
          this,
          Invocation.getter(#context),
        ),
      ) as _i15.ReactiveContext);

  @override
  void stateOrErrorUpdater(
          _i10.Either<_i20.Failure, _i13.ExistingCollaborationsInfoEntity>?
              result) =>
      super.noSuchMethod(
        Invocation.method(
          #stateOrErrorUpdater,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i19.Future<void> call(_i21.NoParams? params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i19.Future<void>.value(),
        returnValueForMissingStub: _i19.Future<void>.value(),
      ) as _i19.Future<void>);

  @override
  String mapFailureToMessage(_i20.Failure? failure) => (super.noSuchMethod(
        Invocation.method(
          #mapFailureToMessage,
          [failure],
        ),
        returnValue: _i24.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
        returnValueForMissingStub: _i24.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
      ) as String);
}

/// A class which mocks [UserInformationCoordinator].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInformationCoordinator extends _i1.Mock
    implements _i16.UserInformationCoordinator {
  @override
  _i16.GetUserInfoStore get getUserInfo => (super.noSuchMethod(
        Invocation.getter(#getUserInfo),
        returnValue: _FakeGetUserInfoStore_15(
          this,
          Invocation.getter(#getUserInfo),
        ),
        returnValueForMissingStub: _FakeGetUserInfoStore_15(
          this,
          Invocation.getter(#getUserInfo),
        ),
      ) as _i16.GetUserInfoStore);

  @override
  _i16.UpdateHasGoneThroughInvitationFlowStore
      get updateHasGoneThroughInvitationFlow => (super.noSuchMethod(
            Invocation.getter(#updateHasGoneThroughInvitationFlow),
            returnValue: _FakeUpdateHasGoneThroughInvitationFlowStore_16(
              this,
              Invocation.getter(#updateHasGoneThroughInvitationFlow),
            ),
            returnValueForMissingStub:
                _FakeUpdateHasGoneThroughInvitationFlowStore_16(
              this,
              Invocation.getter(#updateHasGoneThroughInvitationFlow),
            ),
          ) as _i16.UpdateHasGoneThroughInvitationFlowStore);

  @override
  _i16.UpdateHasSentAnInvitationStore get updateHasSentAnInvitation =>
      (super.noSuchMethod(
        Invocation.getter(#updateHasSentAnInvitation),
        returnValue: _FakeUpdateHasSentAnInvitationStore_17(
          this,
          Invocation.getter(#updateHasSentAnInvitation),
        ),
        returnValueForMissingStub: _FakeUpdateHasSentAnInvitationStore_17(
          this,
          Invocation.getter(#updateHasSentAnInvitation),
        ),
      ) as _i16.UpdateHasSentAnInvitationStore);

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i15.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_13(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_13(
          this,
          Invocation.getter(#context),
        ),
      ) as _i15.ReactiveContext);
}

/// A class which mocks [GetCollaboratorPhraseStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCollaboratorPhraseStore extends _i1.Mock
    implements _i26.GetCollaboratorPhraseStore {
  @override
  _i12.GetCollaboratorPhrase get logic => (super.noSuchMethod(
        Invocation.getter(#logic),
        returnValue: _FakeGetCollaboratorPhrase_18(
          this,
          Invocation.getter(#logic),
        ),
        returnValueForMissingStub: _FakeGetCollaboratorPhrase_18(
          this,
          Invocation.getter(#logic),
        ),
      ) as _i12.GetCollaboratorPhrase);

  @override
  _i13.CollaboratorPhraseEntity get collaboratorPhraseEntity =>
      (super.noSuchMethod(
        Invocation.getter(#collaboratorPhraseEntity),
        returnValue: _FakeCollaboratorPhraseEntity_19(
          this,
          Invocation.getter(#collaboratorPhraseEntity),
        ),
        returnValueForMissingStub: _FakeCollaboratorPhraseEntity_19(
          this,
          Invocation.getter(#collaboratorPhraseEntity),
        ),
      ) as _i13.CollaboratorPhraseEntity);

  @override
  set collaboratorPhraseEntity(
          _i13.CollaboratorPhraseEntity? _collaboratorPhraseEntity) =>
      super.noSuchMethod(
        Invocation.setter(
          #collaboratorPhraseEntity,
          _collaboratorPhraseEntity,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i14.BaseFutureStore<_i13.CollaboratorPhraseEntity> get futureStore =>
      (super.noSuchMethod(
        Invocation.getter(#futureStore),
        returnValue: _FakeBaseFutureStore_12<_i13.CollaboratorPhraseEntity>(
          this,
          Invocation.getter(#futureStore),
        ),
        returnValueForMissingStub:
            _FakeBaseFutureStore_12<_i13.CollaboratorPhraseEntity>(
          this,
          Invocation.getter(#futureStore),
        ),
      ) as _i14.BaseFutureStore<_i13.CollaboratorPhraseEntity>);

  @override
  set futureStore(
          _i14.BaseFutureStore<_i13.CollaboratorPhraseEntity>? _futureStore) =>
      super.noSuchMethod(
        Invocation.setter(
          #futureStore,
          _futureStore,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get collaboratorPhrase => (super.noSuchMethod(
        Invocation.getter(#collaboratorPhrase),
        returnValue: _i24.dummyValue<String>(
          this,
          Invocation.getter(#collaboratorPhrase),
        ),
        returnValueForMissingStub: _i24.dummyValue<String>(
          this,
          Invocation.getter(#collaboratorPhrase),
        ),
      ) as String);

  @override
  set collaboratorPhrase(String? value) => super.noSuchMethod(
        Invocation.setter(
          #collaboratorPhrase,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i23.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i23.StoreState.initial,
        returnValueForMissingStub: _i23.StoreState.initial,
      ) as _i23.StoreState);

  @override
  set state(_i23.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i24.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
        returnValueForMissingStub: _i24.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i15.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_13(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_13(
          this,
          Invocation.getter(#context),
        ),
      ) as _i15.ReactiveContext);

  @override
  void stateOrErrorUpdater(
          _i10.Either<_i20.Failure, _i13.CollaboratorPhraseEntity>? result) =>
      super.noSuchMethod(
        Invocation.method(
          #stateOrErrorUpdater,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i19.Future<void> call(_i21.NoParams? params) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i19.Future<void>.value(),
        returnValueForMissingStub: _i19.Future<void>.value(),
      ) as _i19.Future<void>);

  @override
  String mapFailureToMessage(_i20.Failure? failure) => (super.noSuchMethod(
        Invocation.method(
          #mapFailureToMessage,
          [failure],
        ),
        returnValue: _i24.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
        returnValueForMissingStub: _i24.dummyValue<String>(
          this,
          Invocation.method(
            #mapFailureToMessage,
            [failure],
          ),
        ),
      ) as String);
}

/// A class which mocks [HomeScreenWidgetsCoordinator].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeScreenWidgetsCoordinator extends _i1.Mock
    implements _i27.HomeScreenWidgetsCoordinator {
  @override
  _i17.TimeAlignmentModelCoordinator get timeModel => (super.noSuchMethod(
        Invocation.getter(#timeModel),
        returnValue: _FakeTimeAlignmentModelCoordinator_20(
          this,
          Invocation.getter(#timeModel),
        ),
        returnValueForMissingStub: _FakeTimeAlignmentModelCoordinator_20(
          this,
          Invocation.getter(#timeModel),
        ),
      ) as _i17.TimeAlignmentModelCoordinator);

  @override
  _i17.NokhteBlurStore get nokhteBlur => (super.noSuchMethod(
        Invocation.getter(#nokhteBlur),
        returnValue: _FakeNokhteBlurStore_21(
          this,
          Invocation.getter(#nokhteBlur),
        ),
        returnValueForMissingStub: _FakeNokhteBlurStore_21(
          this,
          Invocation.getter(#nokhteBlur),
        ),
      ) as _i17.NokhteBlurStore);

  @override
  _i17.BeachWavesStore get beachWaves => (super.noSuchMethod(
        Invocation.getter(#beachWaves),
        returnValue: _FakeBeachWavesStore_22(
          this,
          Invocation.getter(#beachWaves),
        ),
        returnValueForMissingStub: _FakeBeachWavesStore_22(
          this,
          Invocation.getter(#beachWaves),
        ),
      ) as _i17.BeachWavesStore);

  @override
  _i17.WifiDisconnectOverlayStore get wifiDisconnectOverlay =>
      (super.noSuchMethod(
        Invocation.getter(#wifiDisconnectOverlay),
        returnValue: _FakeWifiDisconnectOverlayStore_23(
          this,
          Invocation.getter(#wifiDisconnectOverlay),
        ),
        returnValueForMissingStub: _FakeWifiDisconnectOverlayStore_23(
          this,
          Invocation.getter(#wifiDisconnectOverlay),
        ),
      ) as _i17.WifiDisconnectOverlayStore);

  @override
  _i17.GestureCrossStore get gestureCross => (super.noSuchMethod(
        Invocation.getter(#gestureCross),
        returnValue: _FakeGestureCrossStore_24(
          this,
          Invocation.getter(#gestureCross),
        ),
        returnValueForMissingStub: _FakeGestureCrossStore_24(
          this,
          Invocation.getter(#gestureCross),
        ),
      ) as _i17.GestureCrossStore);

  @override
  _i17.SmartTextStore get primarySmartText => (super.noSuchMethod(
        Invocation.getter(#primarySmartText),
        returnValue: _FakeSmartTextStore_25(
          this,
          Invocation.getter(#primarySmartText),
        ),
        returnValueForMissingStub: _FakeSmartTextStore_25(
          this,
          Invocation.getter(#primarySmartText),
        ),
      ) as _i17.SmartTextStore);

  @override
  _i17.SmartTextStore get secondarySmartText => (super.noSuchMethod(
        Invocation.getter(#secondarySmartText),
        returnValue: _FakeSmartTextStore_25(
          this,
          Invocation.getter(#secondarySmartText),
        ),
        returnValueForMissingStub: _FakeSmartTextStore_25(
          this,
          Invocation.getter(#secondarySmartText),
        ),
      ) as _i17.SmartTextStore);

  @override
  bool get hasCompletedInvitationFlow => (super.noSuchMethod(
        Invocation.getter(#hasCompletedInvitationFlow),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasCompletedInvitationFlow(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasCompletedInvitationFlow,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasSwipedUp => (super.noSuchMethod(
        Invocation.getter(#hasSwipedUp),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasSwipedUp(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasSwipedUp,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get clockAnimationHasNotStarted => (super.noSuchMethod(
        Invocation.getter(#clockAnimationHasNotStarted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set clockAnimationHasNotStarted(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #clockAnimationHasNotStarted,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get clockIsVisible => (super.noSuchMethod(
        Invocation.getter(#clockIsVisible),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set clockIsVisible(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #clockIsVisible,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isDisconnected => (super.noSuchMethod(
        Invocation.getter(#isDisconnected),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isDisconnected(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isDisconnected,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasInitiatedBlur => (super.noSuchMethod(
        Invocation.getter(#hasInitiatedBlur),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set hasInitiatedBlur(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasInitiatedBlur,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isDoubleTriggeringWindDown => (super.noSuchMethod(
        Invocation.getter(#isDoubleTriggeringWindDown),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isDoubleTriggeringWindDown(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isDoubleTriggeringWindDown,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i15.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_13(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeReactiveContext_13(
          this,
          Invocation.getter(#context),
        ),
      ) as _i15.ReactiveContext);

  @override
  dynamic invitationFlowConstructor({bool? skipFirstMessage = false}) =>
      super.noSuchMethod(
        Invocation.method(
          #invitationFlowConstructor,
          [],
          {#skipFirstMessage: skipFirstMessage},
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic prepForNavigation({bool? excludeUnBlur = false}) =>
      super.noSuchMethod(
        Invocation.method(
          #prepForNavigation,
          [],
          {#excludeUnBlur: excludeUnBlur},
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic initReactors(Function? resetFlowCompletionStatus) =>
      super.noSuchMethod(
        Invocation.method(
          #initReactors,
          [resetFlowCompletionStatus],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic gestureCrossTapReactor(Function? resetFlowCompletionStatus) =>
      super.noSuchMethod(
        Invocation.method(
          #gestureCrossTapReactor,
          [resetFlowCompletionStatus],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic onGestureCrossTap(Function? resetFlowCompletionStatus) =>
      super.noSuchMethod(
        Invocation.method(
          #onGestureCrossTap,
          [resetFlowCompletionStatus],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic onAvailabilitySectorMovieStatusFinished(_i28.MovieStatus? p0) =>
      super.noSuchMethod(
        Invocation.method(
          #onAvailabilitySectorMovieStatusFinished,
          [p0],
        ),
        returnValueForMissingStub: null,
      );
}
