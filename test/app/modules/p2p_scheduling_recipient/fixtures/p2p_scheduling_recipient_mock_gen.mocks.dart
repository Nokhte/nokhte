// Mocks generated by Mockito 5.4.0 from annotations
// in primala/test/app/modules/p2p_scheduling_recipient/fixtures/p2p_scheduling_recipient_mock_gen.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mobx/mobx.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:primala/app/core/error/failure.dart' as _i13;
import 'package:primala/app/core/mobx/base_future_store.dart' as _i10;
import 'package:primala/app/core/mobx/store_state.dart' as _i16;
import 'package:primala/app/core/network/network_info.dart' as _i5;
import 'package:primala/app/modules/p2p_scheduling_recipient/data/sources/p2p_scheduling_recipient_remote_source.dart'
    as _i4;
import 'package:primala/app/modules/p2p_scheduling_recipient/domain/contracts/p2p_scheduling_recipient_contract.dart'
    as _i3;
import 'package:primala/app/modules/p2p_scheduling_recipient/domain/entities/p2p_scheduling_response_status_entity.dart'
    as _i14;
import 'package:primala/app/modules/p2p_scheduling_recipient/domain/entities/respond_to_scheduling_request_param_entity.dart'
    as _i15;
import 'package:primala/app/modules/p2p_scheduling_recipient/domain/logic/respond_to_scheduling_request.dart'
    as _i7;
import 'package:primala/app/modules/p2p_scheduling_recipient/presentation/mobx/getters/respond_to_scheduling_request_getter_store.dart'
    as _i9;
import 'package:supabase_flutter/supabase_flutter.dart' as _i6;

import 'p2p_scheduling_recipient_mock_gen.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeP2PSchedulingRecipientContract_1 extends _i1.SmartFake
    implements _i3.P2PSchedulingRecipientContract {
  _FakeP2PSchedulingRecipientContract_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeP2PSchedulingRecipientRemoteSource_2 extends _i1.SmartFake
    implements _i4.P2PSchedulingRecipientRemoteSource {
  _FakeP2PSchedulingRecipientRemoteSource_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkInfo_3 extends _i1.SmartFake implements _i5.NetworkInfo {
  _FakeNetworkInfo_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseClient_4 extends _i1.SmartFake
    implements _i6.SupabaseClient {
  _FakeSupabaseClient_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRespondToSchedulingRequest_5 extends _i1.SmartFake
    implements _i7.RespondToSchedulingRequest {
  _FakeRespondToSchedulingRequest_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_6 extends _i1.SmartFake
    implements _i8.ReactiveContext {
  _FakeReactiveContext_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRespondToSchedulingRequestGetterStore_7 extends _i1.SmartFake
    implements _i9.RespondToSchedulingRequestGetterStore {
  _FakeRespondToSchedulingRequestGetterStore_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseFutureStore_8<T> extends _i1.SmartFake
    implements _i10.BaseFutureStore<T> {
  _FakeBaseFutureStore_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MP2PSchedulingRecipientContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockMP2PSchedulingRecipientContract extends _i1.Mock
    implements _i11.MP2PSchedulingRecipientContract {
  MockMP2PSchedulingRecipientContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<
      _i2.Either<
          _i13.Failure,
          _i14
              .P2PSchedulingResponseStatusEntity>> respondToSchedulingRequest(
          _i15.RespondToSchedulingRequestParamEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #respondToSchedulingRequest,
          [params],
        ),
        returnValue: _i12.Future<
                _i2.Either<_i13.Failure,
                    _i14.P2PSchedulingResponseStatusEntity>>.value(
            _FakeEither_0<_i13.Failure, _i14.P2PSchedulingResponseStatusEntity>(
          this,
          Invocation.method(
            #respondToSchedulingRequest,
            [params],
          ),
        )),
      ) as _i12.Future<
          _i2.Either<_i13.Failure, _i14.P2PSchedulingResponseStatusEntity>>);
}

/// A class which mocks [MRespondToSchedulingRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockMRespondToSchedulingRequest extends _i1.Mock
    implements _i11.MRespondToSchedulingRequest {
  MockMRespondToSchedulingRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.P2PSchedulingRecipientContract get contract => (super.noSuchMethod(
        Invocation.getter(#contract),
        returnValue: _FakeP2PSchedulingRecipientContract_1(
          this,
          Invocation.getter(#contract),
        ),
      ) as _i3.P2PSchedulingRecipientContract);
  @override
  _i12.Future<
      _i2.Either<_i13.Failure, _i14.P2PSchedulingResponseStatusEntity>> call(
          _i15.RespondToSchedulingRequestParamEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i12.Future<
                _i2.Either<_i13.Failure,
                    _i14.P2PSchedulingResponseStatusEntity>>.value(
            _FakeEither_0<_i13.Failure, _i14.P2PSchedulingResponseStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i12.Future<
          _i2.Either<_i13.Failure, _i14.P2PSchedulingResponseStatusEntity>>);
}

/// A class which mocks [MP2PSchedulingRecipientContractImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockMP2PSchedulingRecipientContractImpl extends _i1.Mock
    implements _i11.MP2PSchedulingRecipientContractImpl {
  MockMP2PSchedulingRecipientContractImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.P2PSchedulingRecipientRemoteSource get remoteSource =>
      (super.noSuchMethod(
        Invocation.getter(#remoteSource),
        returnValue: _FakeP2PSchedulingRecipientRemoteSource_2(
          this,
          Invocation.getter(#remoteSource),
        ),
      ) as _i4.P2PSchedulingRecipientRemoteSource);
  @override
  _i5.NetworkInfo get networkInfo => (super.noSuchMethod(
        Invocation.getter(#networkInfo),
        returnValue: _FakeNetworkInfo_3(
          this,
          Invocation.getter(#networkInfo),
        ),
      ) as _i5.NetworkInfo);
  @override
  _i12.Future<
      _i2.Either<
          _i13.Failure,
          _i14
              .P2PSchedulingResponseStatusEntity>> respondToSchedulingRequest(
          _i15.RespondToSchedulingRequestParamEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #respondToSchedulingRequest,
          [params],
        ),
        returnValue: _i12.Future<
                _i2.Either<_i13.Failure,
                    _i14.P2PSchedulingResponseStatusEntity>>.value(
            _FakeEither_0<_i13.Failure, _i14.P2PSchedulingResponseStatusEntity>(
          this,
          Invocation.method(
            #respondToSchedulingRequest,
            [params],
          ),
        )),
      ) as _i12.Future<
          _i2.Either<_i13.Failure, _i14.P2PSchedulingResponseStatusEntity>>);
}

/// A class which mocks [MP2PSchedulingRecipientRemoteSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockMP2PSchedulingRecipientRemoteSourceImpl extends _i1.Mock
    implements _i11.MP2PSchedulingRecipientRemoteSourceImpl {
  MockMP2PSchedulingRecipientRemoteSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.SupabaseClient get supabase => (super.noSuchMethod(
        Invocation.getter(#supabase),
        returnValue: _FakeSupabaseClient_4(
          this,
          Invocation.getter(#supabase),
        ),
      ) as _i6.SupabaseClient);
  @override
  _i12.Future<List<dynamic>> respondToSchedulingRequest(
    String? originalSenderUID,
    String? responseTimestampz,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #respondToSchedulingRequest,
          [
            originalSenderUID,
            responseTimestampz,
          ],
        ),
        returnValue: _i12.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i12.Future<List<dynamic>>);
}

/// A class which mocks [MRespondToSchedulingRequestGetterStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMRespondToSchedulingRequestGetterStore extends _i1.Mock
    implements _i11.MRespondToSchedulingRequestGetterStore {
  MockMRespondToSchedulingRequestGetterStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.RespondToSchedulingRequest get respondToSchedulingRequestLogic =>
      (super.noSuchMethod(
        Invocation.getter(#respondToSchedulingRequestLogic),
        returnValue: _FakeRespondToSchedulingRequest_5(
          this,
          Invocation.getter(#respondToSchedulingRequestLogic),
        ),
      ) as _i7.RespondToSchedulingRequest);
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
  @override
  _i8.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_6(
          this,
          Invocation.getter(#context),
        ),
      ) as _i8.ReactiveContext);
  @override
  _i12.Future<
      _i2.Either<_i13.Failure, _i14.P2PSchedulingResponseStatusEntity>> call(
          _i15.RespondToSchedulingRequestParamEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i12.Future<
                _i2.Either<_i13.Failure,
                    _i14.P2PSchedulingResponseStatusEntity>>.value(
            _FakeEither_0<_i13.Failure, _i14.P2PSchedulingResponseStatusEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i12.Future<
          _i2.Either<_i13.Failure, _i14.P2PSchedulingResponseStatusEntity>>);
}

/// A class which mocks [MRespondToSchedulingRequestStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockMRespondToSchedulingRequestStore extends _i1.Mock
    implements _i11.MRespondToSchedulingRequestStore {
  MockMRespondToSchedulingRequestStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.RespondToSchedulingRequestGetterStore get respondToARequestGetterStore =>
      (super.noSuchMethod(
        Invocation.getter(#respondToARequestGetterStore),
        returnValue: _FakeRespondToSchedulingRequestGetterStore_7(
          this,
          Invocation.getter(#respondToARequestGetterStore),
        ),
      ) as _i9.RespondToSchedulingRequestGetterStore);
  @override
  _i10.BaseFutureStore<_i14.P2PSchedulingResponseStatusEntity>
      get futureStore => (super.noSuchMethod(
            Invocation.getter(#futureStore),
            returnValue:
                _FakeBaseFutureStore_8<_i14.P2PSchedulingResponseStatusEntity>(
              this,
              Invocation.getter(#futureStore),
            ),
          ) as _i10.BaseFutureStore<_i14.P2PSchedulingResponseStatusEntity>);
  @override
  set futureStore(
          _i10.BaseFutureStore<_i14.P2PSchedulingResponseStatusEntity>?
              value) =>
      super.noSuchMethod(
        Invocation.setter(
          #futureStore,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isSent => (super.noSuchMethod(
        Invocation.getter(#isSent),
        returnValue: false,
      ) as bool);
  @override
  set isSent(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isSent,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
  @override
  _i16.StoreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i16.StoreState.initial,
      ) as _i16.StoreState);
  @override
  set state(_i16.StoreState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: '',
      ) as String);
  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_6(
          this,
          Invocation.getter(#context),
        ),
      ) as _i8.ReactiveContext);
  @override
  void stateOrErrorUpdater(
          _i2.Either<_i13.Failure, _i14.P2PSchedulingResponseStatusEntity>?
              result) =>
      super.noSuchMethod(
        Invocation.method(
          #stateOrErrorUpdater,
          [result],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i12.Future<void> call(_i15.RespondToSchedulingRequestParamEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  String mapFailureToMessage(_i13.Failure? failure) => (super.noSuchMethod(
        Invocation.method(
          #mapFailureToMessage,
          [failure],
        ),
        returnValue: '',
      ) as String);
}
